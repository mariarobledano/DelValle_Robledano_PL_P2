Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> statement_list
Rule 2     statement_list -> statement
Rule 3     statement_list -> statement_list statement
Rule 4     statement -> statement_declaration
Rule 5     statement -> statement_assign
Rule 6     statement -> statement_function
Rule 7     statement -> statement_return
Rule 8     statement -> statement_if
Rule 9     statement -> statement_instance
Rule 10    statement -> statement_type_def
Rule 11    statement_declaration -> type id_list
Rule 12    statement_declaration -> type id_list ASSIGN expression
Rule 13    statement_assign -> expression ASSIGN expression
Rule 14    statement_function -> DEF type ID LPAREN param_list RPAREN COLON LBRACE statement_list RBRACE
Rule 15    statement_return -> RETURN expression
Rule 16    statement_if -> IF expression COLON LBRACE statement_list RBRACE
Rule 17    statement_if -> IF expression COLON LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE
Rule 18    statement_instance -> ID ID
Rule 19    statement -> WHILE expression COLON LBRACE statement_list RBRACE
Rule 20    statement_type_def -> TYPE ID COLON LBRACE field_list RBRACE
Rule 21    id_list -> ID
Rule 22    id_list -> id_list COMMA ID
Rule 23    type -> base_type
Rule 24    type -> base_type LBRACKET NUMBER RBRACKET
Rule 25    base_type -> INT
Rule 26    base_type -> FLOAT
Rule 27    base_type -> CHAR
Rule 28    base_type -> BOOL
Rule 29    expression -> expression_binaria
Rule 30    expression -> expression_comparacion
Rule 31    expression -> expression_logica
Rule 32    expression -> expression_unaria
Rule 33    expression -> expression_group
Rule 34    expression -> expression_number
Rule 35    expression -> expression_var
Rule 36    expression -> expression_array_access
Rule 37    expression -> expression_field_access
Rule 38    expression -> expression_func_call
Rule 39    expression_binaria -> expression PLUS expression
Rule 40    expression_binaria -> expression MINUS expression
Rule 41    expression_binaria -> expression TIMES expression
Rule 42    expression_binaria -> expression DIVIDE expression
Rule 43    expression_comparacion -> expression EQ expression
Rule 44    expression_comparacion -> expression GT expression
Rule 45    expression_comparacion -> expression GE expression
Rule 46    expression_comparacion -> expression LT expression
Rule 47    expression_comparacion -> expression LE expression
Rule 48    expression_logica -> expression AND expression
Rule 49    expression_logica -> expression OR expression
Rule 50    expression_unaria -> MINUS expression
Rule 51    expression_unaria -> NOT expression
Rule 52    expression_group -> LPAREN expression RPAREN
Rule 53    expression_number -> NUMBER
Rule 54    expression_number -> FLOAT_NUMBER
Rule 55    expression_number -> TRUE
Rule 56    expression_number -> FALSE
Rule 57    expression_number -> CHARACTER
Rule 58    expression_var -> ID
Rule 59    expression_array_access -> expression LBRACKET expression RBRACKET
Rule 60    expression_field_access -> expression DOT ID
Rule 61    expression_func_call -> ID LPAREN arg_list RPAREN
Rule 62    param_list -> param
Rule 63    param_list -> param_list SEMICOLON param
Rule 64    param -> type ID
Rule 65    arg_list -> expression
Rule 66    arg_list -> arg_list COMMA expression
Rule 67    arg_list -> empty
Rule 68    field_list -> field
Rule 69    field_list -> field_list field
Rule 70    field -> type ID
Rule 71    empty -> <empty>

Terminals, with rules where they appear

AND                  : 48
ASSIGN               : 12 13
BOOL                 : 28
CHAR                 : 27
CHARACTER            : 57
COLON                : 14 16 17 19 20
COMMA                : 22 66
DEF                  : 14
DIVIDE               : 42
DOT                  : 60
ELSE                 : 17
EQ                   : 43
FALSE                : 56
FLOAT                : 26
FLOAT_NUMBER         : 54
GE                   : 45
GT                   : 44
ID                   : 14 18 18 20 21 22 58 60 61 64 70
IF                   : 16 17
INT                  : 25
LBRACE               : 14 16 17 17 19 20
LBRACKET             : 24 59
LE                   : 47
LPAREN               : 14 52 61
LT                   : 46
MINUS                : 40 50
NOT                  : 51
NUMBER               : 24 53
OR                   : 49
PLUS                 : 39
RBRACE               : 14 16 17 17 19 20
RBRACKET             : 24 59
RETURN               : 15
RPAREN               : 14 52 61
SEMICOLON            : 63
TIMES                : 41
TRUE                 : 55
TYPE                 : 20
WHILE                : 19
error                : 

Nonterminals, with rules where they appear

arg_list             : 61 66
base_type            : 23 24
empty                : 67
expression           : 12 13 13 15 16 17 19 39 39 40 40 41 41 42 42 43 43 44 44 45 45 46 46 47 47 48 48 49 49 50 51 52 59 59 60 65 66
expression_array_access : 36
expression_binaria   : 29
expression_comparacion : 30
expression_field_access : 37
expression_func_call : 38
expression_group     : 33
expression_logica    : 31
expression_number    : 34
expression_unaria    : 32
expression_var       : 35
field                : 68 69
field_list           : 20 69
id_list              : 11 12 22
param                : 62 63
param_list           : 14 63
program              : 0
statement            : 2 3
statement_assign     : 5
statement_declaration : 4
statement_function   : 6
statement_if         : 8
statement_instance   : 9
statement_list       : 1 3 14 16 17 17 19
statement_return     : 7
statement_type_def   : 10
type                 : 11 12 14 64 70

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statement_list
    (2) statement_list -> . statement
    (3) statement_list -> . statement_list statement
    (4) statement -> . statement_declaration
    (5) statement -> . statement_assign
    (6) statement -> . statement_function
    (7) statement -> . statement_return
    (8) statement -> . statement_if
    (9) statement -> . statement_instance
    (10) statement -> . statement_type_def
    (19) statement -> . WHILE expression COLON LBRACE statement_list RBRACE
    (11) statement_declaration -> . type id_list
    (12) statement_declaration -> . type id_list ASSIGN expression
    (13) statement_assign -> . expression ASSIGN expression
    (14) statement_function -> . DEF type ID LPAREN param_list RPAREN COLON LBRACE statement_list RBRACE
    (15) statement_return -> . RETURN expression
    (16) statement_if -> . IF expression COLON LBRACE statement_list RBRACE
    (17) statement_if -> . IF expression COLON LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE
    (18) statement_instance -> . ID ID
    (20) statement_type_def -> . TYPE ID COLON LBRACE field_list RBRACE
    (23) type -> . base_type
    (24) type -> . base_type LBRACKET NUMBER RBRACKET
    (29) expression -> . expression_binaria
    (30) expression -> . expression_comparacion
    (31) expression -> . expression_logica
    (32) expression -> . expression_unaria
    (33) expression -> . expression_group
    (34) expression -> . expression_number
    (35) expression -> . expression_var
    (36) expression -> . expression_array_access
    (37) expression -> . expression_field_access
    (38) expression -> . expression_func_call
    (25) base_type -> . INT
    (26) base_type -> . FLOAT
    (27) base_type -> . CHAR
    (28) base_type -> . BOOL
    (39) expression_binaria -> . expression PLUS expression
    (40) expression_binaria -> . expression MINUS expression
    (41) expression_binaria -> . expression TIMES expression
    (42) expression_binaria -> . expression DIVIDE expression
    (43) expression_comparacion -> . expression EQ expression
    (44) expression_comparacion -> . expression GT expression
    (45) expression_comparacion -> . expression GE expression
    (46) expression_comparacion -> . expression LT expression
    (47) expression_comparacion -> . expression LE expression
    (48) expression_logica -> . expression AND expression
    (49) expression_logica -> . expression OR expression
    (50) expression_unaria -> . MINUS expression
    (51) expression_unaria -> . NOT expression
    (52) expression_group -> . LPAREN expression RPAREN
    (53) expression_number -> . NUMBER
    (54) expression_number -> . FLOAT_NUMBER
    (55) expression_number -> . TRUE
    (56) expression_number -> . FALSE
    (57) expression_number -> . CHARACTER
    (58) expression_var -> . ID
    (59) expression_array_access -> . expression LBRACKET expression RBRACKET
    (60) expression_field_access -> . expression DOT ID
    (61) expression_func_call -> . ID LPAREN arg_list RPAREN

    WHILE           shift and go to state 11
    DEF             shift and go to state 14
    RETURN          shift and go to state 17
    IF              shift and go to state 18
    ID              shift and go to state 15
    TYPE            shift and go to state 19
    INT             shift and go to state 32
    FLOAT           shift and go to state 33
    CHAR            shift and go to state 34
    BOOL            shift and go to state 35
    MINUS           shift and go to state 36
    NOT             shift and go to state 37
    LPAREN          shift and go to state 16
    NUMBER          shift and go to state 21
    FLOAT_NUMBER    shift and go to state 38
    TRUE            shift and go to state 39
    FALSE           shift and go to state 40
    CHARACTER       shift and go to state 41

    program                        shift and go to state 1
    statement_list                 shift and go to state 2
    statement                      shift and go to state 3
    statement_declaration          shift and go to state 4
    statement_assign               shift and go to state 5
    statement_function             shift and go to state 6
    statement_return               shift and go to state 7
    statement_if                   shift and go to state 8
    statement_instance             shift and go to state 9
    statement_type_def             shift and go to state 10
    expression                     shift and go to state 12
    type                           shift and go to state 13
    base_type                      shift and go to state 20
    expression_binaria             shift and go to state 22
    expression_comparacion         shift and go to state 23
    expression_logica              shift and go to state 24
    expression_unaria              shift and go to state 25
    expression_group               shift and go to state 26
    expression_number              shift and go to state 27
    expression_var                 shift and go to state 28
    expression_array_access        shift and go to state 29
    expression_field_access        shift and go to state 30
    expression_func_call           shift and go to state 31

state 1

    (0) S' -> program .



state 2

    (1) program -> statement_list .
    (3) statement_list -> statement_list . statement
    (4) statement -> . statement_declaration
    (5) statement -> . statement_assign
    (6) statement -> . statement_function
    (7) statement -> . statement_return
    (8) statement -> . statement_if
    (9) statement -> . statement_instance
    (10) statement -> . statement_type_def
    (19) statement -> . WHILE expression COLON LBRACE statement_list RBRACE
    (11) statement_declaration -> . type id_list
    (12) statement_declaration -> . type id_list ASSIGN expression
    (13) statement_assign -> . expression ASSIGN expression
    (14) statement_function -> . DEF type ID LPAREN param_list RPAREN COLON LBRACE statement_list RBRACE
    (15) statement_return -> . RETURN expression
    (16) statement_if -> . IF expression COLON LBRACE statement_list RBRACE
    (17) statement_if -> . IF expression COLON LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE
    (18) statement_instance -> . ID ID
    (20) statement_type_def -> . TYPE ID COLON LBRACE field_list RBRACE
    (23) type -> . base_type
    (24) type -> . base_type LBRACKET NUMBER RBRACKET
    (29) expression -> . expression_binaria
    (30) expression -> . expression_comparacion
    (31) expression -> . expression_logica
    (32) expression -> . expression_unaria
    (33) expression -> . expression_group
    (34) expression -> . expression_number
    (35) expression -> . expression_var
    (36) expression -> . expression_array_access
    (37) expression -> . expression_field_access
    (38) expression -> . expression_func_call
    (25) base_type -> . INT
    (26) base_type -> . FLOAT
    (27) base_type -> . CHAR
    (28) base_type -> . BOOL
    (39) expression_binaria -> . expression PLUS expression
    (40) expression_binaria -> . expression MINUS expression
    (41) expression_binaria -> . expression TIMES expression
    (42) expression_binaria -> . expression DIVIDE expression
    (43) expression_comparacion -> . expression EQ expression
    (44) expression_comparacion -> . expression GT expression
    (45) expression_comparacion -> . expression GE expression
    (46) expression_comparacion -> . expression LT expression
    (47) expression_comparacion -> . expression LE expression
    (48) expression_logica -> . expression AND expression
    (49) expression_logica -> . expression OR expression
    (50) expression_unaria -> . MINUS expression
    (51) expression_unaria -> . NOT expression
    (52) expression_group -> . LPAREN expression RPAREN
    (53) expression_number -> . NUMBER
    (54) expression_number -> . FLOAT_NUMBER
    (55) expression_number -> . TRUE
    (56) expression_number -> . FALSE
    (57) expression_number -> . CHARACTER
    (58) expression_var -> . ID
    (59) expression_array_access -> . expression LBRACKET expression RBRACKET
    (60) expression_field_access -> . expression DOT ID
    (61) expression_func_call -> . ID LPAREN arg_list RPAREN

    $end            reduce using rule 1 (program -> statement_list .)
    WHILE           shift and go to state 11
    DEF             shift and go to state 14
    RETURN          shift and go to state 17
    IF              shift and go to state 18
    ID              shift and go to state 15
    TYPE            shift and go to state 19
    INT             shift and go to state 32
    FLOAT           shift and go to state 33
    CHAR            shift and go to state 34
    BOOL            shift and go to state 35
    MINUS           shift and go to state 36
    NOT             shift and go to state 37
    LPAREN          shift and go to state 16
    NUMBER          shift and go to state 21
    FLOAT_NUMBER    shift and go to state 38
    TRUE            shift and go to state 39
    FALSE           shift and go to state 40
    CHARACTER       shift and go to state 41

    statement                      shift and go to state 42
    statement_declaration          shift and go to state 4
    statement_assign               shift and go to state 5
    statement_function             shift and go to state 6
    statement_return               shift and go to state 7
    statement_if                   shift and go to state 8
    statement_instance             shift and go to state 9
    statement_type_def             shift and go to state 10
    expression                     shift and go to state 12
    type                           shift and go to state 13
    base_type                      shift and go to state 20
    expression_binaria             shift and go to state 22
    expression_comparacion         shift and go to state 23
    expression_logica              shift and go to state 24
    expression_unaria              shift and go to state 25
    expression_group               shift and go to state 26
    expression_number              shift and go to state 27
    expression_var                 shift and go to state 28
    expression_array_access        shift and go to state 29
    expression_field_access        shift and go to state 30
    expression_func_call           shift and go to state 31

state 3

    (2) statement_list -> statement .

    WHILE           reduce using rule 2 (statement_list -> statement .)
    DEF             reduce using rule 2 (statement_list -> statement .)
    RETURN          reduce using rule 2 (statement_list -> statement .)
    IF              reduce using rule 2 (statement_list -> statement .)
    ID              reduce using rule 2 (statement_list -> statement .)
    TYPE            reduce using rule 2 (statement_list -> statement .)
    INT             reduce using rule 2 (statement_list -> statement .)
    FLOAT           reduce using rule 2 (statement_list -> statement .)
    CHAR            reduce using rule 2 (statement_list -> statement .)
    BOOL            reduce using rule 2 (statement_list -> statement .)
    MINUS           reduce using rule 2 (statement_list -> statement .)
    NOT             reduce using rule 2 (statement_list -> statement .)
    LPAREN          reduce using rule 2 (statement_list -> statement .)
    NUMBER          reduce using rule 2 (statement_list -> statement .)
    FLOAT_NUMBER    reduce using rule 2 (statement_list -> statement .)
    TRUE            reduce using rule 2 (statement_list -> statement .)
    FALSE           reduce using rule 2 (statement_list -> statement .)
    CHARACTER       reduce using rule 2 (statement_list -> statement .)
    $end            reduce using rule 2 (statement_list -> statement .)
    RBRACE          reduce using rule 2 (statement_list -> statement .)


state 4

    (4) statement -> statement_declaration .

    WHILE           reduce using rule 4 (statement -> statement_declaration .)
    DEF             reduce using rule 4 (statement -> statement_declaration .)
    RETURN          reduce using rule 4 (statement -> statement_declaration .)
    IF              reduce using rule 4 (statement -> statement_declaration .)
    ID              reduce using rule 4 (statement -> statement_declaration .)
    TYPE            reduce using rule 4 (statement -> statement_declaration .)
    INT             reduce using rule 4 (statement -> statement_declaration .)
    FLOAT           reduce using rule 4 (statement -> statement_declaration .)
    CHAR            reduce using rule 4 (statement -> statement_declaration .)
    BOOL            reduce using rule 4 (statement -> statement_declaration .)
    MINUS           reduce using rule 4 (statement -> statement_declaration .)
    NOT             reduce using rule 4 (statement -> statement_declaration .)
    LPAREN          reduce using rule 4 (statement -> statement_declaration .)
    NUMBER          reduce using rule 4 (statement -> statement_declaration .)
    FLOAT_NUMBER    reduce using rule 4 (statement -> statement_declaration .)
    TRUE            reduce using rule 4 (statement -> statement_declaration .)
    FALSE           reduce using rule 4 (statement -> statement_declaration .)
    CHARACTER       reduce using rule 4 (statement -> statement_declaration .)
    $end            reduce using rule 4 (statement -> statement_declaration .)
    RBRACE          reduce using rule 4 (statement -> statement_declaration .)


state 5

    (5) statement -> statement_assign .

    WHILE           reduce using rule 5 (statement -> statement_assign .)
    DEF             reduce using rule 5 (statement -> statement_assign .)
    RETURN          reduce using rule 5 (statement -> statement_assign .)
    IF              reduce using rule 5 (statement -> statement_assign .)
    ID              reduce using rule 5 (statement -> statement_assign .)
    TYPE            reduce using rule 5 (statement -> statement_assign .)
    INT             reduce using rule 5 (statement -> statement_assign .)
    FLOAT           reduce using rule 5 (statement -> statement_assign .)
    CHAR            reduce using rule 5 (statement -> statement_assign .)
    BOOL            reduce using rule 5 (statement -> statement_assign .)
    MINUS           reduce using rule 5 (statement -> statement_assign .)
    NOT             reduce using rule 5 (statement -> statement_assign .)
    LPAREN          reduce using rule 5 (statement -> statement_assign .)
    NUMBER          reduce using rule 5 (statement -> statement_assign .)
    FLOAT_NUMBER    reduce using rule 5 (statement -> statement_assign .)
    TRUE            reduce using rule 5 (statement -> statement_assign .)
    FALSE           reduce using rule 5 (statement -> statement_assign .)
    CHARACTER       reduce using rule 5 (statement -> statement_assign .)
    $end            reduce using rule 5 (statement -> statement_assign .)
    RBRACE          reduce using rule 5 (statement -> statement_assign .)


state 6

    (6) statement -> statement_function .

    WHILE           reduce using rule 6 (statement -> statement_function .)
    DEF             reduce using rule 6 (statement -> statement_function .)
    RETURN          reduce using rule 6 (statement -> statement_function .)
    IF              reduce using rule 6 (statement -> statement_function .)
    ID              reduce using rule 6 (statement -> statement_function .)
    TYPE            reduce using rule 6 (statement -> statement_function .)
    INT             reduce using rule 6 (statement -> statement_function .)
    FLOAT           reduce using rule 6 (statement -> statement_function .)
    CHAR            reduce using rule 6 (statement -> statement_function .)
    BOOL            reduce using rule 6 (statement -> statement_function .)
    MINUS           reduce using rule 6 (statement -> statement_function .)
    NOT             reduce using rule 6 (statement -> statement_function .)
    LPAREN          reduce using rule 6 (statement -> statement_function .)
    NUMBER          reduce using rule 6 (statement -> statement_function .)
    FLOAT_NUMBER    reduce using rule 6 (statement -> statement_function .)
    TRUE            reduce using rule 6 (statement -> statement_function .)
    FALSE           reduce using rule 6 (statement -> statement_function .)
    CHARACTER       reduce using rule 6 (statement -> statement_function .)
    $end            reduce using rule 6 (statement -> statement_function .)
    RBRACE          reduce using rule 6 (statement -> statement_function .)


state 7

    (7) statement -> statement_return .

    WHILE           reduce using rule 7 (statement -> statement_return .)
    DEF             reduce using rule 7 (statement -> statement_return .)
    RETURN          reduce using rule 7 (statement -> statement_return .)
    IF              reduce using rule 7 (statement -> statement_return .)
    ID              reduce using rule 7 (statement -> statement_return .)
    TYPE            reduce using rule 7 (statement -> statement_return .)
    INT             reduce using rule 7 (statement -> statement_return .)
    FLOAT           reduce using rule 7 (statement -> statement_return .)
    CHAR            reduce using rule 7 (statement -> statement_return .)
    BOOL            reduce using rule 7 (statement -> statement_return .)
    MINUS           reduce using rule 7 (statement -> statement_return .)
    NOT             reduce using rule 7 (statement -> statement_return .)
    LPAREN          reduce using rule 7 (statement -> statement_return .)
    NUMBER          reduce using rule 7 (statement -> statement_return .)
    FLOAT_NUMBER    reduce using rule 7 (statement -> statement_return .)
    TRUE            reduce using rule 7 (statement -> statement_return .)
    FALSE           reduce using rule 7 (statement -> statement_return .)
    CHARACTER       reduce using rule 7 (statement -> statement_return .)
    $end            reduce using rule 7 (statement -> statement_return .)
    RBRACE          reduce using rule 7 (statement -> statement_return .)


state 8

    (8) statement -> statement_if .

    WHILE           reduce using rule 8 (statement -> statement_if .)
    DEF             reduce using rule 8 (statement -> statement_if .)
    RETURN          reduce using rule 8 (statement -> statement_if .)
    IF              reduce using rule 8 (statement -> statement_if .)
    ID              reduce using rule 8 (statement -> statement_if .)
    TYPE            reduce using rule 8 (statement -> statement_if .)
    INT             reduce using rule 8 (statement -> statement_if .)
    FLOAT           reduce using rule 8 (statement -> statement_if .)
    CHAR            reduce using rule 8 (statement -> statement_if .)
    BOOL            reduce using rule 8 (statement -> statement_if .)
    MINUS           reduce using rule 8 (statement -> statement_if .)
    NOT             reduce using rule 8 (statement -> statement_if .)
    LPAREN          reduce using rule 8 (statement -> statement_if .)
    NUMBER          reduce using rule 8 (statement -> statement_if .)
    FLOAT_NUMBER    reduce using rule 8 (statement -> statement_if .)
    TRUE            reduce using rule 8 (statement -> statement_if .)
    FALSE           reduce using rule 8 (statement -> statement_if .)
    CHARACTER       reduce using rule 8 (statement -> statement_if .)
    $end            reduce using rule 8 (statement -> statement_if .)
    RBRACE          reduce using rule 8 (statement -> statement_if .)


state 9

    (9) statement -> statement_instance .

    WHILE           reduce using rule 9 (statement -> statement_instance .)
    DEF             reduce using rule 9 (statement -> statement_instance .)
    RETURN          reduce using rule 9 (statement -> statement_instance .)
    IF              reduce using rule 9 (statement -> statement_instance .)
    ID              reduce using rule 9 (statement -> statement_instance .)
    TYPE            reduce using rule 9 (statement -> statement_instance .)
    INT             reduce using rule 9 (statement -> statement_instance .)
    FLOAT           reduce using rule 9 (statement -> statement_instance .)
    CHAR            reduce using rule 9 (statement -> statement_instance .)
    BOOL            reduce using rule 9 (statement -> statement_instance .)
    MINUS           reduce using rule 9 (statement -> statement_instance .)
    NOT             reduce using rule 9 (statement -> statement_instance .)
    LPAREN          reduce using rule 9 (statement -> statement_instance .)
    NUMBER          reduce using rule 9 (statement -> statement_instance .)
    FLOAT_NUMBER    reduce using rule 9 (statement -> statement_instance .)
    TRUE            reduce using rule 9 (statement -> statement_instance .)
    FALSE           reduce using rule 9 (statement -> statement_instance .)
    CHARACTER       reduce using rule 9 (statement -> statement_instance .)
    $end            reduce using rule 9 (statement -> statement_instance .)
    RBRACE          reduce using rule 9 (statement -> statement_instance .)


state 10

    (10) statement -> statement_type_def .

    WHILE           reduce using rule 10 (statement -> statement_type_def .)
    DEF             reduce using rule 10 (statement -> statement_type_def .)
    RETURN          reduce using rule 10 (statement -> statement_type_def .)
    IF              reduce using rule 10 (statement -> statement_type_def .)
    ID              reduce using rule 10 (statement -> statement_type_def .)
    TYPE            reduce using rule 10 (statement -> statement_type_def .)
    INT             reduce using rule 10 (statement -> statement_type_def .)
    FLOAT           reduce using rule 10 (statement -> statement_type_def .)
    CHAR            reduce using rule 10 (statement -> statement_type_def .)
    BOOL            reduce using rule 10 (statement -> statement_type_def .)
    MINUS           reduce using rule 10 (statement -> statement_type_def .)
    NOT             reduce using rule 10 (statement -> statement_type_def .)
    LPAREN          reduce using rule 10 (statement -> statement_type_def .)
    NUMBER          reduce using rule 10 (statement -> statement_type_def .)
    FLOAT_NUMBER    reduce using rule 10 (statement -> statement_type_def .)
    TRUE            reduce using rule 10 (statement -> statement_type_def .)
    FALSE           reduce using rule 10 (statement -> statement_type_def .)
    CHARACTER       reduce using rule 10 (statement -> statement_type_def .)
    $end            reduce using rule 10 (statement -> statement_type_def .)
    RBRACE          reduce using rule 10 (statement -> statement_type_def .)


state 11

    (19) statement -> WHILE . expression COLON LBRACE statement_list RBRACE
    (29) expression -> . expression_binaria
    (30) expression -> . expression_comparacion
    (31) expression -> . expression_logica
    (32) expression -> . expression_unaria
    (33) expression -> . expression_group
    (34) expression -> . expression_number
    (35) expression -> . expression_var
    (36) expression -> . expression_array_access
    (37) expression -> . expression_field_access
    (38) expression -> . expression_func_call
    (39) expression_binaria -> . expression PLUS expression
    (40) expression_binaria -> . expression MINUS expression
    (41) expression_binaria -> . expression TIMES expression
    (42) expression_binaria -> . expression DIVIDE expression
    (43) expression_comparacion -> . expression EQ expression
    (44) expression_comparacion -> . expression GT expression
    (45) expression_comparacion -> . expression GE expression
    (46) expression_comparacion -> . expression LT expression
    (47) expression_comparacion -> . expression LE expression
    (48) expression_logica -> . expression AND expression
    (49) expression_logica -> . expression OR expression
    (50) expression_unaria -> . MINUS expression
    (51) expression_unaria -> . NOT expression
    (52) expression_group -> . LPAREN expression RPAREN
    (53) expression_number -> . NUMBER
    (54) expression_number -> . FLOAT_NUMBER
    (55) expression_number -> . TRUE
    (56) expression_number -> . FALSE
    (57) expression_number -> . CHARACTER
    (58) expression_var -> . ID
    (59) expression_array_access -> . expression LBRACKET expression RBRACKET
    (60) expression_field_access -> . expression DOT ID
    (61) expression_func_call -> . ID LPAREN arg_list RPAREN

    MINUS           shift and go to state 36
    NOT             shift and go to state 37
    LPAREN          shift and go to state 16
    NUMBER          shift and go to state 21
    FLOAT_NUMBER    shift and go to state 38
    TRUE            shift and go to state 39
    FALSE           shift and go to state 40
    CHARACTER       shift and go to state 41
    ID              shift and go to state 44

    expression                     shift and go to state 43
    expression_binaria             shift and go to state 22
    expression_comparacion         shift and go to state 23
    expression_logica              shift and go to state 24
    expression_unaria              shift and go to state 25
    expression_group               shift and go to state 26
    expression_number              shift and go to state 27
    expression_var                 shift and go to state 28
    expression_array_access        shift and go to state 29
    expression_field_access        shift and go to state 30
    expression_func_call           shift and go to state 31

state 12

    (13) statement_assign -> expression . ASSIGN expression
    (39) expression_binaria -> expression . PLUS expression
    (40) expression_binaria -> expression . MINUS expression
    (41) expression_binaria -> expression . TIMES expression
    (42) expression_binaria -> expression . DIVIDE expression
    (43) expression_comparacion -> expression . EQ expression
    (44) expression_comparacion -> expression . GT expression
    (45) expression_comparacion -> expression . GE expression
    (46) expression_comparacion -> expression . LT expression
    (47) expression_comparacion -> expression . LE expression
    (48) expression_logica -> expression . AND expression
    (49) expression_logica -> expression . OR expression
    (59) expression_array_access -> expression . LBRACKET expression RBRACKET
    (60) expression_field_access -> expression . DOT ID

    ASSIGN          shift and go to state 45
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    TIMES           shift and go to state 48
    DIVIDE          shift and go to state 49
    EQ              shift and go to state 50
    GT              shift and go to state 51
    GE              shift and go to state 52
    LT              shift and go to state 53
    LE              shift and go to state 54
    AND             shift and go to state 55
    OR              shift and go to state 56
    LBRACKET        shift and go to state 57
    DOT             shift and go to state 58


state 13

    (11) statement_declaration -> type . id_list
    (12) statement_declaration -> type . id_list ASSIGN expression
    (21) id_list -> . ID
    (22) id_list -> . id_list COMMA ID

    ID              shift and go to state 60

    id_list                        shift and go to state 59

state 14

    (14) statement_function -> DEF . type ID LPAREN param_list RPAREN COLON LBRACE statement_list RBRACE
    (23) type -> . base_type
    (24) type -> . base_type LBRACKET NUMBER RBRACKET
    (25) base_type -> . INT
    (26) base_type -> . FLOAT
    (27) base_type -> . CHAR
    (28) base_type -> . BOOL

    INT             shift and go to state 32
    FLOAT           shift and go to state 33
    CHAR            shift and go to state 34
    BOOL            shift and go to state 35

    type                           shift and go to state 61
    base_type                      shift and go to state 20

state 15

    (18) statement_instance -> ID . ID
    (58) expression_var -> ID .
    (61) expression_func_call -> ID . LPAREN arg_list RPAREN

    ID              shift and go to state 62
    ASSIGN          reduce using rule 58 (expression_var -> ID .)
    PLUS            reduce using rule 58 (expression_var -> ID .)
    MINUS           reduce using rule 58 (expression_var -> ID .)
    TIMES           reduce using rule 58 (expression_var -> ID .)
    DIVIDE          reduce using rule 58 (expression_var -> ID .)
    EQ              reduce using rule 58 (expression_var -> ID .)
    GT              reduce using rule 58 (expression_var -> ID .)
    GE              reduce using rule 58 (expression_var -> ID .)
    LT              reduce using rule 58 (expression_var -> ID .)
    LE              reduce using rule 58 (expression_var -> ID .)
    AND             reduce using rule 58 (expression_var -> ID .)
    OR              reduce using rule 58 (expression_var -> ID .)
    LBRACKET        reduce using rule 58 (expression_var -> ID .)
    DOT             reduce using rule 58 (expression_var -> ID .)
    LPAREN          shift and go to state 63


state 16

    (52) expression_group -> LPAREN . expression RPAREN
    (29) expression -> . expression_binaria
    (30) expression -> . expression_comparacion
    (31) expression -> . expression_logica
    (32) expression -> . expression_unaria
    (33) expression -> . expression_group
    (34) expression -> . expression_number
    (35) expression -> . expression_var
    (36) expression -> . expression_array_access
    (37) expression -> . expression_field_access
    (38) expression -> . expression_func_call
    (39) expression_binaria -> . expression PLUS expression
    (40) expression_binaria -> . expression MINUS expression
    (41) expression_binaria -> . expression TIMES expression
    (42) expression_binaria -> . expression DIVIDE expression
    (43) expression_comparacion -> . expression EQ expression
    (44) expression_comparacion -> . expression GT expression
    (45) expression_comparacion -> . expression GE expression
    (46) expression_comparacion -> . expression LT expression
    (47) expression_comparacion -> . expression LE expression
    (48) expression_logica -> . expression AND expression
    (49) expression_logica -> . expression OR expression
    (50) expression_unaria -> . MINUS expression
    (51) expression_unaria -> . NOT expression
    (52) expression_group -> . LPAREN expression RPAREN
    (53) expression_number -> . NUMBER
    (54) expression_number -> . FLOAT_NUMBER
    (55) expression_number -> . TRUE
    (56) expression_number -> . FALSE
    (57) expression_number -> . CHARACTER
    (58) expression_var -> . ID
    (59) expression_array_access -> . expression LBRACKET expression RBRACKET
    (60) expression_field_access -> . expression DOT ID
    (61) expression_func_call -> . ID LPAREN arg_list RPAREN

    MINUS           shift and go to state 36
    NOT             shift and go to state 37
    LPAREN          shift and go to state 16
    NUMBER          shift and go to state 21
    FLOAT_NUMBER    shift and go to state 38
    TRUE            shift and go to state 39
    FALSE           shift and go to state 40
    CHARACTER       shift and go to state 41
    ID              shift and go to state 44

    expression                     shift and go to state 64
    expression_binaria             shift and go to state 22
    expression_comparacion         shift and go to state 23
    expression_logica              shift and go to state 24
    expression_unaria              shift and go to state 25
    expression_group               shift and go to state 26
    expression_number              shift and go to state 27
    expression_var                 shift and go to state 28
    expression_array_access        shift and go to state 29
    expression_field_access        shift and go to state 30
    expression_func_call           shift and go to state 31

state 17

    (15) statement_return -> RETURN . expression
    (29) expression -> . expression_binaria
    (30) expression -> . expression_comparacion
    (31) expression -> . expression_logica
    (32) expression -> . expression_unaria
    (33) expression -> . expression_group
    (34) expression -> . expression_number
    (35) expression -> . expression_var
    (36) expression -> . expression_array_access
    (37) expression -> . expression_field_access
    (38) expression -> . expression_func_call
    (39) expression_binaria -> . expression PLUS expression
    (40) expression_binaria -> . expression MINUS expression
    (41) expression_binaria -> . expression TIMES expression
    (42) expression_binaria -> . expression DIVIDE expression
    (43) expression_comparacion -> . expression EQ expression
    (44) expression_comparacion -> . expression GT expression
    (45) expression_comparacion -> . expression GE expression
    (46) expression_comparacion -> . expression LT expression
    (47) expression_comparacion -> . expression LE expression
    (48) expression_logica -> . expression AND expression
    (49) expression_logica -> . expression OR expression
    (50) expression_unaria -> . MINUS expression
    (51) expression_unaria -> . NOT expression
    (52) expression_group -> . LPAREN expression RPAREN
    (53) expression_number -> . NUMBER
    (54) expression_number -> . FLOAT_NUMBER
    (55) expression_number -> . TRUE
    (56) expression_number -> . FALSE
    (57) expression_number -> . CHARACTER
    (58) expression_var -> . ID
    (59) expression_array_access -> . expression LBRACKET expression RBRACKET
    (60) expression_field_access -> . expression DOT ID
    (61) expression_func_call -> . ID LPAREN arg_list RPAREN

    MINUS           shift and go to state 36
    NOT             shift and go to state 37
    LPAREN          shift and go to state 16
    NUMBER          shift and go to state 21
    FLOAT_NUMBER    shift and go to state 38
    TRUE            shift and go to state 39
    FALSE           shift and go to state 40
    CHARACTER       shift and go to state 41
    ID              shift and go to state 44

    expression                     shift and go to state 65
    expression_binaria             shift and go to state 22
    expression_comparacion         shift and go to state 23
    expression_logica              shift and go to state 24
    expression_unaria              shift and go to state 25
    expression_group               shift and go to state 26
    expression_number              shift and go to state 27
    expression_var                 shift and go to state 28
    expression_array_access        shift and go to state 29
    expression_field_access        shift and go to state 30
    expression_func_call           shift and go to state 31

state 18

    (16) statement_if -> IF . expression COLON LBRACE statement_list RBRACE
    (17) statement_if -> IF . expression COLON LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE
    (29) expression -> . expression_binaria
    (30) expression -> . expression_comparacion
    (31) expression -> . expression_logica
    (32) expression -> . expression_unaria
    (33) expression -> . expression_group
    (34) expression -> . expression_number
    (35) expression -> . expression_var
    (36) expression -> . expression_array_access
    (37) expression -> . expression_field_access
    (38) expression -> . expression_func_call
    (39) expression_binaria -> . expression PLUS expression
    (40) expression_binaria -> . expression MINUS expression
    (41) expression_binaria -> . expression TIMES expression
    (42) expression_binaria -> . expression DIVIDE expression
    (43) expression_comparacion -> . expression EQ expression
    (44) expression_comparacion -> . expression GT expression
    (45) expression_comparacion -> . expression GE expression
    (46) expression_comparacion -> . expression LT expression
    (47) expression_comparacion -> . expression LE expression
    (48) expression_logica -> . expression AND expression
    (49) expression_logica -> . expression OR expression
    (50) expression_unaria -> . MINUS expression
    (51) expression_unaria -> . NOT expression
    (52) expression_group -> . LPAREN expression RPAREN
    (53) expression_number -> . NUMBER
    (54) expression_number -> . FLOAT_NUMBER
    (55) expression_number -> . TRUE
    (56) expression_number -> . FALSE
    (57) expression_number -> . CHARACTER
    (58) expression_var -> . ID
    (59) expression_array_access -> . expression LBRACKET expression RBRACKET
    (60) expression_field_access -> . expression DOT ID
    (61) expression_func_call -> . ID LPAREN arg_list RPAREN

    MINUS           shift and go to state 36
    NOT             shift and go to state 37
    LPAREN          shift and go to state 16
    NUMBER          shift and go to state 21
    FLOAT_NUMBER    shift and go to state 38
    TRUE            shift and go to state 39
    FALSE           shift and go to state 40
    CHARACTER       shift and go to state 41
    ID              shift and go to state 44

    expression                     shift and go to state 66
    expression_binaria             shift and go to state 22
    expression_comparacion         shift and go to state 23
    expression_logica              shift and go to state 24
    expression_unaria              shift and go to state 25
    expression_group               shift and go to state 26
    expression_number              shift and go to state 27
    expression_var                 shift and go to state 28
    expression_array_access        shift and go to state 29
    expression_field_access        shift and go to state 30
    expression_func_call           shift and go to state 31

state 19

    (20) statement_type_def -> TYPE . ID COLON LBRACE field_list RBRACE

    ID              shift and go to state 67


state 20

    (23) type -> base_type .
    (24) type -> base_type . LBRACKET NUMBER RBRACKET

    ID              reduce using rule 23 (type -> base_type .)
    LBRACKET        shift and go to state 68


state 21

    (53) expression_number -> NUMBER .

    ASSIGN          reduce using rule 53 (expression_number -> NUMBER .)
    PLUS            reduce using rule 53 (expression_number -> NUMBER .)
    MINUS           reduce using rule 53 (expression_number -> NUMBER .)
    TIMES           reduce using rule 53 (expression_number -> NUMBER .)
    DIVIDE          reduce using rule 53 (expression_number -> NUMBER .)
    EQ              reduce using rule 53 (expression_number -> NUMBER .)
    GT              reduce using rule 53 (expression_number -> NUMBER .)
    GE              reduce using rule 53 (expression_number -> NUMBER .)
    LT              reduce using rule 53 (expression_number -> NUMBER .)
    LE              reduce using rule 53 (expression_number -> NUMBER .)
    AND             reduce using rule 53 (expression_number -> NUMBER .)
    OR              reduce using rule 53 (expression_number -> NUMBER .)
    LBRACKET        reduce using rule 53 (expression_number -> NUMBER .)
    DOT             reduce using rule 53 (expression_number -> NUMBER .)
    COLON           reduce using rule 53 (expression_number -> NUMBER .)
    RPAREN          reduce using rule 53 (expression_number -> NUMBER .)
    WHILE           reduce using rule 53 (expression_number -> NUMBER .)
    DEF             reduce using rule 53 (expression_number -> NUMBER .)
    RETURN          reduce using rule 53 (expression_number -> NUMBER .)
    IF              reduce using rule 53 (expression_number -> NUMBER .)
    ID              reduce using rule 53 (expression_number -> NUMBER .)
    TYPE            reduce using rule 53 (expression_number -> NUMBER .)
    INT             reduce using rule 53 (expression_number -> NUMBER .)
    FLOAT           reduce using rule 53 (expression_number -> NUMBER .)
    CHAR            reduce using rule 53 (expression_number -> NUMBER .)
    BOOL            reduce using rule 53 (expression_number -> NUMBER .)
    NOT             reduce using rule 53 (expression_number -> NUMBER .)
    LPAREN          reduce using rule 53 (expression_number -> NUMBER .)
    NUMBER          reduce using rule 53 (expression_number -> NUMBER .)
    FLOAT_NUMBER    reduce using rule 53 (expression_number -> NUMBER .)
    TRUE            reduce using rule 53 (expression_number -> NUMBER .)
    FALSE           reduce using rule 53 (expression_number -> NUMBER .)
    CHARACTER       reduce using rule 53 (expression_number -> NUMBER .)
    $end            reduce using rule 53 (expression_number -> NUMBER .)
    RBRACE          reduce using rule 53 (expression_number -> NUMBER .)
    RBRACKET        reduce using rule 53 (expression_number -> NUMBER .)
    COMMA           reduce using rule 53 (expression_number -> NUMBER .)


state 22

    (29) expression -> expression_binaria .

    ASSIGN          reduce using rule 29 (expression -> expression_binaria .)
    PLUS            reduce using rule 29 (expression -> expression_binaria .)
    MINUS           reduce using rule 29 (expression -> expression_binaria .)
    TIMES           reduce using rule 29 (expression -> expression_binaria .)
    DIVIDE          reduce using rule 29 (expression -> expression_binaria .)
    EQ              reduce using rule 29 (expression -> expression_binaria .)
    GT              reduce using rule 29 (expression -> expression_binaria .)
    GE              reduce using rule 29 (expression -> expression_binaria .)
    LT              reduce using rule 29 (expression -> expression_binaria .)
    LE              reduce using rule 29 (expression -> expression_binaria .)
    AND             reduce using rule 29 (expression -> expression_binaria .)
    OR              reduce using rule 29 (expression -> expression_binaria .)
    LBRACKET        reduce using rule 29 (expression -> expression_binaria .)
    DOT             reduce using rule 29 (expression -> expression_binaria .)
    COLON           reduce using rule 29 (expression -> expression_binaria .)
    RPAREN          reduce using rule 29 (expression -> expression_binaria .)
    WHILE           reduce using rule 29 (expression -> expression_binaria .)
    DEF             reduce using rule 29 (expression -> expression_binaria .)
    RETURN          reduce using rule 29 (expression -> expression_binaria .)
    IF              reduce using rule 29 (expression -> expression_binaria .)
    ID              reduce using rule 29 (expression -> expression_binaria .)
    TYPE            reduce using rule 29 (expression -> expression_binaria .)
    INT             reduce using rule 29 (expression -> expression_binaria .)
    FLOAT           reduce using rule 29 (expression -> expression_binaria .)
    CHAR            reduce using rule 29 (expression -> expression_binaria .)
    BOOL            reduce using rule 29 (expression -> expression_binaria .)
    NOT             reduce using rule 29 (expression -> expression_binaria .)
    LPAREN          reduce using rule 29 (expression -> expression_binaria .)
    NUMBER          reduce using rule 29 (expression -> expression_binaria .)
    FLOAT_NUMBER    reduce using rule 29 (expression -> expression_binaria .)
    TRUE            reduce using rule 29 (expression -> expression_binaria .)
    FALSE           reduce using rule 29 (expression -> expression_binaria .)
    CHARACTER       reduce using rule 29 (expression -> expression_binaria .)
    $end            reduce using rule 29 (expression -> expression_binaria .)
    RBRACE          reduce using rule 29 (expression -> expression_binaria .)
    RBRACKET        reduce using rule 29 (expression -> expression_binaria .)
    COMMA           reduce using rule 29 (expression -> expression_binaria .)


state 23

    (30) expression -> expression_comparacion .

    ASSIGN          reduce using rule 30 (expression -> expression_comparacion .)
    PLUS            reduce using rule 30 (expression -> expression_comparacion .)
    MINUS           reduce using rule 30 (expression -> expression_comparacion .)
    TIMES           reduce using rule 30 (expression -> expression_comparacion .)
    DIVIDE          reduce using rule 30 (expression -> expression_comparacion .)
    EQ              reduce using rule 30 (expression -> expression_comparacion .)
    GT              reduce using rule 30 (expression -> expression_comparacion .)
    GE              reduce using rule 30 (expression -> expression_comparacion .)
    LT              reduce using rule 30 (expression -> expression_comparacion .)
    LE              reduce using rule 30 (expression -> expression_comparacion .)
    AND             reduce using rule 30 (expression -> expression_comparacion .)
    OR              reduce using rule 30 (expression -> expression_comparacion .)
    LBRACKET        reduce using rule 30 (expression -> expression_comparacion .)
    DOT             reduce using rule 30 (expression -> expression_comparacion .)
    COLON           reduce using rule 30 (expression -> expression_comparacion .)
    RPAREN          reduce using rule 30 (expression -> expression_comparacion .)
    WHILE           reduce using rule 30 (expression -> expression_comparacion .)
    DEF             reduce using rule 30 (expression -> expression_comparacion .)
    RETURN          reduce using rule 30 (expression -> expression_comparacion .)
    IF              reduce using rule 30 (expression -> expression_comparacion .)
    ID              reduce using rule 30 (expression -> expression_comparacion .)
    TYPE            reduce using rule 30 (expression -> expression_comparacion .)
    INT             reduce using rule 30 (expression -> expression_comparacion .)
    FLOAT           reduce using rule 30 (expression -> expression_comparacion .)
    CHAR            reduce using rule 30 (expression -> expression_comparacion .)
    BOOL            reduce using rule 30 (expression -> expression_comparacion .)
    NOT             reduce using rule 30 (expression -> expression_comparacion .)
    LPAREN          reduce using rule 30 (expression -> expression_comparacion .)
    NUMBER          reduce using rule 30 (expression -> expression_comparacion .)
    FLOAT_NUMBER    reduce using rule 30 (expression -> expression_comparacion .)
    TRUE            reduce using rule 30 (expression -> expression_comparacion .)
    FALSE           reduce using rule 30 (expression -> expression_comparacion .)
    CHARACTER       reduce using rule 30 (expression -> expression_comparacion .)
    $end            reduce using rule 30 (expression -> expression_comparacion .)
    RBRACE          reduce using rule 30 (expression -> expression_comparacion .)
    RBRACKET        reduce using rule 30 (expression -> expression_comparacion .)
    COMMA           reduce using rule 30 (expression -> expression_comparacion .)


state 24

    (31) expression -> expression_logica .

    ASSIGN          reduce using rule 31 (expression -> expression_logica .)
    PLUS            reduce using rule 31 (expression -> expression_logica .)
    MINUS           reduce using rule 31 (expression -> expression_logica .)
    TIMES           reduce using rule 31 (expression -> expression_logica .)
    DIVIDE          reduce using rule 31 (expression -> expression_logica .)
    EQ              reduce using rule 31 (expression -> expression_logica .)
    GT              reduce using rule 31 (expression -> expression_logica .)
    GE              reduce using rule 31 (expression -> expression_logica .)
    LT              reduce using rule 31 (expression -> expression_logica .)
    LE              reduce using rule 31 (expression -> expression_logica .)
    AND             reduce using rule 31 (expression -> expression_logica .)
    OR              reduce using rule 31 (expression -> expression_logica .)
    LBRACKET        reduce using rule 31 (expression -> expression_logica .)
    DOT             reduce using rule 31 (expression -> expression_logica .)
    COLON           reduce using rule 31 (expression -> expression_logica .)
    RPAREN          reduce using rule 31 (expression -> expression_logica .)
    WHILE           reduce using rule 31 (expression -> expression_logica .)
    DEF             reduce using rule 31 (expression -> expression_logica .)
    RETURN          reduce using rule 31 (expression -> expression_logica .)
    IF              reduce using rule 31 (expression -> expression_logica .)
    ID              reduce using rule 31 (expression -> expression_logica .)
    TYPE            reduce using rule 31 (expression -> expression_logica .)
    INT             reduce using rule 31 (expression -> expression_logica .)
    FLOAT           reduce using rule 31 (expression -> expression_logica .)
    CHAR            reduce using rule 31 (expression -> expression_logica .)
    BOOL            reduce using rule 31 (expression -> expression_logica .)
    NOT             reduce using rule 31 (expression -> expression_logica .)
    LPAREN          reduce using rule 31 (expression -> expression_logica .)
    NUMBER          reduce using rule 31 (expression -> expression_logica .)
    FLOAT_NUMBER    reduce using rule 31 (expression -> expression_logica .)
    TRUE            reduce using rule 31 (expression -> expression_logica .)
    FALSE           reduce using rule 31 (expression -> expression_logica .)
    CHARACTER       reduce using rule 31 (expression -> expression_logica .)
    $end            reduce using rule 31 (expression -> expression_logica .)
    RBRACE          reduce using rule 31 (expression -> expression_logica .)
    RBRACKET        reduce using rule 31 (expression -> expression_logica .)
    COMMA           reduce using rule 31 (expression -> expression_logica .)


state 25

    (32) expression -> expression_unaria .

    ASSIGN          reduce using rule 32 (expression -> expression_unaria .)
    PLUS            reduce using rule 32 (expression -> expression_unaria .)
    MINUS           reduce using rule 32 (expression -> expression_unaria .)
    TIMES           reduce using rule 32 (expression -> expression_unaria .)
    DIVIDE          reduce using rule 32 (expression -> expression_unaria .)
    EQ              reduce using rule 32 (expression -> expression_unaria .)
    GT              reduce using rule 32 (expression -> expression_unaria .)
    GE              reduce using rule 32 (expression -> expression_unaria .)
    LT              reduce using rule 32 (expression -> expression_unaria .)
    LE              reduce using rule 32 (expression -> expression_unaria .)
    AND             reduce using rule 32 (expression -> expression_unaria .)
    OR              reduce using rule 32 (expression -> expression_unaria .)
    LBRACKET        reduce using rule 32 (expression -> expression_unaria .)
    DOT             reduce using rule 32 (expression -> expression_unaria .)
    COLON           reduce using rule 32 (expression -> expression_unaria .)
    RPAREN          reduce using rule 32 (expression -> expression_unaria .)
    WHILE           reduce using rule 32 (expression -> expression_unaria .)
    DEF             reduce using rule 32 (expression -> expression_unaria .)
    RETURN          reduce using rule 32 (expression -> expression_unaria .)
    IF              reduce using rule 32 (expression -> expression_unaria .)
    ID              reduce using rule 32 (expression -> expression_unaria .)
    TYPE            reduce using rule 32 (expression -> expression_unaria .)
    INT             reduce using rule 32 (expression -> expression_unaria .)
    FLOAT           reduce using rule 32 (expression -> expression_unaria .)
    CHAR            reduce using rule 32 (expression -> expression_unaria .)
    BOOL            reduce using rule 32 (expression -> expression_unaria .)
    NOT             reduce using rule 32 (expression -> expression_unaria .)
    LPAREN          reduce using rule 32 (expression -> expression_unaria .)
    NUMBER          reduce using rule 32 (expression -> expression_unaria .)
    FLOAT_NUMBER    reduce using rule 32 (expression -> expression_unaria .)
    TRUE            reduce using rule 32 (expression -> expression_unaria .)
    FALSE           reduce using rule 32 (expression -> expression_unaria .)
    CHARACTER       reduce using rule 32 (expression -> expression_unaria .)
    $end            reduce using rule 32 (expression -> expression_unaria .)
    RBRACE          reduce using rule 32 (expression -> expression_unaria .)
    RBRACKET        reduce using rule 32 (expression -> expression_unaria .)
    COMMA           reduce using rule 32 (expression -> expression_unaria .)


state 26

    (33) expression -> expression_group .

    ASSIGN          reduce using rule 33 (expression -> expression_group .)
    PLUS            reduce using rule 33 (expression -> expression_group .)
    MINUS           reduce using rule 33 (expression -> expression_group .)
    TIMES           reduce using rule 33 (expression -> expression_group .)
    DIVIDE          reduce using rule 33 (expression -> expression_group .)
    EQ              reduce using rule 33 (expression -> expression_group .)
    GT              reduce using rule 33 (expression -> expression_group .)
    GE              reduce using rule 33 (expression -> expression_group .)
    LT              reduce using rule 33 (expression -> expression_group .)
    LE              reduce using rule 33 (expression -> expression_group .)
    AND             reduce using rule 33 (expression -> expression_group .)
    OR              reduce using rule 33 (expression -> expression_group .)
    LBRACKET        reduce using rule 33 (expression -> expression_group .)
    DOT             reduce using rule 33 (expression -> expression_group .)
    COLON           reduce using rule 33 (expression -> expression_group .)
    RPAREN          reduce using rule 33 (expression -> expression_group .)
    WHILE           reduce using rule 33 (expression -> expression_group .)
    DEF             reduce using rule 33 (expression -> expression_group .)
    RETURN          reduce using rule 33 (expression -> expression_group .)
    IF              reduce using rule 33 (expression -> expression_group .)
    ID              reduce using rule 33 (expression -> expression_group .)
    TYPE            reduce using rule 33 (expression -> expression_group .)
    INT             reduce using rule 33 (expression -> expression_group .)
    FLOAT           reduce using rule 33 (expression -> expression_group .)
    CHAR            reduce using rule 33 (expression -> expression_group .)
    BOOL            reduce using rule 33 (expression -> expression_group .)
    NOT             reduce using rule 33 (expression -> expression_group .)
    LPAREN          reduce using rule 33 (expression -> expression_group .)
    NUMBER          reduce using rule 33 (expression -> expression_group .)
    FLOAT_NUMBER    reduce using rule 33 (expression -> expression_group .)
    TRUE            reduce using rule 33 (expression -> expression_group .)
    FALSE           reduce using rule 33 (expression -> expression_group .)
    CHARACTER       reduce using rule 33 (expression -> expression_group .)
    $end            reduce using rule 33 (expression -> expression_group .)
    RBRACE          reduce using rule 33 (expression -> expression_group .)
    RBRACKET        reduce using rule 33 (expression -> expression_group .)
    COMMA           reduce using rule 33 (expression -> expression_group .)


state 27

    (34) expression -> expression_number .

    ASSIGN          reduce using rule 34 (expression -> expression_number .)
    PLUS            reduce using rule 34 (expression -> expression_number .)
    MINUS           reduce using rule 34 (expression -> expression_number .)
    TIMES           reduce using rule 34 (expression -> expression_number .)
    DIVIDE          reduce using rule 34 (expression -> expression_number .)
    EQ              reduce using rule 34 (expression -> expression_number .)
    GT              reduce using rule 34 (expression -> expression_number .)
    GE              reduce using rule 34 (expression -> expression_number .)
    LT              reduce using rule 34 (expression -> expression_number .)
    LE              reduce using rule 34 (expression -> expression_number .)
    AND             reduce using rule 34 (expression -> expression_number .)
    OR              reduce using rule 34 (expression -> expression_number .)
    LBRACKET        reduce using rule 34 (expression -> expression_number .)
    DOT             reduce using rule 34 (expression -> expression_number .)
    COLON           reduce using rule 34 (expression -> expression_number .)
    RPAREN          reduce using rule 34 (expression -> expression_number .)
    WHILE           reduce using rule 34 (expression -> expression_number .)
    DEF             reduce using rule 34 (expression -> expression_number .)
    RETURN          reduce using rule 34 (expression -> expression_number .)
    IF              reduce using rule 34 (expression -> expression_number .)
    ID              reduce using rule 34 (expression -> expression_number .)
    TYPE            reduce using rule 34 (expression -> expression_number .)
    INT             reduce using rule 34 (expression -> expression_number .)
    FLOAT           reduce using rule 34 (expression -> expression_number .)
    CHAR            reduce using rule 34 (expression -> expression_number .)
    BOOL            reduce using rule 34 (expression -> expression_number .)
    NOT             reduce using rule 34 (expression -> expression_number .)
    LPAREN          reduce using rule 34 (expression -> expression_number .)
    NUMBER          reduce using rule 34 (expression -> expression_number .)
    FLOAT_NUMBER    reduce using rule 34 (expression -> expression_number .)
    TRUE            reduce using rule 34 (expression -> expression_number .)
    FALSE           reduce using rule 34 (expression -> expression_number .)
    CHARACTER       reduce using rule 34 (expression -> expression_number .)
    $end            reduce using rule 34 (expression -> expression_number .)
    RBRACE          reduce using rule 34 (expression -> expression_number .)
    RBRACKET        reduce using rule 34 (expression -> expression_number .)
    COMMA           reduce using rule 34 (expression -> expression_number .)


state 28

    (35) expression -> expression_var .

    ASSIGN          reduce using rule 35 (expression -> expression_var .)
    PLUS            reduce using rule 35 (expression -> expression_var .)
    MINUS           reduce using rule 35 (expression -> expression_var .)
    TIMES           reduce using rule 35 (expression -> expression_var .)
    DIVIDE          reduce using rule 35 (expression -> expression_var .)
    EQ              reduce using rule 35 (expression -> expression_var .)
    GT              reduce using rule 35 (expression -> expression_var .)
    GE              reduce using rule 35 (expression -> expression_var .)
    LT              reduce using rule 35 (expression -> expression_var .)
    LE              reduce using rule 35 (expression -> expression_var .)
    AND             reduce using rule 35 (expression -> expression_var .)
    OR              reduce using rule 35 (expression -> expression_var .)
    LBRACKET        reduce using rule 35 (expression -> expression_var .)
    DOT             reduce using rule 35 (expression -> expression_var .)
    COLON           reduce using rule 35 (expression -> expression_var .)
    RPAREN          reduce using rule 35 (expression -> expression_var .)
    WHILE           reduce using rule 35 (expression -> expression_var .)
    DEF             reduce using rule 35 (expression -> expression_var .)
    RETURN          reduce using rule 35 (expression -> expression_var .)
    IF              reduce using rule 35 (expression -> expression_var .)
    ID              reduce using rule 35 (expression -> expression_var .)
    TYPE            reduce using rule 35 (expression -> expression_var .)
    INT             reduce using rule 35 (expression -> expression_var .)
    FLOAT           reduce using rule 35 (expression -> expression_var .)
    CHAR            reduce using rule 35 (expression -> expression_var .)
    BOOL            reduce using rule 35 (expression -> expression_var .)
    NOT             reduce using rule 35 (expression -> expression_var .)
    LPAREN          reduce using rule 35 (expression -> expression_var .)
    NUMBER          reduce using rule 35 (expression -> expression_var .)
    FLOAT_NUMBER    reduce using rule 35 (expression -> expression_var .)
    TRUE            reduce using rule 35 (expression -> expression_var .)
    FALSE           reduce using rule 35 (expression -> expression_var .)
    CHARACTER       reduce using rule 35 (expression -> expression_var .)
    $end            reduce using rule 35 (expression -> expression_var .)
    RBRACE          reduce using rule 35 (expression -> expression_var .)
    RBRACKET        reduce using rule 35 (expression -> expression_var .)
    COMMA           reduce using rule 35 (expression -> expression_var .)


state 29

    (36) expression -> expression_array_access .

    ASSIGN          reduce using rule 36 (expression -> expression_array_access .)
    PLUS            reduce using rule 36 (expression -> expression_array_access .)
    MINUS           reduce using rule 36 (expression -> expression_array_access .)
    TIMES           reduce using rule 36 (expression -> expression_array_access .)
    DIVIDE          reduce using rule 36 (expression -> expression_array_access .)
    EQ              reduce using rule 36 (expression -> expression_array_access .)
    GT              reduce using rule 36 (expression -> expression_array_access .)
    GE              reduce using rule 36 (expression -> expression_array_access .)
    LT              reduce using rule 36 (expression -> expression_array_access .)
    LE              reduce using rule 36 (expression -> expression_array_access .)
    AND             reduce using rule 36 (expression -> expression_array_access .)
    OR              reduce using rule 36 (expression -> expression_array_access .)
    LBRACKET        reduce using rule 36 (expression -> expression_array_access .)
    DOT             reduce using rule 36 (expression -> expression_array_access .)
    COLON           reduce using rule 36 (expression -> expression_array_access .)
    RPAREN          reduce using rule 36 (expression -> expression_array_access .)
    WHILE           reduce using rule 36 (expression -> expression_array_access .)
    DEF             reduce using rule 36 (expression -> expression_array_access .)
    RETURN          reduce using rule 36 (expression -> expression_array_access .)
    IF              reduce using rule 36 (expression -> expression_array_access .)
    ID              reduce using rule 36 (expression -> expression_array_access .)
    TYPE            reduce using rule 36 (expression -> expression_array_access .)
    INT             reduce using rule 36 (expression -> expression_array_access .)
    FLOAT           reduce using rule 36 (expression -> expression_array_access .)
    CHAR            reduce using rule 36 (expression -> expression_array_access .)
    BOOL            reduce using rule 36 (expression -> expression_array_access .)
    NOT             reduce using rule 36 (expression -> expression_array_access .)
    LPAREN          reduce using rule 36 (expression -> expression_array_access .)
    NUMBER          reduce using rule 36 (expression -> expression_array_access .)
    FLOAT_NUMBER    reduce using rule 36 (expression -> expression_array_access .)
    TRUE            reduce using rule 36 (expression -> expression_array_access .)
    FALSE           reduce using rule 36 (expression -> expression_array_access .)
    CHARACTER       reduce using rule 36 (expression -> expression_array_access .)
    $end            reduce using rule 36 (expression -> expression_array_access .)
    RBRACE          reduce using rule 36 (expression -> expression_array_access .)
    RBRACKET        reduce using rule 36 (expression -> expression_array_access .)
    COMMA           reduce using rule 36 (expression -> expression_array_access .)


state 30

    (37) expression -> expression_field_access .

    ASSIGN          reduce using rule 37 (expression -> expression_field_access .)
    PLUS            reduce using rule 37 (expression -> expression_field_access .)
    MINUS           reduce using rule 37 (expression -> expression_field_access .)
    TIMES           reduce using rule 37 (expression -> expression_field_access .)
    DIVIDE          reduce using rule 37 (expression -> expression_field_access .)
    EQ              reduce using rule 37 (expression -> expression_field_access .)
    GT              reduce using rule 37 (expression -> expression_field_access .)
    GE              reduce using rule 37 (expression -> expression_field_access .)
    LT              reduce using rule 37 (expression -> expression_field_access .)
    LE              reduce using rule 37 (expression -> expression_field_access .)
    AND             reduce using rule 37 (expression -> expression_field_access .)
    OR              reduce using rule 37 (expression -> expression_field_access .)
    LBRACKET        reduce using rule 37 (expression -> expression_field_access .)
    DOT             reduce using rule 37 (expression -> expression_field_access .)
    COLON           reduce using rule 37 (expression -> expression_field_access .)
    RPAREN          reduce using rule 37 (expression -> expression_field_access .)
    WHILE           reduce using rule 37 (expression -> expression_field_access .)
    DEF             reduce using rule 37 (expression -> expression_field_access .)
    RETURN          reduce using rule 37 (expression -> expression_field_access .)
    IF              reduce using rule 37 (expression -> expression_field_access .)
    ID              reduce using rule 37 (expression -> expression_field_access .)
    TYPE            reduce using rule 37 (expression -> expression_field_access .)
    INT             reduce using rule 37 (expression -> expression_field_access .)
    FLOAT           reduce using rule 37 (expression -> expression_field_access .)
    CHAR            reduce using rule 37 (expression -> expression_field_access .)
    BOOL            reduce using rule 37 (expression -> expression_field_access .)
    NOT             reduce using rule 37 (expression -> expression_field_access .)
    LPAREN          reduce using rule 37 (expression -> expression_field_access .)
    NUMBER          reduce using rule 37 (expression -> expression_field_access .)
    FLOAT_NUMBER    reduce using rule 37 (expression -> expression_field_access .)
    TRUE            reduce using rule 37 (expression -> expression_field_access .)
    FALSE           reduce using rule 37 (expression -> expression_field_access .)
    CHARACTER       reduce using rule 37 (expression -> expression_field_access .)
    $end            reduce using rule 37 (expression -> expression_field_access .)
    RBRACE          reduce using rule 37 (expression -> expression_field_access .)
    RBRACKET        reduce using rule 37 (expression -> expression_field_access .)
    COMMA           reduce using rule 37 (expression -> expression_field_access .)


state 31

    (38) expression -> expression_func_call .

    ASSIGN          reduce using rule 38 (expression -> expression_func_call .)
    PLUS            reduce using rule 38 (expression -> expression_func_call .)
    MINUS           reduce using rule 38 (expression -> expression_func_call .)
    TIMES           reduce using rule 38 (expression -> expression_func_call .)
    DIVIDE          reduce using rule 38 (expression -> expression_func_call .)
    EQ              reduce using rule 38 (expression -> expression_func_call .)
    GT              reduce using rule 38 (expression -> expression_func_call .)
    GE              reduce using rule 38 (expression -> expression_func_call .)
    LT              reduce using rule 38 (expression -> expression_func_call .)
    LE              reduce using rule 38 (expression -> expression_func_call .)
    AND             reduce using rule 38 (expression -> expression_func_call .)
    OR              reduce using rule 38 (expression -> expression_func_call .)
    LBRACKET        reduce using rule 38 (expression -> expression_func_call .)
    DOT             reduce using rule 38 (expression -> expression_func_call .)
    COLON           reduce using rule 38 (expression -> expression_func_call .)
    RPAREN          reduce using rule 38 (expression -> expression_func_call .)
    WHILE           reduce using rule 38 (expression -> expression_func_call .)
    DEF             reduce using rule 38 (expression -> expression_func_call .)
    RETURN          reduce using rule 38 (expression -> expression_func_call .)
    IF              reduce using rule 38 (expression -> expression_func_call .)
    ID              reduce using rule 38 (expression -> expression_func_call .)
    TYPE            reduce using rule 38 (expression -> expression_func_call .)
    INT             reduce using rule 38 (expression -> expression_func_call .)
    FLOAT           reduce using rule 38 (expression -> expression_func_call .)
    CHAR            reduce using rule 38 (expression -> expression_func_call .)
    BOOL            reduce using rule 38 (expression -> expression_func_call .)
    NOT             reduce using rule 38 (expression -> expression_func_call .)
    LPAREN          reduce using rule 38 (expression -> expression_func_call .)
    NUMBER          reduce using rule 38 (expression -> expression_func_call .)
    FLOAT_NUMBER    reduce using rule 38 (expression -> expression_func_call .)
    TRUE            reduce using rule 38 (expression -> expression_func_call .)
    FALSE           reduce using rule 38 (expression -> expression_func_call .)
    CHARACTER       reduce using rule 38 (expression -> expression_func_call .)
    $end            reduce using rule 38 (expression -> expression_func_call .)
    RBRACE          reduce using rule 38 (expression -> expression_func_call .)
    RBRACKET        reduce using rule 38 (expression -> expression_func_call .)
    COMMA           reduce using rule 38 (expression -> expression_func_call .)


state 32

    (25) base_type -> INT .

    LBRACKET        reduce using rule 25 (base_type -> INT .)
    ID              reduce using rule 25 (base_type -> INT .)


state 33

    (26) base_type -> FLOAT .

    LBRACKET        reduce using rule 26 (base_type -> FLOAT .)
    ID              reduce using rule 26 (base_type -> FLOAT .)


state 34

    (27) base_type -> CHAR .

    LBRACKET        reduce using rule 27 (base_type -> CHAR .)
    ID              reduce using rule 27 (base_type -> CHAR .)


state 35

    (28) base_type -> BOOL .

    LBRACKET        reduce using rule 28 (base_type -> BOOL .)
    ID              reduce using rule 28 (base_type -> BOOL .)


state 36

    (50) expression_unaria -> MINUS . expression
    (29) expression -> . expression_binaria
    (30) expression -> . expression_comparacion
    (31) expression -> . expression_logica
    (32) expression -> . expression_unaria
    (33) expression -> . expression_group
    (34) expression -> . expression_number
    (35) expression -> . expression_var
    (36) expression -> . expression_array_access
    (37) expression -> . expression_field_access
    (38) expression -> . expression_func_call
    (39) expression_binaria -> . expression PLUS expression
    (40) expression_binaria -> . expression MINUS expression
    (41) expression_binaria -> . expression TIMES expression
    (42) expression_binaria -> . expression DIVIDE expression
    (43) expression_comparacion -> . expression EQ expression
    (44) expression_comparacion -> . expression GT expression
    (45) expression_comparacion -> . expression GE expression
    (46) expression_comparacion -> . expression LT expression
    (47) expression_comparacion -> . expression LE expression
    (48) expression_logica -> . expression AND expression
    (49) expression_logica -> . expression OR expression
    (50) expression_unaria -> . MINUS expression
    (51) expression_unaria -> . NOT expression
    (52) expression_group -> . LPAREN expression RPAREN
    (53) expression_number -> . NUMBER
    (54) expression_number -> . FLOAT_NUMBER
    (55) expression_number -> . TRUE
    (56) expression_number -> . FALSE
    (57) expression_number -> . CHARACTER
    (58) expression_var -> . ID
    (59) expression_array_access -> . expression LBRACKET expression RBRACKET
    (60) expression_field_access -> . expression DOT ID
    (61) expression_func_call -> . ID LPAREN arg_list RPAREN

    MINUS           shift and go to state 36
    NOT             shift and go to state 37
    LPAREN          shift and go to state 16
    NUMBER          shift and go to state 21
    FLOAT_NUMBER    shift and go to state 38
    TRUE            shift and go to state 39
    FALSE           shift and go to state 40
    CHARACTER       shift and go to state 41
    ID              shift and go to state 44

    expression                     shift and go to state 69
    expression_binaria             shift and go to state 22
    expression_comparacion         shift and go to state 23
    expression_logica              shift and go to state 24
    expression_unaria              shift and go to state 25
    expression_group               shift and go to state 26
    expression_number              shift and go to state 27
    expression_var                 shift and go to state 28
    expression_array_access        shift and go to state 29
    expression_field_access        shift and go to state 30
    expression_func_call           shift and go to state 31

state 37

    (51) expression_unaria -> NOT . expression
    (29) expression -> . expression_binaria
    (30) expression -> . expression_comparacion
    (31) expression -> . expression_logica
    (32) expression -> . expression_unaria
    (33) expression -> . expression_group
    (34) expression -> . expression_number
    (35) expression -> . expression_var
    (36) expression -> . expression_array_access
    (37) expression -> . expression_field_access
    (38) expression -> . expression_func_call
    (39) expression_binaria -> . expression PLUS expression
    (40) expression_binaria -> . expression MINUS expression
    (41) expression_binaria -> . expression TIMES expression
    (42) expression_binaria -> . expression DIVIDE expression
    (43) expression_comparacion -> . expression EQ expression
    (44) expression_comparacion -> . expression GT expression
    (45) expression_comparacion -> . expression GE expression
    (46) expression_comparacion -> . expression LT expression
    (47) expression_comparacion -> . expression LE expression
    (48) expression_logica -> . expression AND expression
    (49) expression_logica -> . expression OR expression
    (50) expression_unaria -> . MINUS expression
    (51) expression_unaria -> . NOT expression
    (52) expression_group -> . LPAREN expression RPAREN
    (53) expression_number -> . NUMBER
    (54) expression_number -> . FLOAT_NUMBER
    (55) expression_number -> . TRUE
    (56) expression_number -> . FALSE
    (57) expression_number -> . CHARACTER
    (58) expression_var -> . ID
    (59) expression_array_access -> . expression LBRACKET expression RBRACKET
    (60) expression_field_access -> . expression DOT ID
    (61) expression_func_call -> . ID LPAREN arg_list RPAREN

    MINUS           shift and go to state 36
    NOT             shift and go to state 37
    LPAREN          shift and go to state 16
    NUMBER          shift and go to state 21
    FLOAT_NUMBER    shift and go to state 38
    TRUE            shift and go to state 39
    FALSE           shift and go to state 40
    CHARACTER       shift and go to state 41
    ID              shift and go to state 44

    expression                     shift and go to state 70
    expression_binaria             shift and go to state 22
    expression_comparacion         shift and go to state 23
    expression_logica              shift and go to state 24
    expression_unaria              shift and go to state 25
    expression_group               shift and go to state 26
    expression_number              shift and go to state 27
    expression_var                 shift and go to state 28
    expression_array_access        shift and go to state 29
    expression_field_access        shift and go to state 30
    expression_func_call           shift and go to state 31

state 38

    (54) expression_number -> FLOAT_NUMBER .

    ASSIGN          reduce using rule 54 (expression_number -> FLOAT_NUMBER .)
    PLUS            reduce using rule 54 (expression_number -> FLOAT_NUMBER .)
    MINUS           reduce using rule 54 (expression_number -> FLOAT_NUMBER .)
    TIMES           reduce using rule 54 (expression_number -> FLOAT_NUMBER .)
    DIVIDE          reduce using rule 54 (expression_number -> FLOAT_NUMBER .)
    EQ              reduce using rule 54 (expression_number -> FLOAT_NUMBER .)
    GT              reduce using rule 54 (expression_number -> FLOAT_NUMBER .)
    GE              reduce using rule 54 (expression_number -> FLOAT_NUMBER .)
    LT              reduce using rule 54 (expression_number -> FLOAT_NUMBER .)
    LE              reduce using rule 54 (expression_number -> FLOAT_NUMBER .)
    AND             reduce using rule 54 (expression_number -> FLOAT_NUMBER .)
    OR              reduce using rule 54 (expression_number -> FLOAT_NUMBER .)
    LBRACKET        reduce using rule 54 (expression_number -> FLOAT_NUMBER .)
    DOT             reduce using rule 54 (expression_number -> FLOAT_NUMBER .)
    COLON           reduce using rule 54 (expression_number -> FLOAT_NUMBER .)
    RPAREN          reduce using rule 54 (expression_number -> FLOAT_NUMBER .)
    WHILE           reduce using rule 54 (expression_number -> FLOAT_NUMBER .)
    DEF             reduce using rule 54 (expression_number -> FLOAT_NUMBER .)
    RETURN          reduce using rule 54 (expression_number -> FLOAT_NUMBER .)
    IF              reduce using rule 54 (expression_number -> FLOAT_NUMBER .)
    ID              reduce using rule 54 (expression_number -> FLOAT_NUMBER .)
    TYPE            reduce using rule 54 (expression_number -> FLOAT_NUMBER .)
    INT             reduce using rule 54 (expression_number -> FLOAT_NUMBER .)
    FLOAT           reduce using rule 54 (expression_number -> FLOAT_NUMBER .)
    CHAR            reduce using rule 54 (expression_number -> FLOAT_NUMBER .)
    BOOL            reduce using rule 54 (expression_number -> FLOAT_NUMBER .)
    NOT             reduce using rule 54 (expression_number -> FLOAT_NUMBER .)
    LPAREN          reduce using rule 54 (expression_number -> FLOAT_NUMBER .)
    NUMBER          reduce using rule 54 (expression_number -> FLOAT_NUMBER .)
    FLOAT_NUMBER    reduce using rule 54 (expression_number -> FLOAT_NUMBER .)
    TRUE            reduce using rule 54 (expression_number -> FLOAT_NUMBER .)
    FALSE           reduce using rule 54 (expression_number -> FLOAT_NUMBER .)
    CHARACTER       reduce using rule 54 (expression_number -> FLOAT_NUMBER .)
    $end            reduce using rule 54 (expression_number -> FLOAT_NUMBER .)
    RBRACE          reduce using rule 54 (expression_number -> FLOAT_NUMBER .)
    RBRACKET        reduce using rule 54 (expression_number -> FLOAT_NUMBER .)
    COMMA           reduce using rule 54 (expression_number -> FLOAT_NUMBER .)


state 39

    (55) expression_number -> TRUE .

    ASSIGN          reduce using rule 55 (expression_number -> TRUE .)
    PLUS            reduce using rule 55 (expression_number -> TRUE .)
    MINUS           reduce using rule 55 (expression_number -> TRUE .)
    TIMES           reduce using rule 55 (expression_number -> TRUE .)
    DIVIDE          reduce using rule 55 (expression_number -> TRUE .)
    EQ              reduce using rule 55 (expression_number -> TRUE .)
    GT              reduce using rule 55 (expression_number -> TRUE .)
    GE              reduce using rule 55 (expression_number -> TRUE .)
    LT              reduce using rule 55 (expression_number -> TRUE .)
    LE              reduce using rule 55 (expression_number -> TRUE .)
    AND             reduce using rule 55 (expression_number -> TRUE .)
    OR              reduce using rule 55 (expression_number -> TRUE .)
    LBRACKET        reduce using rule 55 (expression_number -> TRUE .)
    DOT             reduce using rule 55 (expression_number -> TRUE .)
    COLON           reduce using rule 55 (expression_number -> TRUE .)
    RPAREN          reduce using rule 55 (expression_number -> TRUE .)
    WHILE           reduce using rule 55 (expression_number -> TRUE .)
    DEF             reduce using rule 55 (expression_number -> TRUE .)
    RETURN          reduce using rule 55 (expression_number -> TRUE .)
    IF              reduce using rule 55 (expression_number -> TRUE .)
    ID              reduce using rule 55 (expression_number -> TRUE .)
    TYPE            reduce using rule 55 (expression_number -> TRUE .)
    INT             reduce using rule 55 (expression_number -> TRUE .)
    FLOAT           reduce using rule 55 (expression_number -> TRUE .)
    CHAR            reduce using rule 55 (expression_number -> TRUE .)
    BOOL            reduce using rule 55 (expression_number -> TRUE .)
    NOT             reduce using rule 55 (expression_number -> TRUE .)
    LPAREN          reduce using rule 55 (expression_number -> TRUE .)
    NUMBER          reduce using rule 55 (expression_number -> TRUE .)
    FLOAT_NUMBER    reduce using rule 55 (expression_number -> TRUE .)
    TRUE            reduce using rule 55 (expression_number -> TRUE .)
    FALSE           reduce using rule 55 (expression_number -> TRUE .)
    CHARACTER       reduce using rule 55 (expression_number -> TRUE .)
    $end            reduce using rule 55 (expression_number -> TRUE .)
    RBRACE          reduce using rule 55 (expression_number -> TRUE .)
    RBRACKET        reduce using rule 55 (expression_number -> TRUE .)
    COMMA           reduce using rule 55 (expression_number -> TRUE .)


state 40

    (56) expression_number -> FALSE .

    ASSIGN          reduce using rule 56 (expression_number -> FALSE .)
    PLUS            reduce using rule 56 (expression_number -> FALSE .)
    MINUS           reduce using rule 56 (expression_number -> FALSE .)
    TIMES           reduce using rule 56 (expression_number -> FALSE .)
    DIVIDE          reduce using rule 56 (expression_number -> FALSE .)
    EQ              reduce using rule 56 (expression_number -> FALSE .)
    GT              reduce using rule 56 (expression_number -> FALSE .)
    GE              reduce using rule 56 (expression_number -> FALSE .)
    LT              reduce using rule 56 (expression_number -> FALSE .)
    LE              reduce using rule 56 (expression_number -> FALSE .)
    AND             reduce using rule 56 (expression_number -> FALSE .)
    OR              reduce using rule 56 (expression_number -> FALSE .)
    LBRACKET        reduce using rule 56 (expression_number -> FALSE .)
    DOT             reduce using rule 56 (expression_number -> FALSE .)
    COLON           reduce using rule 56 (expression_number -> FALSE .)
    RPAREN          reduce using rule 56 (expression_number -> FALSE .)
    WHILE           reduce using rule 56 (expression_number -> FALSE .)
    DEF             reduce using rule 56 (expression_number -> FALSE .)
    RETURN          reduce using rule 56 (expression_number -> FALSE .)
    IF              reduce using rule 56 (expression_number -> FALSE .)
    ID              reduce using rule 56 (expression_number -> FALSE .)
    TYPE            reduce using rule 56 (expression_number -> FALSE .)
    INT             reduce using rule 56 (expression_number -> FALSE .)
    FLOAT           reduce using rule 56 (expression_number -> FALSE .)
    CHAR            reduce using rule 56 (expression_number -> FALSE .)
    BOOL            reduce using rule 56 (expression_number -> FALSE .)
    NOT             reduce using rule 56 (expression_number -> FALSE .)
    LPAREN          reduce using rule 56 (expression_number -> FALSE .)
    NUMBER          reduce using rule 56 (expression_number -> FALSE .)
    FLOAT_NUMBER    reduce using rule 56 (expression_number -> FALSE .)
    TRUE            reduce using rule 56 (expression_number -> FALSE .)
    FALSE           reduce using rule 56 (expression_number -> FALSE .)
    CHARACTER       reduce using rule 56 (expression_number -> FALSE .)
    $end            reduce using rule 56 (expression_number -> FALSE .)
    RBRACE          reduce using rule 56 (expression_number -> FALSE .)
    RBRACKET        reduce using rule 56 (expression_number -> FALSE .)
    COMMA           reduce using rule 56 (expression_number -> FALSE .)


state 41

    (57) expression_number -> CHARACTER .

    ASSIGN          reduce using rule 57 (expression_number -> CHARACTER .)
    PLUS            reduce using rule 57 (expression_number -> CHARACTER .)
    MINUS           reduce using rule 57 (expression_number -> CHARACTER .)
    TIMES           reduce using rule 57 (expression_number -> CHARACTER .)
    DIVIDE          reduce using rule 57 (expression_number -> CHARACTER .)
    EQ              reduce using rule 57 (expression_number -> CHARACTER .)
    GT              reduce using rule 57 (expression_number -> CHARACTER .)
    GE              reduce using rule 57 (expression_number -> CHARACTER .)
    LT              reduce using rule 57 (expression_number -> CHARACTER .)
    LE              reduce using rule 57 (expression_number -> CHARACTER .)
    AND             reduce using rule 57 (expression_number -> CHARACTER .)
    OR              reduce using rule 57 (expression_number -> CHARACTER .)
    LBRACKET        reduce using rule 57 (expression_number -> CHARACTER .)
    DOT             reduce using rule 57 (expression_number -> CHARACTER .)
    COLON           reduce using rule 57 (expression_number -> CHARACTER .)
    RPAREN          reduce using rule 57 (expression_number -> CHARACTER .)
    WHILE           reduce using rule 57 (expression_number -> CHARACTER .)
    DEF             reduce using rule 57 (expression_number -> CHARACTER .)
    RETURN          reduce using rule 57 (expression_number -> CHARACTER .)
    IF              reduce using rule 57 (expression_number -> CHARACTER .)
    ID              reduce using rule 57 (expression_number -> CHARACTER .)
    TYPE            reduce using rule 57 (expression_number -> CHARACTER .)
    INT             reduce using rule 57 (expression_number -> CHARACTER .)
    FLOAT           reduce using rule 57 (expression_number -> CHARACTER .)
    CHAR            reduce using rule 57 (expression_number -> CHARACTER .)
    BOOL            reduce using rule 57 (expression_number -> CHARACTER .)
    NOT             reduce using rule 57 (expression_number -> CHARACTER .)
    LPAREN          reduce using rule 57 (expression_number -> CHARACTER .)
    NUMBER          reduce using rule 57 (expression_number -> CHARACTER .)
    FLOAT_NUMBER    reduce using rule 57 (expression_number -> CHARACTER .)
    TRUE            reduce using rule 57 (expression_number -> CHARACTER .)
    FALSE           reduce using rule 57 (expression_number -> CHARACTER .)
    CHARACTER       reduce using rule 57 (expression_number -> CHARACTER .)
    $end            reduce using rule 57 (expression_number -> CHARACTER .)
    RBRACE          reduce using rule 57 (expression_number -> CHARACTER .)
    RBRACKET        reduce using rule 57 (expression_number -> CHARACTER .)
    COMMA           reduce using rule 57 (expression_number -> CHARACTER .)


state 42

    (3) statement_list -> statement_list statement .

    WHILE           reduce using rule 3 (statement_list -> statement_list statement .)
    DEF             reduce using rule 3 (statement_list -> statement_list statement .)
    RETURN          reduce using rule 3 (statement_list -> statement_list statement .)
    IF              reduce using rule 3 (statement_list -> statement_list statement .)
    ID              reduce using rule 3 (statement_list -> statement_list statement .)
    TYPE            reduce using rule 3 (statement_list -> statement_list statement .)
    INT             reduce using rule 3 (statement_list -> statement_list statement .)
    FLOAT           reduce using rule 3 (statement_list -> statement_list statement .)
    CHAR            reduce using rule 3 (statement_list -> statement_list statement .)
    BOOL            reduce using rule 3 (statement_list -> statement_list statement .)
    MINUS           reduce using rule 3 (statement_list -> statement_list statement .)
    NOT             reduce using rule 3 (statement_list -> statement_list statement .)
    LPAREN          reduce using rule 3 (statement_list -> statement_list statement .)
    NUMBER          reduce using rule 3 (statement_list -> statement_list statement .)
    FLOAT_NUMBER    reduce using rule 3 (statement_list -> statement_list statement .)
    TRUE            reduce using rule 3 (statement_list -> statement_list statement .)
    FALSE           reduce using rule 3 (statement_list -> statement_list statement .)
    CHARACTER       reduce using rule 3 (statement_list -> statement_list statement .)
    $end            reduce using rule 3 (statement_list -> statement_list statement .)
    RBRACE          reduce using rule 3 (statement_list -> statement_list statement .)


state 43

    (19) statement -> WHILE expression . COLON LBRACE statement_list RBRACE
    (39) expression_binaria -> expression . PLUS expression
    (40) expression_binaria -> expression . MINUS expression
    (41) expression_binaria -> expression . TIMES expression
    (42) expression_binaria -> expression . DIVIDE expression
    (43) expression_comparacion -> expression . EQ expression
    (44) expression_comparacion -> expression . GT expression
    (45) expression_comparacion -> expression . GE expression
    (46) expression_comparacion -> expression . LT expression
    (47) expression_comparacion -> expression . LE expression
    (48) expression_logica -> expression . AND expression
    (49) expression_logica -> expression . OR expression
    (59) expression_array_access -> expression . LBRACKET expression RBRACKET
    (60) expression_field_access -> expression . DOT ID

    COLON           shift and go to state 71
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    TIMES           shift and go to state 48
    DIVIDE          shift and go to state 49
    EQ              shift and go to state 50
    GT              shift and go to state 51
    GE              shift and go to state 52
    LT              shift and go to state 53
    LE              shift and go to state 54
    AND             shift and go to state 55
    OR              shift and go to state 56
    LBRACKET        shift and go to state 57
    DOT             shift and go to state 58


state 44

    (58) expression_var -> ID .
    (61) expression_func_call -> ID . LPAREN arg_list RPAREN

  ! shift/reduce conflict for LPAREN resolved as shift
    COLON           reduce using rule 58 (expression_var -> ID .)
    PLUS            reduce using rule 58 (expression_var -> ID .)
    MINUS           reduce using rule 58 (expression_var -> ID .)
    TIMES           reduce using rule 58 (expression_var -> ID .)
    DIVIDE          reduce using rule 58 (expression_var -> ID .)
    EQ              reduce using rule 58 (expression_var -> ID .)
    GT              reduce using rule 58 (expression_var -> ID .)
    GE              reduce using rule 58 (expression_var -> ID .)
    LT              reduce using rule 58 (expression_var -> ID .)
    LE              reduce using rule 58 (expression_var -> ID .)
    AND             reduce using rule 58 (expression_var -> ID .)
    OR              reduce using rule 58 (expression_var -> ID .)
    LBRACKET        reduce using rule 58 (expression_var -> ID .)
    DOT             reduce using rule 58 (expression_var -> ID .)
    RPAREN          reduce using rule 58 (expression_var -> ID .)
    WHILE           reduce using rule 58 (expression_var -> ID .)
    DEF             reduce using rule 58 (expression_var -> ID .)
    RETURN          reduce using rule 58 (expression_var -> ID .)
    IF              reduce using rule 58 (expression_var -> ID .)
    ID              reduce using rule 58 (expression_var -> ID .)
    TYPE            reduce using rule 58 (expression_var -> ID .)
    INT             reduce using rule 58 (expression_var -> ID .)
    FLOAT           reduce using rule 58 (expression_var -> ID .)
    CHAR            reduce using rule 58 (expression_var -> ID .)
    BOOL            reduce using rule 58 (expression_var -> ID .)
    NOT             reduce using rule 58 (expression_var -> ID .)
    NUMBER          reduce using rule 58 (expression_var -> ID .)
    FLOAT_NUMBER    reduce using rule 58 (expression_var -> ID .)
    TRUE            reduce using rule 58 (expression_var -> ID .)
    FALSE           reduce using rule 58 (expression_var -> ID .)
    CHARACTER       reduce using rule 58 (expression_var -> ID .)
    $end            reduce using rule 58 (expression_var -> ID .)
    RBRACE          reduce using rule 58 (expression_var -> ID .)
    ASSIGN          reduce using rule 58 (expression_var -> ID .)
    RBRACKET        reduce using rule 58 (expression_var -> ID .)
    COMMA           reduce using rule 58 (expression_var -> ID .)
    LPAREN          shift and go to state 63

  ! LPAREN          [ reduce using rule 58 (expression_var -> ID .) ]


state 45

    (13) statement_assign -> expression ASSIGN . expression
    (29) expression -> . expression_binaria
    (30) expression -> . expression_comparacion
    (31) expression -> . expression_logica
    (32) expression -> . expression_unaria
    (33) expression -> . expression_group
    (34) expression -> . expression_number
    (35) expression -> . expression_var
    (36) expression -> . expression_array_access
    (37) expression -> . expression_field_access
    (38) expression -> . expression_func_call
    (39) expression_binaria -> . expression PLUS expression
    (40) expression_binaria -> . expression MINUS expression
    (41) expression_binaria -> . expression TIMES expression
    (42) expression_binaria -> . expression DIVIDE expression
    (43) expression_comparacion -> . expression EQ expression
    (44) expression_comparacion -> . expression GT expression
    (45) expression_comparacion -> . expression GE expression
    (46) expression_comparacion -> . expression LT expression
    (47) expression_comparacion -> . expression LE expression
    (48) expression_logica -> . expression AND expression
    (49) expression_logica -> . expression OR expression
    (50) expression_unaria -> . MINUS expression
    (51) expression_unaria -> . NOT expression
    (52) expression_group -> . LPAREN expression RPAREN
    (53) expression_number -> . NUMBER
    (54) expression_number -> . FLOAT_NUMBER
    (55) expression_number -> . TRUE
    (56) expression_number -> . FALSE
    (57) expression_number -> . CHARACTER
    (58) expression_var -> . ID
    (59) expression_array_access -> . expression LBRACKET expression RBRACKET
    (60) expression_field_access -> . expression DOT ID
    (61) expression_func_call -> . ID LPAREN arg_list RPAREN

    MINUS           shift and go to state 36
    NOT             shift and go to state 37
    LPAREN          shift and go to state 16
    NUMBER          shift and go to state 21
    FLOAT_NUMBER    shift and go to state 38
    TRUE            shift and go to state 39
    FALSE           shift and go to state 40
    CHARACTER       shift and go to state 41
    ID              shift and go to state 44

    expression                     shift and go to state 72
    expression_binaria             shift and go to state 22
    expression_comparacion         shift and go to state 23
    expression_logica              shift and go to state 24
    expression_unaria              shift and go to state 25
    expression_group               shift and go to state 26
    expression_number              shift and go to state 27
    expression_var                 shift and go to state 28
    expression_array_access        shift and go to state 29
    expression_field_access        shift and go to state 30
    expression_func_call           shift and go to state 31

state 46

    (39) expression_binaria -> expression PLUS . expression
    (29) expression -> . expression_binaria
    (30) expression -> . expression_comparacion
    (31) expression -> . expression_logica
    (32) expression -> . expression_unaria
    (33) expression -> . expression_group
    (34) expression -> . expression_number
    (35) expression -> . expression_var
    (36) expression -> . expression_array_access
    (37) expression -> . expression_field_access
    (38) expression -> . expression_func_call
    (39) expression_binaria -> . expression PLUS expression
    (40) expression_binaria -> . expression MINUS expression
    (41) expression_binaria -> . expression TIMES expression
    (42) expression_binaria -> . expression DIVIDE expression
    (43) expression_comparacion -> . expression EQ expression
    (44) expression_comparacion -> . expression GT expression
    (45) expression_comparacion -> . expression GE expression
    (46) expression_comparacion -> . expression LT expression
    (47) expression_comparacion -> . expression LE expression
    (48) expression_logica -> . expression AND expression
    (49) expression_logica -> . expression OR expression
    (50) expression_unaria -> . MINUS expression
    (51) expression_unaria -> . NOT expression
    (52) expression_group -> . LPAREN expression RPAREN
    (53) expression_number -> . NUMBER
    (54) expression_number -> . FLOAT_NUMBER
    (55) expression_number -> . TRUE
    (56) expression_number -> . FALSE
    (57) expression_number -> . CHARACTER
    (58) expression_var -> . ID
    (59) expression_array_access -> . expression LBRACKET expression RBRACKET
    (60) expression_field_access -> . expression DOT ID
    (61) expression_func_call -> . ID LPAREN arg_list RPAREN

    MINUS           shift and go to state 36
    NOT             shift and go to state 37
    LPAREN          shift and go to state 16
    NUMBER          shift and go to state 21
    FLOAT_NUMBER    shift and go to state 38
    TRUE            shift and go to state 39
    FALSE           shift and go to state 40
    CHARACTER       shift and go to state 41
    ID              shift and go to state 44

    expression                     shift and go to state 73
    expression_binaria             shift and go to state 22
    expression_comparacion         shift and go to state 23
    expression_logica              shift and go to state 24
    expression_unaria              shift and go to state 25
    expression_group               shift and go to state 26
    expression_number              shift and go to state 27
    expression_var                 shift and go to state 28
    expression_array_access        shift and go to state 29
    expression_field_access        shift and go to state 30
    expression_func_call           shift and go to state 31

state 47

    (40) expression_binaria -> expression MINUS . expression
    (29) expression -> . expression_binaria
    (30) expression -> . expression_comparacion
    (31) expression -> . expression_logica
    (32) expression -> . expression_unaria
    (33) expression -> . expression_group
    (34) expression -> . expression_number
    (35) expression -> . expression_var
    (36) expression -> . expression_array_access
    (37) expression -> . expression_field_access
    (38) expression -> . expression_func_call
    (39) expression_binaria -> . expression PLUS expression
    (40) expression_binaria -> . expression MINUS expression
    (41) expression_binaria -> . expression TIMES expression
    (42) expression_binaria -> . expression DIVIDE expression
    (43) expression_comparacion -> . expression EQ expression
    (44) expression_comparacion -> . expression GT expression
    (45) expression_comparacion -> . expression GE expression
    (46) expression_comparacion -> . expression LT expression
    (47) expression_comparacion -> . expression LE expression
    (48) expression_logica -> . expression AND expression
    (49) expression_logica -> . expression OR expression
    (50) expression_unaria -> . MINUS expression
    (51) expression_unaria -> . NOT expression
    (52) expression_group -> . LPAREN expression RPAREN
    (53) expression_number -> . NUMBER
    (54) expression_number -> . FLOAT_NUMBER
    (55) expression_number -> . TRUE
    (56) expression_number -> . FALSE
    (57) expression_number -> . CHARACTER
    (58) expression_var -> . ID
    (59) expression_array_access -> . expression LBRACKET expression RBRACKET
    (60) expression_field_access -> . expression DOT ID
    (61) expression_func_call -> . ID LPAREN arg_list RPAREN

    MINUS           shift and go to state 36
    NOT             shift and go to state 37
    LPAREN          shift and go to state 16
    NUMBER          shift and go to state 21
    FLOAT_NUMBER    shift and go to state 38
    TRUE            shift and go to state 39
    FALSE           shift and go to state 40
    CHARACTER       shift and go to state 41
    ID              shift and go to state 44

    expression                     shift and go to state 74
    expression_binaria             shift and go to state 22
    expression_comparacion         shift and go to state 23
    expression_logica              shift and go to state 24
    expression_unaria              shift and go to state 25
    expression_group               shift and go to state 26
    expression_number              shift and go to state 27
    expression_var                 shift and go to state 28
    expression_array_access        shift and go to state 29
    expression_field_access        shift and go to state 30
    expression_func_call           shift and go to state 31

state 48

    (41) expression_binaria -> expression TIMES . expression
    (29) expression -> . expression_binaria
    (30) expression -> . expression_comparacion
    (31) expression -> . expression_logica
    (32) expression -> . expression_unaria
    (33) expression -> . expression_group
    (34) expression -> . expression_number
    (35) expression -> . expression_var
    (36) expression -> . expression_array_access
    (37) expression -> . expression_field_access
    (38) expression -> . expression_func_call
    (39) expression_binaria -> . expression PLUS expression
    (40) expression_binaria -> . expression MINUS expression
    (41) expression_binaria -> . expression TIMES expression
    (42) expression_binaria -> . expression DIVIDE expression
    (43) expression_comparacion -> . expression EQ expression
    (44) expression_comparacion -> . expression GT expression
    (45) expression_comparacion -> . expression GE expression
    (46) expression_comparacion -> . expression LT expression
    (47) expression_comparacion -> . expression LE expression
    (48) expression_logica -> . expression AND expression
    (49) expression_logica -> . expression OR expression
    (50) expression_unaria -> . MINUS expression
    (51) expression_unaria -> . NOT expression
    (52) expression_group -> . LPAREN expression RPAREN
    (53) expression_number -> . NUMBER
    (54) expression_number -> . FLOAT_NUMBER
    (55) expression_number -> . TRUE
    (56) expression_number -> . FALSE
    (57) expression_number -> . CHARACTER
    (58) expression_var -> . ID
    (59) expression_array_access -> . expression LBRACKET expression RBRACKET
    (60) expression_field_access -> . expression DOT ID
    (61) expression_func_call -> . ID LPAREN arg_list RPAREN

    MINUS           shift and go to state 36
    NOT             shift and go to state 37
    LPAREN          shift and go to state 16
    NUMBER          shift and go to state 21
    FLOAT_NUMBER    shift and go to state 38
    TRUE            shift and go to state 39
    FALSE           shift and go to state 40
    CHARACTER       shift and go to state 41
    ID              shift and go to state 44

    expression                     shift and go to state 75
    expression_binaria             shift and go to state 22
    expression_comparacion         shift and go to state 23
    expression_logica              shift and go to state 24
    expression_unaria              shift and go to state 25
    expression_group               shift and go to state 26
    expression_number              shift and go to state 27
    expression_var                 shift and go to state 28
    expression_array_access        shift and go to state 29
    expression_field_access        shift and go to state 30
    expression_func_call           shift and go to state 31

state 49

    (42) expression_binaria -> expression DIVIDE . expression
    (29) expression -> . expression_binaria
    (30) expression -> . expression_comparacion
    (31) expression -> . expression_logica
    (32) expression -> . expression_unaria
    (33) expression -> . expression_group
    (34) expression -> . expression_number
    (35) expression -> . expression_var
    (36) expression -> . expression_array_access
    (37) expression -> . expression_field_access
    (38) expression -> . expression_func_call
    (39) expression_binaria -> . expression PLUS expression
    (40) expression_binaria -> . expression MINUS expression
    (41) expression_binaria -> . expression TIMES expression
    (42) expression_binaria -> . expression DIVIDE expression
    (43) expression_comparacion -> . expression EQ expression
    (44) expression_comparacion -> . expression GT expression
    (45) expression_comparacion -> . expression GE expression
    (46) expression_comparacion -> . expression LT expression
    (47) expression_comparacion -> . expression LE expression
    (48) expression_logica -> . expression AND expression
    (49) expression_logica -> . expression OR expression
    (50) expression_unaria -> . MINUS expression
    (51) expression_unaria -> . NOT expression
    (52) expression_group -> . LPAREN expression RPAREN
    (53) expression_number -> . NUMBER
    (54) expression_number -> . FLOAT_NUMBER
    (55) expression_number -> . TRUE
    (56) expression_number -> . FALSE
    (57) expression_number -> . CHARACTER
    (58) expression_var -> . ID
    (59) expression_array_access -> . expression LBRACKET expression RBRACKET
    (60) expression_field_access -> . expression DOT ID
    (61) expression_func_call -> . ID LPAREN arg_list RPAREN

    MINUS           shift and go to state 36
    NOT             shift and go to state 37
    LPAREN          shift and go to state 16
    NUMBER          shift and go to state 21
    FLOAT_NUMBER    shift and go to state 38
    TRUE            shift and go to state 39
    FALSE           shift and go to state 40
    CHARACTER       shift and go to state 41
    ID              shift and go to state 44

    expression                     shift and go to state 76
    expression_binaria             shift and go to state 22
    expression_comparacion         shift and go to state 23
    expression_logica              shift and go to state 24
    expression_unaria              shift and go to state 25
    expression_group               shift and go to state 26
    expression_number              shift and go to state 27
    expression_var                 shift and go to state 28
    expression_array_access        shift and go to state 29
    expression_field_access        shift and go to state 30
    expression_func_call           shift and go to state 31

state 50

    (43) expression_comparacion -> expression EQ . expression
    (29) expression -> . expression_binaria
    (30) expression -> . expression_comparacion
    (31) expression -> . expression_logica
    (32) expression -> . expression_unaria
    (33) expression -> . expression_group
    (34) expression -> . expression_number
    (35) expression -> . expression_var
    (36) expression -> . expression_array_access
    (37) expression -> . expression_field_access
    (38) expression -> . expression_func_call
    (39) expression_binaria -> . expression PLUS expression
    (40) expression_binaria -> . expression MINUS expression
    (41) expression_binaria -> . expression TIMES expression
    (42) expression_binaria -> . expression DIVIDE expression
    (43) expression_comparacion -> . expression EQ expression
    (44) expression_comparacion -> . expression GT expression
    (45) expression_comparacion -> . expression GE expression
    (46) expression_comparacion -> . expression LT expression
    (47) expression_comparacion -> . expression LE expression
    (48) expression_logica -> . expression AND expression
    (49) expression_logica -> . expression OR expression
    (50) expression_unaria -> . MINUS expression
    (51) expression_unaria -> . NOT expression
    (52) expression_group -> . LPAREN expression RPAREN
    (53) expression_number -> . NUMBER
    (54) expression_number -> . FLOAT_NUMBER
    (55) expression_number -> . TRUE
    (56) expression_number -> . FALSE
    (57) expression_number -> . CHARACTER
    (58) expression_var -> . ID
    (59) expression_array_access -> . expression LBRACKET expression RBRACKET
    (60) expression_field_access -> . expression DOT ID
    (61) expression_func_call -> . ID LPAREN arg_list RPAREN

    MINUS           shift and go to state 36
    NOT             shift and go to state 37
    LPAREN          shift and go to state 16
    NUMBER          shift and go to state 21
    FLOAT_NUMBER    shift and go to state 38
    TRUE            shift and go to state 39
    FALSE           shift and go to state 40
    CHARACTER       shift and go to state 41
    ID              shift and go to state 44

    expression                     shift and go to state 77
    expression_binaria             shift and go to state 22
    expression_comparacion         shift and go to state 23
    expression_logica              shift and go to state 24
    expression_unaria              shift and go to state 25
    expression_group               shift and go to state 26
    expression_number              shift and go to state 27
    expression_var                 shift and go to state 28
    expression_array_access        shift and go to state 29
    expression_field_access        shift and go to state 30
    expression_func_call           shift and go to state 31

state 51

    (44) expression_comparacion -> expression GT . expression
    (29) expression -> . expression_binaria
    (30) expression -> . expression_comparacion
    (31) expression -> . expression_logica
    (32) expression -> . expression_unaria
    (33) expression -> . expression_group
    (34) expression -> . expression_number
    (35) expression -> . expression_var
    (36) expression -> . expression_array_access
    (37) expression -> . expression_field_access
    (38) expression -> . expression_func_call
    (39) expression_binaria -> . expression PLUS expression
    (40) expression_binaria -> . expression MINUS expression
    (41) expression_binaria -> . expression TIMES expression
    (42) expression_binaria -> . expression DIVIDE expression
    (43) expression_comparacion -> . expression EQ expression
    (44) expression_comparacion -> . expression GT expression
    (45) expression_comparacion -> . expression GE expression
    (46) expression_comparacion -> . expression LT expression
    (47) expression_comparacion -> . expression LE expression
    (48) expression_logica -> . expression AND expression
    (49) expression_logica -> . expression OR expression
    (50) expression_unaria -> . MINUS expression
    (51) expression_unaria -> . NOT expression
    (52) expression_group -> . LPAREN expression RPAREN
    (53) expression_number -> . NUMBER
    (54) expression_number -> . FLOAT_NUMBER
    (55) expression_number -> . TRUE
    (56) expression_number -> . FALSE
    (57) expression_number -> . CHARACTER
    (58) expression_var -> . ID
    (59) expression_array_access -> . expression LBRACKET expression RBRACKET
    (60) expression_field_access -> . expression DOT ID
    (61) expression_func_call -> . ID LPAREN arg_list RPAREN

    MINUS           shift and go to state 36
    NOT             shift and go to state 37
    LPAREN          shift and go to state 16
    NUMBER          shift and go to state 21
    FLOAT_NUMBER    shift and go to state 38
    TRUE            shift and go to state 39
    FALSE           shift and go to state 40
    CHARACTER       shift and go to state 41
    ID              shift and go to state 44

    expression                     shift and go to state 78
    expression_binaria             shift and go to state 22
    expression_comparacion         shift and go to state 23
    expression_logica              shift and go to state 24
    expression_unaria              shift and go to state 25
    expression_group               shift and go to state 26
    expression_number              shift and go to state 27
    expression_var                 shift and go to state 28
    expression_array_access        shift and go to state 29
    expression_field_access        shift and go to state 30
    expression_func_call           shift and go to state 31

state 52

    (45) expression_comparacion -> expression GE . expression
    (29) expression -> . expression_binaria
    (30) expression -> . expression_comparacion
    (31) expression -> . expression_logica
    (32) expression -> . expression_unaria
    (33) expression -> . expression_group
    (34) expression -> . expression_number
    (35) expression -> . expression_var
    (36) expression -> . expression_array_access
    (37) expression -> . expression_field_access
    (38) expression -> . expression_func_call
    (39) expression_binaria -> . expression PLUS expression
    (40) expression_binaria -> . expression MINUS expression
    (41) expression_binaria -> . expression TIMES expression
    (42) expression_binaria -> . expression DIVIDE expression
    (43) expression_comparacion -> . expression EQ expression
    (44) expression_comparacion -> . expression GT expression
    (45) expression_comparacion -> . expression GE expression
    (46) expression_comparacion -> . expression LT expression
    (47) expression_comparacion -> . expression LE expression
    (48) expression_logica -> . expression AND expression
    (49) expression_logica -> . expression OR expression
    (50) expression_unaria -> . MINUS expression
    (51) expression_unaria -> . NOT expression
    (52) expression_group -> . LPAREN expression RPAREN
    (53) expression_number -> . NUMBER
    (54) expression_number -> . FLOAT_NUMBER
    (55) expression_number -> . TRUE
    (56) expression_number -> . FALSE
    (57) expression_number -> . CHARACTER
    (58) expression_var -> . ID
    (59) expression_array_access -> . expression LBRACKET expression RBRACKET
    (60) expression_field_access -> . expression DOT ID
    (61) expression_func_call -> . ID LPAREN arg_list RPAREN

    MINUS           shift and go to state 36
    NOT             shift and go to state 37
    LPAREN          shift and go to state 16
    NUMBER          shift and go to state 21
    FLOAT_NUMBER    shift and go to state 38
    TRUE            shift and go to state 39
    FALSE           shift and go to state 40
    CHARACTER       shift and go to state 41
    ID              shift and go to state 44

    expression                     shift and go to state 79
    expression_binaria             shift and go to state 22
    expression_comparacion         shift and go to state 23
    expression_logica              shift and go to state 24
    expression_unaria              shift and go to state 25
    expression_group               shift and go to state 26
    expression_number              shift and go to state 27
    expression_var                 shift and go to state 28
    expression_array_access        shift and go to state 29
    expression_field_access        shift and go to state 30
    expression_func_call           shift and go to state 31

state 53

    (46) expression_comparacion -> expression LT . expression
    (29) expression -> . expression_binaria
    (30) expression -> . expression_comparacion
    (31) expression -> . expression_logica
    (32) expression -> . expression_unaria
    (33) expression -> . expression_group
    (34) expression -> . expression_number
    (35) expression -> . expression_var
    (36) expression -> . expression_array_access
    (37) expression -> . expression_field_access
    (38) expression -> . expression_func_call
    (39) expression_binaria -> . expression PLUS expression
    (40) expression_binaria -> . expression MINUS expression
    (41) expression_binaria -> . expression TIMES expression
    (42) expression_binaria -> . expression DIVIDE expression
    (43) expression_comparacion -> . expression EQ expression
    (44) expression_comparacion -> . expression GT expression
    (45) expression_comparacion -> . expression GE expression
    (46) expression_comparacion -> . expression LT expression
    (47) expression_comparacion -> . expression LE expression
    (48) expression_logica -> . expression AND expression
    (49) expression_logica -> . expression OR expression
    (50) expression_unaria -> . MINUS expression
    (51) expression_unaria -> . NOT expression
    (52) expression_group -> . LPAREN expression RPAREN
    (53) expression_number -> . NUMBER
    (54) expression_number -> . FLOAT_NUMBER
    (55) expression_number -> . TRUE
    (56) expression_number -> . FALSE
    (57) expression_number -> . CHARACTER
    (58) expression_var -> . ID
    (59) expression_array_access -> . expression LBRACKET expression RBRACKET
    (60) expression_field_access -> . expression DOT ID
    (61) expression_func_call -> . ID LPAREN arg_list RPAREN

    MINUS           shift and go to state 36
    NOT             shift and go to state 37
    LPAREN          shift and go to state 16
    NUMBER          shift and go to state 21
    FLOAT_NUMBER    shift and go to state 38
    TRUE            shift and go to state 39
    FALSE           shift and go to state 40
    CHARACTER       shift and go to state 41
    ID              shift and go to state 44

    expression                     shift and go to state 80
    expression_binaria             shift and go to state 22
    expression_comparacion         shift and go to state 23
    expression_logica              shift and go to state 24
    expression_unaria              shift and go to state 25
    expression_group               shift and go to state 26
    expression_number              shift and go to state 27
    expression_var                 shift and go to state 28
    expression_array_access        shift and go to state 29
    expression_field_access        shift and go to state 30
    expression_func_call           shift and go to state 31

state 54

    (47) expression_comparacion -> expression LE . expression
    (29) expression -> . expression_binaria
    (30) expression -> . expression_comparacion
    (31) expression -> . expression_logica
    (32) expression -> . expression_unaria
    (33) expression -> . expression_group
    (34) expression -> . expression_number
    (35) expression -> . expression_var
    (36) expression -> . expression_array_access
    (37) expression -> . expression_field_access
    (38) expression -> . expression_func_call
    (39) expression_binaria -> . expression PLUS expression
    (40) expression_binaria -> . expression MINUS expression
    (41) expression_binaria -> . expression TIMES expression
    (42) expression_binaria -> . expression DIVIDE expression
    (43) expression_comparacion -> . expression EQ expression
    (44) expression_comparacion -> . expression GT expression
    (45) expression_comparacion -> . expression GE expression
    (46) expression_comparacion -> . expression LT expression
    (47) expression_comparacion -> . expression LE expression
    (48) expression_logica -> . expression AND expression
    (49) expression_logica -> . expression OR expression
    (50) expression_unaria -> . MINUS expression
    (51) expression_unaria -> . NOT expression
    (52) expression_group -> . LPAREN expression RPAREN
    (53) expression_number -> . NUMBER
    (54) expression_number -> . FLOAT_NUMBER
    (55) expression_number -> . TRUE
    (56) expression_number -> . FALSE
    (57) expression_number -> . CHARACTER
    (58) expression_var -> . ID
    (59) expression_array_access -> . expression LBRACKET expression RBRACKET
    (60) expression_field_access -> . expression DOT ID
    (61) expression_func_call -> . ID LPAREN arg_list RPAREN

    MINUS           shift and go to state 36
    NOT             shift and go to state 37
    LPAREN          shift and go to state 16
    NUMBER          shift and go to state 21
    FLOAT_NUMBER    shift and go to state 38
    TRUE            shift and go to state 39
    FALSE           shift and go to state 40
    CHARACTER       shift and go to state 41
    ID              shift and go to state 44

    expression                     shift and go to state 81
    expression_binaria             shift and go to state 22
    expression_comparacion         shift and go to state 23
    expression_logica              shift and go to state 24
    expression_unaria              shift and go to state 25
    expression_group               shift and go to state 26
    expression_number              shift and go to state 27
    expression_var                 shift and go to state 28
    expression_array_access        shift and go to state 29
    expression_field_access        shift and go to state 30
    expression_func_call           shift and go to state 31

state 55

    (48) expression_logica -> expression AND . expression
    (29) expression -> . expression_binaria
    (30) expression -> . expression_comparacion
    (31) expression -> . expression_logica
    (32) expression -> . expression_unaria
    (33) expression -> . expression_group
    (34) expression -> . expression_number
    (35) expression -> . expression_var
    (36) expression -> . expression_array_access
    (37) expression -> . expression_field_access
    (38) expression -> . expression_func_call
    (39) expression_binaria -> . expression PLUS expression
    (40) expression_binaria -> . expression MINUS expression
    (41) expression_binaria -> . expression TIMES expression
    (42) expression_binaria -> . expression DIVIDE expression
    (43) expression_comparacion -> . expression EQ expression
    (44) expression_comparacion -> . expression GT expression
    (45) expression_comparacion -> . expression GE expression
    (46) expression_comparacion -> . expression LT expression
    (47) expression_comparacion -> . expression LE expression
    (48) expression_logica -> . expression AND expression
    (49) expression_logica -> . expression OR expression
    (50) expression_unaria -> . MINUS expression
    (51) expression_unaria -> . NOT expression
    (52) expression_group -> . LPAREN expression RPAREN
    (53) expression_number -> . NUMBER
    (54) expression_number -> . FLOAT_NUMBER
    (55) expression_number -> . TRUE
    (56) expression_number -> . FALSE
    (57) expression_number -> . CHARACTER
    (58) expression_var -> . ID
    (59) expression_array_access -> . expression LBRACKET expression RBRACKET
    (60) expression_field_access -> . expression DOT ID
    (61) expression_func_call -> . ID LPAREN arg_list RPAREN

    MINUS           shift and go to state 36
    NOT             shift and go to state 37
    LPAREN          shift and go to state 16
    NUMBER          shift and go to state 21
    FLOAT_NUMBER    shift and go to state 38
    TRUE            shift and go to state 39
    FALSE           shift and go to state 40
    CHARACTER       shift and go to state 41
    ID              shift and go to state 44

    expression                     shift and go to state 82
    expression_binaria             shift and go to state 22
    expression_comparacion         shift and go to state 23
    expression_logica              shift and go to state 24
    expression_unaria              shift and go to state 25
    expression_group               shift and go to state 26
    expression_number              shift and go to state 27
    expression_var                 shift and go to state 28
    expression_array_access        shift and go to state 29
    expression_field_access        shift and go to state 30
    expression_func_call           shift and go to state 31

state 56

    (49) expression_logica -> expression OR . expression
    (29) expression -> . expression_binaria
    (30) expression -> . expression_comparacion
    (31) expression -> . expression_logica
    (32) expression -> . expression_unaria
    (33) expression -> . expression_group
    (34) expression -> . expression_number
    (35) expression -> . expression_var
    (36) expression -> . expression_array_access
    (37) expression -> . expression_field_access
    (38) expression -> . expression_func_call
    (39) expression_binaria -> . expression PLUS expression
    (40) expression_binaria -> . expression MINUS expression
    (41) expression_binaria -> . expression TIMES expression
    (42) expression_binaria -> . expression DIVIDE expression
    (43) expression_comparacion -> . expression EQ expression
    (44) expression_comparacion -> . expression GT expression
    (45) expression_comparacion -> . expression GE expression
    (46) expression_comparacion -> . expression LT expression
    (47) expression_comparacion -> . expression LE expression
    (48) expression_logica -> . expression AND expression
    (49) expression_logica -> . expression OR expression
    (50) expression_unaria -> . MINUS expression
    (51) expression_unaria -> . NOT expression
    (52) expression_group -> . LPAREN expression RPAREN
    (53) expression_number -> . NUMBER
    (54) expression_number -> . FLOAT_NUMBER
    (55) expression_number -> . TRUE
    (56) expression_number -> . FALSE
    (57) expression_number -> . CHARACTER
    (58) expression_var -> . ID
    (59) expression_array_access -> . expression LBRACKET expression RBRACKET
    (60) expression_field_access -> . expression DOT ID
    (61) expression_func_call -> . ID LPAREN arg_list RPAREN

    MINUS           shift and go to state 36
    NOT             shift and go to state 37
    LPAREN          shift and go to state 16
    NUMBER          shift and go to state 21
    FLOAT_NUMBER    shift and go to state 38
    TRUE            shift and go to state 39
    FALSE           shift and go to state 40
    CHARACTER       shift and go to state 41
    ID              shift and go to state 44

    expression                     shift and go to state 83
    expression_binaria             shift and go to state 22
    expression_comparacion         shift and go to state 23
    expression_logica              shift and go to state 24
    expression_unaria              shift and go to state 25
    expression_group               shift and go to state 26
    expression_number              shift and go to state 27
    expression_var                 shift and go to state 28
    expression_array_access        shift and go to state 29
    expression_field_access        shift and go to state 30
    expression_func_call           shift and go to state 31

state 57

    (59) expression_array_access -> expression LBRACKET . expression RBRACKET
    (29) expression -> . expression_binaria
    (30) expression -> . expression_comparacion
    (31) expression -> . expression_logica
    (32) expression -> . expression_unaria
    (33) expression -> . expression_group
    (34) expression -> . expression_number
    (35) expression -> . expression_var
    (36) expression -> . expression_array_access
    (37) expression -> . expression_field_access
    (38) expression -> . expression_func_call
    (39) expression_binaria -> . expression PLUS expression
    (40) expression_binaria -> . expression MINUS expression
    (41) expression_binaria -> . expression TIMES expression
    (42) expression_binaria -> . expression DIVIDE expression
    (43) expression_comparacion -> . expression EQ expression
    (44) expression_comparacion -> . expression GT expression
    (45) expression_comparacion -> . expression GE expression
    (46) expression_comparacion -> . expression LT expression
    (47) expression_comparacion -> . expression LE expression
    (48) expression_logica -> . expression AND expression
    (49) expression_logica -> . expression OR expression
    (50) expression_unaria -> . MINUS expression
    (51) expression_unaria -> . NOT expression
    (52) expression_group -> . LPAREN expression RPAREN
    (53) expression_number -> . NUMBER
    (54) expression_number -> . FLOAT_NUMBER
    (55) expression_number -> . TRUE
    (56) expression_number -> . FALSE
    (57) expression_number -> . CHARACTER
    (58) expression_var -> . ID
    (59) expression_array_access -> . expression LBRACKET expression RBRACKET
    (60) expression_field_access -> . expression DOT ID
    (61) expression_func_call -> . ID LPAREN arg_list RPAREN

    MINUS           shift and go to state 36
    NOT             shift and go to state 37
    LPAREN          shift and go to state 16
    NUMBER          shift and go to state 21
    FLOAT_NUMBER    shift and go to state 38
    TRUE            shift and go to state 39
    FALSE           shift and go to state 40
    CHARACTER       shift and go to state 41
    ID              shift and go to state 44

    expression                     shift and go to state 84
    expression_binaria             shift and go to state 22
    expression_comparacion         shift and go to state 23
    expression_logica              shift and go to state 24
    expression_unaria              shift and go to state 25
    expression_group               shift and go to state 26
    expression_number              shift and go to state 27
    expression_var                 shift and go to state 28
    expression_array_access        shift and go to state 29
    expression_field_access        shift and go to state 30
    expression_func_call           shift and go to state 31

state 58

    (60) expression_field_access -> expression DOT . ID

    ID              shift and go to state 85


state 59

    (11) statement_declaration -> type id_list .
    (12) statement_declaration -> type id_list . ASSIGN expression
    (22) id_list -> id_list . COMMA ID

    WHILE           reduce using rule 11 (statement_declaration -> type id_list .)
    DEF             reduce using rule 11 (statement_declaration -> type id_list .)
    RETURN          reduce using rule 11 (statement_declaration -> type id_list .)
    IF              reduce using rule 11 (statement_declaration -> type id_list .)
    ID              reduce using rule 11 (statement_declaration -> type id_list .)
    TYPE            reduce using rule 11 (statement_declaration -> type id_list .)
    INT             reduce using rule 11 (statement_declaration -> type id_list .)
    FLOAT           reduce using rule 11 (statement_declaration -> type id_list .)
    CHAR            reduce using rule 11 (statement_declaration -> type id_list .)
    BOOL            reduce using rule 11 (statement_declaration -> type id_list .)
    MINUS           reduce using rule 11 (statement_declaration -> type id_list .)
    NOT             reduce using rule 11 (statement_declaration -> type id_list .)
    LPAREN          reduce using rule 11 (statement_declaration -> type id_list .)
    NUMBER          reduce using rule 11 (statement_declaration -> type id_list .)
    FLOAT_NUMBER    reduce using rule 11 (statement_declaration -> type id_list .)
    TRUE            reduce using rule 11 (statement_declaration -> type id_list .)
    FALSE           reduce using rule 11 (statement_declaration -> type id_list .)
    CHARACTER       reduce using rule 11 (statement_declaration -> type id_list .)
    $end            reduce using rule 11 (statement_declaration -> type id_list .)
    RBRACE          reduce using rule 11 (statement_declaration -> type id_list .)
    ASSIGN          shift and go to state 86
    COMMA           shift and go to state 87


state 60

    (21) id_list -> ID .

    ASSIGN          reduce using rule 21 (id_list -> ID .)
    COMMA           reduce using rule 21 (id_list -> ID .)
    WHILE           reduce using rule 21 (id_list -> ID .)
    DEF             reduce using rule 21 (id_list -> ID .)
    RETURN          reduce using rule 21 (id_list -> ID .)
    IF              reduce using rule 21 (id_list -> ID .)
    ID              reduce using rule 21 (id_list -> ID .)
    TYPE            reduce using rule 21 (id_list -> ID .)
    INT             reduce using rule 21 (id_list -> ID .)
    FLOAT           reduce using rule 21 (id_list -> ID .)
    CHAR            reduce using rule 21 (id_list -> ID .)
    BOOL            reduce using rule 21 (id_list -> ID .)
    MINUS           reduce using rule 21 (id_list -> ID .)
    NOT             reduce using rule 21 (id_list -> ID .)
    LPAREN          reduce using rule 21 (id_list -> ID .)
    NUMBER          reduce using rule 21 (id_list -> ID .)
    FLOAT_NUMBER    reduce using rule 21 (id_list -> ID .)
    TRUE            reduce using rule 21 (id_list -> ID .)
    FALSE           reduce using rule 21 (id_list -> ID .)
    CHARACTER       reduce using rule 21 (id_list -> ID .)
    $end            reduce using rule 21 (id_list -> ID .)
    RBRACE          reduce using rule 21 (id_list -> ID .)


state 61

    (14) statement_function -> DEF type . ID LPAREN param_list RPAREN COLON LBRACE statement_list RBRACE

    ID              shift and go to state 88


state 62

    (18) statement_instance -> ID ID .

    WHILE           reduce using rule 18 (statement_instance -> ID ID .)
    DEF             reduce using rule 18 (statement_instance -> ID ID .)
    RETURN          reduce using rule 18 (statement_instance -> ID ID .)
    IF              reduce using rule 18 (statement_instance -> ID ID .)
    ID              reduce using rule 18 (statement_instance -> ID ID .)
    TYPE            reduce using rule 18 (statement_instance -> ID ID .)
    INT             reduce using rule 18 (statement_instance -> ID ID .)
    FLOAT           reduce using rule 18 (statement_instance -> ID ID .)
    CHAR            reduce using rule 18 (statement_instance -> ID ID .)
    BOOL            reduce using rule 18 (statement_instance -> ID ID .)
    MINUS           reduce using rule 18 (statement_instance -> ID ID .)
    NOT             reduce using rule 18 (statement_instance -> ID ID .)
    LPAREN          reduce using rule 18 (statement_instance -> ID ID .)
    NUMBER          reduce using rule 18 (statement_instance -> ID ID .)
    FLOAT_NUMBER    reduce using rule 18 (statement_instance -> ID ID .)
    TRUE            reduce using rule 18 (statement_instance -> ID ID .)
    FALSE           reduce using rule 18 (statement_instance -> ID ID .)
    CHARACTER       reduce using rule 18 (statement_instance -> ID ID .)
    $end            reduce using rule 18 (statement_instance -> ID ID .)
    RBRACE          reduce using rule 18 (statement_instance -> ID ID .)


state 63

    (61) expression_func_call -> ID LPAREN . arg_list RPAREN
    (65) arg_list -> . expression
    (66) arg_list -> . arg_list COMMA expression
    (67) arg_list -> . empty
    (29) expression -> . expression_binaria
    (30) expression -> . expression_comparacion
    (31) expression -> . expression_logica
    (32) expression -> . expression_unaria
    (33) expression -> . expression_group
    (34) expression -> . expression_number
    (35) expression -> . expression_var
    (36) expression -> . expression_array_access
    (37) expression -> . expression_field_access
    (38) expression -> . expression_func_call
    (71) empty -> .
    (39) expression_binaria -> . expression PLUS expression
    (40) expression_binaria -> . expression MINUS expression
    (41) expression_binaria -> . expression TIMES expression
    (42) expression_binaria -> . expression DIVIDE expression
    (43) expression_comparacion -> . expression EQ expression
    (44) expression_comparacion -> . expression GT expression
    (45) expression_comparacion -> . expression GE expression
    (46) expression_comparacion -> . expression LT expression
    (47) expression_comparacion -> . expression LE expression
    (48) expression_logica -> . expression AND expression
    (49) expression_logica -> . expression OR expression
    (50) expression_unaria -> . MINUS expression
    (51) expression_unaria -> . NOT expression
    (52) expression_group -> . LPAREN expression RPAREN
    (53) expression_number -> . NUMBER
    (54) expression_number -> . FLOAT_NUMBER
    (55) expression_number -> . TRUE
    (56) expression_number -> . FALSE
    (57) expression_number -> . CHARACTER
    (58) expression_var -> . ID
    (59) expression_array_access -> . expression LBRACKET expression RBRACKET
    (60) expression_field_access -> . expression DOT ID
    (61) expression_func_call -> . ID LPAREN arg_list RPAREN

    RPAREN          reduce using rule 71 (empty -> .)
    COMMA           reduce using rule 71 (empty -> .)
    MINUS           shift and go to state 36
    NOT             shift and go to state 37
    LPAREN          shift and go to state 16
    NUMBER          shift and go to state 21
    FLOAT_NUMBER    shift and go to state 38
    TRUE            shift and go to state 39
    FALSE           shift and go to state 40
    CHARACTER       shift and go to state 41
    ID              shift and go to state 44

    arg_list                       shift and go to state 89
    expression                     shift and go to state 90
    empty                          shift and go to state 91
    expression_binaria             shift and go to state 22
    expression_comparacion         shift and go to state 23
    expression_logica              shift and go to state 24
    expression_unaria              shift and go to state 25
    expression_group               shift and go to state 26
    expression_number              shift and go to state 27
    expression_var                 shift and go to state 28
    expression_array_access        shift and go to state 29
    expression_field_access        shift and go to state 30
    expression_func_call           shift and go to state 31

state 64

    (52) expression_group -> LPAREN expression . RPAREN
    (39) expression_binaria -> expression . PLUS expression
    (40) expression_binaria -> expression . MINUS expression
    (41) expression_binaria -> expression . TIMES expression
    (42) expression_binaria -> expression . DIVIDE expression
    (43) expression_comparacion -> expression . EQ expression
    (44) expression_comparacion -> expression . GT expression
    (45) expression_comparacion -> expression . GE expression
    (46) expression_comparacion -> expression . LT expression
    (47) expression_comparacion -> expression . LE expression
    (48) expression_logica -> expression . AND expression
    (49) expression_logica -> expression . OR expression
    (59) expression_array_access -> expression . LBRACKET expression RBRACKET
    (60) expression_field_access -> expression . DOT ID

    RPAREN          shift and go to state 92
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    TIMES           shift and go to state 48
    DIVIDE          shift and go to state 49
    EQ              shift and go to state 50
    GT              shift and go to state 51
    GE              shift and go to state 52
    LT              shift and go to state 53
    LE              shift and go to state 54
    AND             shift and go to state 55
    OR              shift and go to state 56
    LBRACKET        shift and go to state 57
    DOT             shift and go to state 58


state 65

    (15) statement_return -> RETURN expression .
    (39) expression_binaria -> expression . PLUS expression
    (40) expression_binaria -> expression . MINUS expression
    (41) expression_binaria -> expression . TIMES expression
    (42) expression_binaria -> expression . DIVIDE expression
    (43) expression_comparacion -> expression . EQ expression
    (44) expression_comparacion -> expression . GT expression
    (45) expression_comparacion -> expression . GE expression
    (46) expression_comparacion -> expression . LT expression
    (47) expression_comparacion -> expression . LE expression
    (48) expression_logica -> expression . AND expression
    (49) expression_logica -> expression . OR expression
    (59) expression_array_access -> expression . LBRACKET expression RBRACKET
    (60) expression_field_access -> expression . DOT ID

  ! shift/reduce conflict for MINUS resolved as shift
    WHILE           reduce using rule 15 (statement_return -> RETURN expression .)
    DEF             reduce using rule 15 (statement_return -> RETURN expression .)
    RETURN          reduce using rule 15 (statement_return -> RETURN expression .)
    IF              reduce using rule 15 (statement_return -> RETURN expression .)
    ID              reduce using rule 15 (statement_return -> RETURN expression .)
    TYPE            reduce using rule 15 (statement_return -> RETURN expression .)
    INT             reduce using rule 15 (statement_return -> RETURN expression .)
    FLOAT           reduce using rule 15 (statement_return -> RETURN expression .)
    CHAR            reduce using rule 15 (statement_return -> RETURN expression .)
    BOOL            reduce using rule 15 (statement_return -> RETURN expression .)
    NOT             reduce using rule 15 (statement_return -> RETURN expression .)
    LPAREN          reduce using rule 15 (statement_return -> RETURN expression .)
    NUMBER          reduce using rule 15 (statement_return -> RETURN expression .)
    FLOAT_NUMBER    reduce using rule 15 (statement_return -> RETURN expression .)
    TRUE            reduce using rule 15 (statement_return -> RETURN expression .)
    FALSE           reduce using rule 15 (statement_return -> RETURN expression .)
    CHARACTER       reduce using rule 15 (statement_return -> RETURN expression .)
    $end            reduce using rule 15 (statement_return -> RETURN expression .)
    RBRACE          reduce using rule 15 (statement_return -> RETURN expression .)
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    TIMES           shift and go to state 48
    DIVIDE          shift and go to state 49
    EQ              shift and go to state 50
    GT              shift and go to state 51
    GE              shift and go to state 52
    LT              shift and go to state 53
    LE              shift and go to state 54
    AND             shift and go to state 55
    OR              shift and go to state 56
    LBRACKET        shift and go to state 57
    DOT             shift and go to state 58

  ! MINUS           [ reduce using rule 15 (statement_return -> RETURN expression .) ]


state 66

    (16) statement_if -> IF expression . COLON LBRACE statement_list RBRACE
    (17) statement_if -> IF expression . COLON LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE
    (39) expression_binaria -> expression . PLUS expression
    (40) expression_binaria -> expression . MINUS expression
    (41) expression_binaria -> expression . TIMES expression
    (42) expression_binaria -> expression . DIVIDE expression
    (43) expression_comparacion -> expression . EQ expression
    (44) expression_comparacion -> expression . GT expression
    (45) expression_comparacion -> expression . GE expression
    (46) expression_comparacion -> expression . LT expression
    (47) expression_comparacion -> expression . LE expression
    (48) expression_logica -> expression . AND expression
    (49) expression_logica -> expression . OR expression
    (59) expression_array_access -> expression . LBRACKET expression RBRACKET
    (60) expression_field_access -> expression . DOT ID

    COLON           shift and go to state 93
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    TIMES           shift and go to state 48
    DIVIDE          shift and go to state 49
    EQ              shift and go to state 50
    GT              shift and go to state 51
    GE              shift and go to state 52
    LT              shift and go to state 53
    LE              shift and go to state 54
    AND             shift and go to state 55
    OR              shift and go to state 56
    LBRACKET        shift and go to state 57
    DOT             shift and go to state 58


state 67

    (20) statement_type_def -> TYPE ID . COLON LBRACE field_list RBRACE

    COLON           shift and go to state 94


state 68

    (24) type -> base_type LBRACKET . NUMBER RBRACKET

    NUMBER          shift and go to state 95


state 69

    (50) expression_unaria -> MINUS expression .
    (39) expression_binaria -> expression . PLUS expression
    (40) expression_binaria -> expression . MINUS expression
    (41) expression_binaria -> expression . TIMES expression
    (42) expression_binaria -> expression . DIVIDE expression
    (43) expression_comparacion -> expression . EQ expression
    (44) expression_comparacion -> expression . GT expression
    (45) expression_comparacion -> expression . GE expression
    (46) expression_comparacion -> expression . LT expression
    (47) expression_comparacion -> expression . LE expression
    (48) expression_logica -> expression . AND expression
    (49) expression_logica -> expression . OR expression
    (59) expression_array_access -> expression . LBRACKET expression RBRACKET
    (60) expression_field_access -> expression . DOT ID

    ASSIGN          reduce using rule 50 (expression_unaria -> MINUS expression .)
    PLUS            reduce using rule 50 (expression_unaria -> MINUS expression .)
    MINUS           reduce using rule 50 (expression_unaria -> MINUS expression .)
    TIMES           reduce using rule 50 (expression_unaria -> MINUS expression .)
    DIVIDE          reduce using rule 50 (expression_unaria -> MINUS expression .)
    EQ              reduce using rule 50 (expression_unaria -> MINUS expression .)
    GT              reduce using rule 50 (expression_unaria -> MINUS expression .)
    GE              reduce using rule 50 (expression_unaria -> MINUS expression .)
    LT              reduce using rule 50 (expression_unaria -> MINUS expression .)
    LE              reduce using rule 50 (expression_unaria -> MINUS expression .)
    AND             reduce using rule 50 (expression_unaria -> MINUS expression .)
    OR              reduce using rule 50 (expression_unaria -> MINUS expression .)
    LBRACKET        reduce using rule 50 (expression_unaria -> MINUS expression .)
    DOT             reduce using rule 50 (expression_unaria -> MINUS expression .)
    COLON           reduce using rule 50 (expression_unaria -> MINUS expression .)
    RPAREN          reduce using rule 50 (expression_unaria -> MINUS expression .)
    WHILE           reduce using rule 50 (expression_unaria -> MINUS expression .)
    DEF             reduce using rule 50 (expression_unaria -> MINUS expression .)
    RETURN          reduce using rule 50 (expression_unaria -> MINUS expression .)
    IF              reduce using rule 50 (expression_unaria -> MINUS expression .)
    ID              reduce using rule 50 (expression_unaria -> MINUS expression .)
    TYPE            reduce using rule 50 (expression_unaria -> MINUS expression .)
    INT             reduce using rule 50 (expression_unaria -> MINUS expression .)
    FLOAT           reduce using rule 50 (expression_unaria -> MINUS expression .)
    CHAR            reduce using rule 50 (expression_unaria -> MINUS expression .)
    BOOL            reduce using rule 50 (expression_unaria -> MINUS expression .)
    NOT             reduce using rule 50 (expression_unaria -> MINUS expression .)
    LPAREN          reduce using rule 50 (expression_unaria -> MINUS expression .)
    NUMBER          reduce using rule 50 (expression_unaria -> MINUS expression .)
    FLOAT_NUMBER    reduce using rule 50 (expression_unaria -> MINUS expression .)
    TRUE            reduce using rule 50 (expression_unaria -> MINUS expression .)
    FALSE           reduce using rule 50 (expression_unaria -> MINUS expression .)
    CHARACTER       reduce using rule 50 (expression_unaria -> MINUS expression .)
    $end            reduce using rule 50 (expression_unaria -> MINUS expression .)
    RBRACE          reduce using rule 50 (expression_unaria -> MINUS expression .)
    RBRACKET        reduce using rule 50 (expression_unaria -> MINUS expression .)
    COMMA           reduce using rule 50 (expression_unaria -> MINUS expression .)

  ! PLUS            [ shift and go to state 46 ]
  ! MINUS           [ shift and go to state 47 ]
  ! TIMES           [ shift and go to state 48 ]
  ! DIVIDE          [ shift and go to state 49 ]
  ! EQ              [ shift and go to state 50 ]
  ! GT              [ shift and go to state 51 ]
  ! GE              [ shift and go to state 52 ]
  ! LT              [ shift and go to state 53 ]
  ! LE              [ shift and go to state 54 ]
  ! AND             [ shift and go to state 55 ]
  ! OR              [ shift and go to state 56 ]
  ! LBRACKET        [ shift and go to state 57 ]
  ! DOT             [ shift and go to state 58 ]


state 70

    (51) expression_unaria -> NOT expression .
    (39) expression_binaria -> expression . PLUS expression
    (40) expression_binaria -> expression . MINUS expression
    (41) expression_binaria -> expression . TIMES expression
    (42) expression_binaria -> expression . DIVIDE expression
    (43) expression_comparacion -> expression . EQ expression
    (44) expression_comparacion -> expression . GT expression
    (45) expression_comparacion -> expression . GE expression
    (46) expression_comparacion -> expression . LT expression
    (47) expression_comparacion -> expression . LE expression
    (48) expression_logica -> expression . AND expression
    (49) expression_logica -> expression . OR expression
    (59) expression_array_access -> expression . LBRACKET expression RBRACKET
    (60) expression_field_access -> expression . DOT ID

    ASSIGN          reduce using rule 51 (expression_unaria -> NOT expression .)
    AND             reduce using rule 51 (expression_unaria -> NOT expression .)
    OR              reduce using rule 51 (expression_unaria -> NOT expression .)
    LBRACKET        reduce using rule 51 (expression_unaria -> NOT expression .)
    DOT             reduce using rule 51 (expression_unaria -> NOT expression .)
    COLON           reduce using rule 51 (expression_unaria -> NOT expression .)
    RPAREN          reduce using rule 51 (expression_unaria -> NOT expression .)
    WHILE           reduce using rule 51 (expression_unaria -> NOT expression .)
    DEF             reduce using rule 51 (expression_unaria -> NOT expression .)
    RETURN          reduce using rule 51 (expression_unaria -> NOT expression .)
    IF              reduce using rule 51 (expression_unaria -> NOT expression .)
    ID              reduce using rule 51 (expression_unaria -> NOT expression .)
    TYPE            reduce using rule 51 (expression_unaria -> NOT expression .)
    INT             reduce using rule 51 (expression_unaria -> NOT expression .)
    FLOAT           reduce using rule 51 (expression_unaria -> NOT expression .)
    CHAR            reduce using rule 51 (expression_unaria -> NOT expression .)
    BOOL            reduce using rule 51 (expression_unaria -> NOT expression .)
    NOT             reduce using rule 51 (expression_unaria -> NOT expression .)
    LPAREN          reduce using rule 51 (expression_unaria -> NOT expression .)
    NUMBER          reduce using rule 51 (expression_unaria -> NOT expression .)
    FLOAT_NUMBER    reduce using rule 51 (expression_unaria -> NOT expression .)
    TRUE            reduce using rule 51 (expression_unaria -> NOT expression .)
    FALSE           reduce using rule 51 (expression_unaria -> NOT expression .)
    CHARACTER       reduce using rule 51 (expression_unaria -> NOT expression .)
    $end            reduce using rule 51 (expression_unaria -> NOT expression .)
    RBRACE          reduce using rule 51 (expression_unaria -> NOT expression .)
    RBRACKET        reduce using rule 51 (expression_unaria -> NOT expression .)
    COMMA           reduce using rule 51 (expression_unaria -> NOT expression .)
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    TIMES           shift and go to state 48
    DIVIDE          shift and go to state 49
    EQ              shift and go to state 50
    GT              shift and go to state 51
    GE              shift and go to state 52
    LT              shift and go to state 53
    LE              shift and go to state 54

  ! PLUS            [ reduce using rule 51 (expression_unaria -> NOT expression .) ]
  ! MINUS           [ reduce using rule 51 (expression_unaria -> NOT expression .) ]
  ! TIMES           [ reduce using rule 51 (expression_unaria -> NOT expression .) ]
  ! DIVIDE          [ reduce using rule 51 (expression_unaria -> NOT expression .) ]
  ! EQ              [ reduce using rule 51 (expression_unaria -> NOT expression .) ]
  ! GT              [ reduce using rule 51 (expression_unaria -> NOT expression .) ]
  ! GE              [ reduce using rule 51 (expression_unaria -> NOT expression .) ]
  ! LT              [ reduce using rule 51 (expression_unaria -> NOT expression .) ]
  ! LE              [ reduce using rule 51 (expression_unaria -> NOT expression .) ]
  ! AND             [ shift and go to state 55 ]
  ! OR              [ shift and go to state 56 ]
  ! LBRACKET        [ shift and go to state 57 ]
  ! DOT             [ shift and go to state 58 ]


state 71

    (19) statement -> WHILE expression COLON . LBRACE statement_list RBRACE

    LBRACE          shift and go to state 96


state 72

    (13) statement_assign -> expression ASSIGN expression .
    (39) expression_binaria -> expression . PLUS expression
    (40) expression_binaria -> expression . MINUS expression
    (41) expression_binaria -> expression . TIMES expression
    (42) expression_binaria -> expression . DIVIDE expression
    (43) expression_comparacion -> expression . EQ expression
    (44) expression_comparacion -> expression . GT expression
    (45) expression_comparacion -> expression . GE expression
    (46) expression_comparacion -> expression . LT expression
    (47) expression_comparacion -> expression . LE expression
    (48) expression_logica -> expression . AND expression
    (49) expression_logica -> expression . OR expression
    (59) expression_array_access -> expression . LBRACKET expression RBRACKET
    (60) expression_field_access -> expression . DOT ID

  ! shift/reduce conflict for MINUS resolved as shift
    WHILE           reduce using rule 13 (statement_assign -> expression ASSIGN expression .)
    DEF             reduce using rule 13 (statement_assign -> expression ASSIGN expression .)
    RETURN          reduce using rule 13 (statement_assign -> expression ASSIGN expression .)
    IF              reduce using rule 13 (statement_assign -> expression ASSIGN expression .)
    ID              reduce using rule 13 (statement_assign -> expression ASSIGN expression .)
    TYPE            reduce using rule 13 (statement_assign -> expression ASSIGN expression .)
    INT             reduce using rule 13 (statement_assign -> expression ASSIGN expression .)
    FLOAT           reduce using rule 13 (statement_assign -> expression ASSIGN expression .)
    CHAR            reduce using rule 13 (statement_assign -> expression ASSIGN expression .)
    BOOL            reduce using rule 13 (statement_assign -> expression ASSIGN expression .)
    NOT             reduce using rule 13 (statement_assign -> expression ASSIGN expression .)
    LPAREN          reduce using rule 13 (statement_assign -> expression ASSIGN expression .)
    NUMBER          reduce using rule 13 (statement_assign -> expression ASSIGN expression .)
    FLOAT_NUMBER    reduce using rule 13 (statement_assign -> expression ASSIGN expression .)
    TRUE            reduce using rule 13 (statement_assign -> expression ASSIGN expression .)
    FALSE           reduce using rule 13 (statement_assign -> expression ASSIGN expression .)
    CHARACTER       reduce using rule 13 (statement_assign -> expression ASSIGN expression .)
    $end            reduce using rule 13 (statement_assign -> expression ASSIGN expression .)
    RBRACE          reduce using rule 13 (statement_assign -> expression ASSIGN expression .)
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    TIMES           shift and go to state 48
    DIVIDE          shift and go to state 49
    EQ              shift and go to state 50
    GT              shift and go to state 51
    GE              shift and go to state 52
    LT              shift and go to state 53
    LE              shift and go to state 54
    AND             shift and go to state 55
    OR              shift and go to state 56
    LBRACKET        shift and go to state 57
    DOT             shift and go to state 58

  ! MINUS           [ reduce using rule 13 (statement_assign -> expression ASSIGN expression .) ]


state 73

    (39) expression_binaria -> expression PLUS expression .
    (39) expression_binaria -> expression . PLUS expression
    (40) expression_binaria -> expression . MINUS expression
    (41) expression_binaria -> expression . TIMES expression
    (42) expression_binaria -> expression . DIVIDE expression
    (43) expression_comparacion -> expression . EQ expression
    (44) expression_comparacion -> expression . GT expression
    (45) expression_comparacion -> expression . GE expression
    (46) expression_comparacion -> expression . LT expression
    (47) expression_comparacion -> expression . LE expression
    (48) expression_logica -> expression . AND expression
    (49) expression_logica -> expression . OR expression
    (59) expression_array_access -> expression . LBRACKET expression RBRACKET
    (60) expression_field_access -> expression . DOT ID

    ASSIGN          reduce using rule 39 (expression_binaria -> expression PLUS expression .)
    PLUS            reduce using rule 39 (expression_binaria -> expression PLUS expression .)
    MINUS           reduce using rule 39 (expression_binaria -> expression PLUS expression .)
    EQ              reduce using rule 39 (expression_binaria -> expression PLUS expression .)
    GT              reduce using rule 39 (expression_binaria -> expression PLUS expression .)
    GE              reduce using rule 39 (expression_binaria -> expression PLUS expression .)
    LT              reduce using rule 39 (expression_binaria -> expression PLUS expression .)
    LE              reduce using rule 39 (expression_binaria -> expression PLUS expression .)
    AND             reduce using rule 39 (expression_binaria -> expression PLUS expression .)
    OR              reduce using rule 39 (expression_binaria -> expression PLUS expression .)
    LBRACKET        reduce using rule 39 (expression_binaria -> expression PLUS expression .)
    DOT             reduce using rule 39 (expression_binaria -> expression PLUS expression .)
    COLON           reduce using rule 39 (expression_binaria -> expression PLUS expression .)
    RPAREN          reduce using rule 39 (expression_binaria -> expression PLUS expression .)
    WHILE           reduce using rule 39 (expression_binaria -> expression PLUS expression .)
    DEF             reduce using rule 39 (expression_binaria -> expression PLUS expression .)
    RETURN          reduce using rule 39 (expression_binaria -> expression PLUS expression .)
    IF              reduce using rule 39 (expression_binaria -> expression PLUS expression .)
    ID              reduce using rule 39 (expression_binaria -> expression PLUS expression .)
    TYPE            reduce using rule 39 (expression_binaria -> expression PLUS expression .)
    INT             reduce using rule 39 (expression_binaria -> expression PLUS expression .)
    FLOAT           reduce using rule 39 (expression_binaria -> expression PLUS expression .)
    CHAR            reduce using rule 39 (expression_binaria -> expression PLUS expression .)
    BOOL            reduce using rule 39 (expression_binaria -> expression PLUS expression .)
    NOT             reduce using rule 39 (expression_binaria -> expression PLUS expression .)
    LPAREN          reduce using rule 39 (expression_binaria -> expression PLUS expression .)
    NUMBER          reduce using rule 39 (expression_binaria -> expression PLUS expression .)
    FLOAT_NUMBER    reduce using rule 39 (expression_binaria -> expression PLUS expression .)
    TRUE            reduce using rule 39 (expression_binaria -> expression PLUS expression .)
    FALSE           reduce using rule 39 (expression_binaria -> expression PLUS expression .)
    CHARACTER       reduce using rule 39 (expression_binaria -> expression PLUS expression .)
    $end            reduce using rule 39 (expression_binaria -> expression PLUS expression .)
    RBRACE          reduce using rule 39 (expression_binaria -> expression PLUS expression .)
    RBRACKET        reduce using rule 39 (expression_binaria -> expression PLUS expression .)
    COMMA           reduce using rule 39 (expression_binaria -> expression PLUS expression .)
    TIMES           shift and go to state 48
    DIVIDE          shift and go to state 49

  ! TIMES           [ reduce using rule 39 (expression_binaria -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 39 (expression_binaria -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 46 ]
  ! MINUS           [ shift and go to state 47 ]
  ! EQ              [ shift and go to state 50 ]
  ! GT              [ shift and go to state 51 ]
  ! GE              [ shift and go to state 52 ]
  ! LT              [ shift and go to state 53 ]
  ! LE              [ shift and go to state 54 ]
  ! AND             [ shift and go to state 55 ]
  ! OR              [ shift and go to state 56 ]
  ! LBRACKET        [ shift and go to state 57 ]
  ! DOT             [ shift and go to state 58 ]


state 74

    (40) expression_binaria -> expression MINUS expression .
    (39) expression_binaria -> expression . PLUS expression
    (40) expression_binaria -> expression . MINUS expression
    (41) expression_binaria -> expression . TIMES expression
    (42) expression_binaria -> expression . DIVIDE expression
    (43) expression_comparacion -> expression . EQ expression
    (44) expression_comparacion -> expression . GT expression
    (45) expression_comparacion -> expression . GE expression
    (46) expression_comparacion -> expression . LT expression
    (47) expression_comparacion -> expression . LE expression
    (48) expression_logica -> expression . AND expression
    (49) expression_logica -> expression . OR expression
    (59) expression_array_access -> expression . LBRACKET expression RBRACKET
    (60) expression_field_access -> expression . DOT ID

    ASSIGN          reduce using rule 40 (expression_binaria -> expression MINUS expression .)
    PLUS            reduce using rule 40 (expression_binaria -> expression MINUS expression .)
    MINUS           reduce using rule 40 (expression_binaria -> expression MINUS expression .)
    EQ              reduce using rule 40 (expression_binaria -> expression MINUS expression .)
    GT              reduce using rule 40 (expression_binaria -> expression MINUS expression .)
    GE              reduce using rule 40 (expression_binaria -> expression MINUS expression .)
    LT              reduce using rule 40 (expression_binaria -> expression MINUS expression .)
    LE              reduce using rule 40 (expression_binaria -> expression MINUS expression .)
    AND             reduce using rule 40 (expression_binaria -> expression MINUS expression .)
    OR              reduce using rule 40 (expression_binaria -> expression MINUS expression .)
    LBRACKET        reduce using rule 40 (expression_binaria -> expression MINUS expression .)
    DOT             reduce using rule 40 (expression_binaria -> expression MINUS expression .)
    COLON           reduce using rule 40 (expression_binaria -> expression MINUS expression .)
    RPAREN          reduce using rule 40 (expression_binaria -> expression MINUS expression .)
    WHILE           reduce using rule 40 (expression_binaria -> expression MINUS expression .)
    DEF             reduce using rule 40 (expression_binaria -> expression MINUS expression .)
    RETURN          reduce using rule 40 (expression_binaria -> expression MINUS expression .)
    IF              reduce using rule 40 (expression_binaria -> expression MINUS expression .)
    ID              reduce using rule 40 (expression_binaria -> expression MINUS expression .)
    TYPE            reduce using rule 40 (expression_binaria -> expression MINUS expression .)
    INT             reduce using rule 40 (expression_binaria -> expression MINUS expression .)
    FLOAT           reduce using rule 40 (expression_binaria -> expression MINUS expression .)
    CHAR            reduce using rule 40 (expression_binaria -> expression MINUS expression .)
    BOOL            reduce using rule 40 (expression_binaria -> expression MINUS expression .)
    NOT             reduce using rule 40 (expression_binaria -> expression MINUS expression .)
    LPAREN          reduce using rule 40 (expression_binaria -> expression MINUS expression .)
    NUMBER          reduce using rule 40 (expression_binaria -> expression MINUS expression .)
    FLOAT_NUMBER    reduce using rule 40 (expression_binaria -> expression MINUS expression .)
    TRUE            reduce using rule 40 (expression_binaria -> expression MINUS expression .)
    FALSE           reduce using rule 40 (expression_binaria -> expression MINUS expression .)
    CHARACTER       reduce using rule 40 (expression_binaria -> expression MINUS expression .)
    $end            reduce using rule 40 (expression_binaria -> expression MINUS expression .)
    RBRACE          reduce using rule 40 (expression_binaria -> expression MINUS expression .)
    RBRACKET        reduce using rule 40 (expression_binaria -> expression MINUS expression .)
    COMMA           reduce using rule 40 (expression_binaria -> expression MINUS expression .)
    TIMES           shift and go to state 48
    DIVIDE          shift and go to state 49

  ! TIMES           [ reduce using rule 40 (expression_binaria -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 40 (expression_binaria -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 46 ]
  ! MINUS           [ shift and go to state 47 ]
  ! EQ              [ shift and go to state 50 ]
  ! GT              [ shift and go to state 51 ]
  ! GE              [ shift and go to state 52 ]
  ! LT              [ shift and go to state 53 ]
  ! LE              [ shift and go to state 54 ]
  ! AND             [ shift and go to state 55 ]
  ! OR              [ shift and go to state 56 ]
  ! LBRACKET        [ shift and go to state 57 ]
  ! DOT             [ shift and go to state 58 ]


state 75

    (41) expression_binaria -> expression TIMES expression .
    (39) expression_binaria -> expression . PLUS expression
    (40) expression_binaria -> expression . MINUS expression
    (41) expression_binaria -> expression . TIMES expression
    (42) expression_binaria -> expression . DIVIDE expression
    (43) expression_comparacion -> expression . EQ expression
    (44) expression_comparacion -> expression . GT expression
    (45) expression_comparacion -> expression . GE expression
    (46) expression_comparacion -> expression . LT expression
    (47) expression_comparacion -> expression . LE expression
    (48) expression_logica -> expression . AND expression
    (49) expression_logica -> expression . OR expression
    (59) expression_array_access -> expression . LBRACKET expression RBRACKET
    (60) expression_field_access -> expression . DOT ID

    ASSIGN          reduce using rule 41 (expression_binaria -> expression TIMES expression .)
    PLUS            reduce using rule 41 (expression_binaria -> expression TIMES expression .)
    MINUS           reduce using rule 41 (expression_binaria -> expression TIMES expression .)
    TIMES           reduce using rule 41 (expression_binaria -> expression TIMES expression .)
    DIVIDE          reduce using rule 41 (expression_binaria -> expression TIMES expression .)
    EQ              reduce using rule 41 (expression_binaria -> expression TIMES expression .)
    GT              reduce using rule 41 (expression_binaria -> expression TIMES expression .)
    GE              reduce using rule 41 (expression_binaria -> expression TIMES expression .)
    LT              reduce using rule 41 (expression_binaria -> expression TIMES expression .)
    LE              reduce using rule 41 (expression_binaria -> expression TIMES expression .)
    AND             reduce using rule 41 (expression_binaria -> expression TIMES expression .)
    OR              reduce using rule 41 (expression_binaria -> expression TIMES expression .)
    LBRACKET        reduce using rule 41 (expression_binaria -> expression TIMES expression .)
    DOT             reduce using rule 41 (expression_binaria -> expression TIMES expression .)
    COLON           reduce using rule 41 (expression_binaria -> expression TIMES expression .)
    RPAREN          reduce using rule 41 (expression_binaria -> expression TIMES expression .)
    WHILE           reduce using rule 41 (expression_binaria -> expression TIMES expression .)
    DEF             reduce using rule 41 (expression_binaria -> expression TIMES expression .)
    RETURN          reduce using rule 41 (expression_binaria -> expression TIMES expression .)
    IF              reduce using rule 41 (expression_binaria -> expression TIMES expression .)
    ID              reduce using rule 41 (expression_binaria -> expression TIMES expression .)
    TYPE            reduce using rule 41 (expression_binaria -> expression TIMES expression .)
    INT             reduce using rule 41 (expression_binaria -> expression TIMES expression .)
    FLOAT           reduce using rule 41 (expression_binaria -> expression TIMES expression .)
    CHAR            reduce using rule 41 (expression_binaria -> expression TIMES expression .)
    BOOL            reduce using rule 41 (expression_binaria -> expression TIMES expression .)
    NOT             reduce using rule 41 (expression_binaria -> expression TIMES expression .)
    LPAREN          reduce using rule 41 (expression_binaria -> expression TIMES expression .)
    NUMBER          reduce using rule 41 (expression_binaria -> expression TIMES expression .)
    FLOAT_NUMBER    reduce using rule 41 (expression_binaria -> expression TIMES expression .)
    TRUE            reduce using rule 41 (expression_binaria -> expression TIMES expression .)
    FALSE           reduce using rule 41 (expression_binaria -> expression TIMES expression .)
    CHARACTER       reduce using rule 41 (expression_binaria -> expression TIMES expression .)
    $end            reduce using rule 41 (expression_binaria -> expression TIMES expression .)
    RBRACE          reduce using rule 41 (expression_binaria -> expression TIMES expression .)
    RBRACKET        reduce using rule 41 (expression_binaria -> expression TIMES expression .)
    COMMA           reduce using rule 41 (expression_binaria -> expression TIMES expression .)

  ! PLUS            [ shift and go to state 46 ]
  ! MINUS           [ shift and go to state 47 ]
  ! TIMES           [ shift and go to state 48 ]
  ! DIVIDE          [ shift and go to state 49 ]
  ! EQ              [ shift and go to state 50 ]
  ! GT              [ shift and go to state 51 ]
  ! GE              [ shift and go to state 52 ]
  ! LT              [ shift and go to state 53 ]
  ! LE              [ shift and go to state 54 ]
  ! AND             [ shift and go to state 55 ]
  ! OR              [ shift and go to state 56 ]
  ! LBRACKET        [ shift and go to state 57 ]
  ! DOT             [ shift and go to state 58 ]


state 76

    (42) expression_binaria -> expression DIVIDE expression .
    (39) expression_binaria -> expression . PLUS expression
    (40) expression_binaria -> expression . MINUS expression
    (41) expression_binaria -> expression . TIMES expression
    (42) expression_binaria -> expression . DIVIDE expression
    (43) expression_comparacion -> expression . EQ expression
    (44) expression_comparacion -> expression . GT expression
    (45) expression_comparacion -> expression . GE expression
    (46) expression_comparacion -> expression . LT expression
    (47) expression_comparacion -> expression . LE expression
    (48) expression_logica -> expression . AND expression
    (49) expression_logica -> expression . OR expression
    (59) expression_array_access -> expression . LBRACKET expression RBRACKET
    (60) expression_field_access -> expression . DOT ID

    ASSIGN          reduce using rule 42 (expression_binaria -> expression DIVIDE expression .)
    PLUS            reduce using rule 42 (expression_binaria -> expression DIVIDE expression .)
    MINUS           reduce using rule 42 (expression_binaria -> expression DIVIDE expression .)
    TIMES           reduce using rule 42 (expression_binaria -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 42 (expression_binaria -> expression DIVIDE expression .)
    EQ              reduce using rule 42 (expression_binaria -> expression DIVIDE expression .)
    GT              reduce using rule 42 (expression_binaria -> expression DIVIDE expression .)
    GE              reduce using rule 42 (expression_binaria -> expression DIVIDE expression .)
    LT              reduce using rule 42 (expression_binaria -> expression DIVIDE expression .)
    LE              reduce using rule 42 (expression_binaria -> expression DIVIDE expression .)
    AND             reduce using rule 42 (expression_binaria -> expression DIVIDE expression .)
    OR              reduce using rule 42 (expression_binaria -> expression DIVIDE expression .)
    LBRACKET        reduce using rule 42 (expression_binaria -> expression DIVIDE expression .)
    DOT             reduce using rule 42 (expression_binaria -> expression DIVIDE expression .)
    COLON           reduce using rule 42 (expression_binaria -> expression DIVIDE expression .)
    RPAREN          reduce using rule 42 (expression_binaria -> expression DIVIDE expression .)
    WHILE           reduce using rule 42 (expression_binaria -> expression DIVIDE expression .)
    DEF             reduce using rule 42 (expression_binaria -> expression DIVIDE expression .)
    RETURN          reduce using rule 42 (expression_binaria -> expression DIVIDE expression .)
    IF              reduce using rule 42 (expression_binaria -> expression DIVIDE expression .)
    ID              reduce using rule 42 (expression_binaria -> expression DIVIDE expression .)
    TYPE            reduce using rule 42 (expression_binaria -> expression DIVIDE expression .)
    INT             reduce using rule 42 (expression_binaria -> expression DIVIDE expression .)
    FLOAT           reduce using rule 42 (expression_binaria -> expression DIVIDE expression .)
    CHAR            reduce using rule 42 (expression_binaria -> expression DIVIDE expression .)
    BOOL            reduce using rule 42 (expression_binaria -> expression DIVIDE expression .)
    NOT             reduce using rule 42 (expression_binaria -> expression DIVIDE expression .)
    LPAREN          reduce using rule 42 (expression_binaria -> expression DIVIDE expression .)
    NUMBER          reduce using rule 42 (expression_binaria -> expression DIVIDE expression .)
    FLOAT_NUMBER    reduce using rule 42 (expression_binaria -> expression DIVIDE expression .)
    TRUE            reduce using rule 42 (expression_binaria -> expression DIVIDE expression .)
    FALSE           reduce using rule 42 (expression_binaria -> expression DIVIDE expression .)
    CHARACTER       reduce using rule 42 (expression_binaria -> expression DIVIDE expression .)
    $end            reduce using rule 42 (expression_binaria -> expression DIVIDE expression .)
    RBRACE          reduce using rule 42 (expression_binaria -> expression DIVIDE expression .)
    RBRACKET        reduce using rule 42 (expression_binaria -> expression DIVIDE expression .)
    COMMA           reduce using rule 42 (expression_binaria -> expression DIVIDE expression .)

  ! PLUS            [ shift and go to state 46 ]
  ! MINUS           [ shift and go to state 47 ]
  ! TIMES           [ shift and go to state 48 ]
  ! DIVIDE          [ shift and go to state 49 ]
  ! EQ              [ shift and go to state 50 ]
  ! GT              [ shift and go to state 51 ]
  ! GE              [ shift and go to state 52 ]
  ! LT              [ shift and go to state 53 ]
  ! LE              [ shift and go to state 54 ]
  ! AND             [ shift and go to state 55 ]
  ! OR              [ shift and go to state 56 ]
  ! LBRACKET        [ shift and go to state 57 ]
  ! DOT             [ shift and go to state 58 ]


state 77

    (43) expression_comparacion -> expression EQ expression .
    (39) expression_binaria -> expression . PLUS expression
    (40) expression_binaria -> expression . MINUS expression
    (41) expression_binaria -> expression . TIMES expression
    (42) expression_binaria -> expression . DIVIDE expression
    (43) expression_comparacion -> expression . EQ expression
    (44) expression_comparacion -> expression . GT expression
    (45) expression_comparacion -> expression . GE expression
    (46) expression_comparacion -> expression . LT expression
    (47) expression_comparacion -> expression . LE expression
    (48) expression_logica -> expression . AND expression
    (49) expression_logica -> expression . OR expression
    (59) expression_array_access -> expression . LBRACKET expression RBRACKET
    (60) expression_field_access -> expression . DOT ID

    ASSIGN          reduce using rule 43 (expression_comparacion -> expression EQ expression .)
    EQ              reduce using rule 43 (expression_comparacion -> expression EQ expression .)
    GT              reduce using rule 43 (expression_comparacion -> expression EQ expression .)
    GE              reduce using rule 43 (expression_comparacion -> expression EQ expression .)
    LT              reduce using rule 43 (expression_comparacion -> expression EQ expression .)
    LE              reduce using rule 43 (expression_comparacion -> expression EQ expression .)
    AND             reduce using rule 43 (expression_comparacion -> expression EQ expression .)
    OR              reduce using rule 43 (expression_comparacion -> expression EQ expression .)
    LBRACKET        reduce using rule 43 (expression_comparacion -> expression EQ expression .)
    DOT             reduce using rule 43 (expression_comparacion -> expression EQ expression .)
    COLON           reduce using rule 43 (expression_comparacion -> expression EQ expression .)
    RPAREN          reduce using rule 43 (expression_comparacion -> expression EQ expression .)
    WHILE           reduce using rule 43 (expression_comparacion -> expression EQ expression .)
    DEF             reduce using rule 43 (expression_comparacion -> expression EQ expression .)
    RETURN          reduce using rule 43 (expression_comparacion -> expression EQ expression .)
    IF              reduce using rule 43 (expression_comparacion -> expression EQ expression .)
    ID              reduce using rule 43 (expression_comparacion -> expression EQ expression .)
    TYPE            reduce using rule 43 (expression_comparacion -> expression EQ expression .)
    INT             reduce using rule 43 (expression_comparacion -> expression EQ expression .)
    FLOAT           reduce using rule 43 (expression_comparacion -> expression EQ expression .)
    CHAR            reduce using rule 43 (expression_comparacion -> expression EQ expression .)
    BOOL            reduce using rule 43 (expression_comparacion -> expression EQ expression .)
    NOT             reduce using rule 43 (expression_comparacion -> expression EQ expression .)
    LPAREN          reduce using rule 43 (expression_comparacion -> expression EQ expression .)
    NUMBER          reduce using rule 43 (expression_comparacion -> expression EQ expression .)
    FLOAT_NUMBER    reduce using rule 43 (expression_comparacion -> expression EQ expression .)
    TRUE            reduce using rule 43 (expression_comparacion -> expression EQ expression .)
    FALSE           reduce using rule 43 (expression_comparacion -> expression EQ expression .)
    CHARACTER       reduce using rule 43 (expression_comparacion -> expression EQ expression .)
    $end            reduce using rule 43 (expression_comparacion -> expression EQ expression .)
    RBRACE          reduce using rule 43 (expression_comparacion -> expression EQ expression .)
    RBRACKET        reduce using rule 43 (expression_comparacion -> expression EQ expression .)
    COMMA           reduce using rule 43 (expression_comparacion -> expression EQ expression .)
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    TIMES           shift and go to state 48
    DIVIDE          shift and go to state 49

  ! PLUS            [ reduce using rule 43 (expression_comparacion -> expression EQ expression .) ]
  ! MINUS           [ reduce using rule 43 (expression_comparacion -> expression EQ expression .) ]
  ! TIMES           [ reduce using rule 43 (expression_comparacion -> expression EQ expression .) ]
  ! DIVIDE          [ reduce using rule 43 (expression_comparacion -> expression EQ expression .) ]
  ! EQ              [ shift and go to state 50 ]
  ! GT              [ shift and go to state 51 ]
  ! GE              [ shift and go to state 52 ]
  ! LT              [ shift and go to state 53 ]
  ! LE              [ shift and go to state 54 ]
  ! AND             [ shift and go to state 55 ]
  ! OR              [ shift and go to state 56 ]
  ! LBRACKET        [ shift and go to state 57 ]
  ! DOT             [ shift and go to state 58 ]


state 78

    (44) expression_comparacion -> expression GT expression .
    (39) expression_binaria -> expression . PLUS expression
    (40) expression_binaria -> expression . MINUS expression
    (41) expression_binaria -> expression . TIMES expression
    (42) expression_binaria -> expression . DIVIDE expression
    (43) expression_comparacion -> expression . EQ expression
    (44) expression_comparacion -> expression . GT expression
    (45) expression_comparacion -> expression . GE expression
    (46) expression_comparacion -> expression . LT expression
    (47) expression_comparacion -> expression . LE expression
    (48) expression_logica -> expression . AND expression
    (49) expression_logica -> expression . OR expression
    (59) expression_array_access -> expression . LBRACKET expression RBRACKET
    (60) expression_field_access -> expression . DOT ID

    ASSIGN          reduce using rule 44 (expression_comparacion -> expression GT expression .)
    EQ              reduce using rule 44 (expression_comparacion -> expression GT expression .)
    GT              reduce using rule 44 (expression_comparacion -> expression GT expression .)
    GE              reduce using rule 44 (expression_comparacion -> expression GT expression .)
    LT              reduce using rule 44 (expression_comparacion -> expression GT expression .)
    LE              reduce using rule 44 (expression_comparacion -> expression GT expression .)
    AND             reduce using rule 44 (expression_comparacion -> expression GT expression .)
    OR              reduce using rule 44 (expression_comparacion -> expression GT expression .)
    LBRACKET        reduce using rule 44 (expression_comparacion -> expression GT expression .)
    DOT             reduce using rule 44 (expression_comparacion -> expression GT expression .)
    COLON           reduce using rule 44 (expression_comparacion -> expression GT expression .)
    RPAREN          reduce using rule 44 (expression_comparacion -> expression GT expression .)
    WHILE           reduce using rule 44 (expression_comparacion -> expression GT expression .)
    DEF             reduce using rule 44 (expression_comparacion -> expression GT expression .)
    RETURN          reduce using rule 44 (expression_comparacion -> expression GT expression .)
    IF              reduce using rule 44 (expression_comparacion -> expression GT expression .)
    ID              reduce using rule 44 (expression_comparacion -> expression GT expression .)
    TYPE            reduce using rule 44 (expression_comparacion -> expression GT expression .)
    INT             reduce using rule 44 (expression_comparacion -> expression GT expression .)
    FLOAT           reduce using rule 44 (expression_comparacion -> expression GT expression .)
    CHAR            reduce using rule 44 (expression_comparacion -> expression GT expression .)
    BOOL            reduce using rule 44 (expression_comparacion -> expression GT expression .)
    NOT             reduce using rule 44 (expression_comparacion -> expression GT expression .)
    LPAREN          reduce using rule 44 (expression_comparacion -> expression GT expression .)
    NUMBER          reduce using rule 44 (expression_comparacion -> expression GT expression .)
    FLOAT_NUMBER    reduce using rule 44 (expression_comparacion -> expression GT expression .)
    TRUE            reduce using rule 44 (expression_comparacion -> expression GT expression .)
    FALSE           reduce using rule 44 (expression_comparacion -> expression GT expression .)
    CHARACTER       reduce using rule 44 (expression_comparacion -> expression GT expression .)
    $end            reduce using rule 44 (expression_comparacion -> expression GT expression .)
    RBRACE          reduce using rule 44 (expression_comparacion -> expression GT expression .)
    RBRACKET        reduce using rule 44 (expression_comparacion -> expression GT expression .)
    COMMA           reduce using rule 44 (expression_comparacion -> expression GT expression .)
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    TIMES           shift and go to state 48
    DIVIDE          shift and go to state 49

  ! PLUS            [ reduce using rule 44 (expression_comparacion -> expression GT expression .) ]
  ! MINUS           [ reduce using rule 44 (expression_comparacion -> expression GT expression .) ]
  ! TIMES           [ reduce using rule 44 (expression_comparacion -> expression GT expression .) ]
  ! DIVIDE          [ reduce using rule 44 (expression_comparacion -> expression GT expression .) ]
  ! EQ              [ shift and go to state 50 ]
  ! GT              [ shift and go to state 51 ]
  ! GE              [ shift and go to state 52 ]
  ! LT              [ shift and go to state 53 ]
  ! LE              [ shift and go to state 54 ]
  ! AND             [ shift and go to state 55 ]
  ! OR              [ shift and go to state 56 ]
  ! LBRACKET        [ shift and go to state 57 ]
  ! DOT             [ shift and go to state 58 ]


state 79

    (45) expression_comparacion -> expression GE expression .
    (39) expression_binaria -> expression . PLUS expression
    (40) expression_binaria -> expression . MINUS expression
    (41) expression_binaria -> expression . TIMES expression
    (42) expression_binaria -> expression . DIVIDE expression
    (43) expression_comparacion -> expression . EQ expression
    (44) expression_comparacion -> expression . GT expression
    (45) expression_comparacion -> expression . GE expression
    (46) expression_comparacion -> expression . LT expression
    (47) expression_comparacion -> expression . LE expression
    (48) expression_logica -> expression . AND expression
    (49) expression_logica -> expression . OR expression
    (59) expression_array_access -> expression . LBRACKET expression RBRACKET
    (60) expression_field_access -> expression . DOT ID

    ASSIGN          reduce using rule 45 (expression_comparacion -> expression GE expression .)
    EQ              reduce using rule 45 (expression_comparacion -> expression GE expression .)
    GT              reduce using rule 45 (expression_comparacion -> expression GE expression .)
    GE              reduce using rule 45 (expression_comparacion -> expression GE expression .)
    LT              reduce using rule 45 (expression_comparacion -> expression GE expression .)
    LE              reduce using rule 45 (expression_comparacion -> expression GE expression .)
    AND             reduce using rule 45 (expression_comparacion -> expression GE expression .)
    OR              reduce using rule 45 (expression_comparacion -> expression GE expression .)
    LBRACKET        reduce using rule 45 (expression_comparacion -> expression GE expression .)
    DOT             reduce using rule 45 (expression_comparacion -> expression GE expression .)
    COLON           reduce using rule 45 (expression_comparacion -> expression GE expression .)
    RPAREN          reduce using rule 45 (expression_comparacion -> expression GE expression .)
    WHILE           reduce using rule 45 (expression_comparacion -> expression GE expression .)
    DEF             reduce using rule 45 (expression_comparacion -> expression GE expression .)
    RETURN          reduce using rule 45 (expression_comparacion -> expression GE expression .)
    IF              reduce using rule 45 (expression_comparacion -> expression GE expression .)
    ID              reduce using rule 45 (expression_comparacion -> expression GE expression .)
    TYPE            reduce using rule 45 (expression_comparacion -> expression GE expression .)
    INT             reduce using rule 45 (expression_comparacion -> expression GE expression .)
    FLOAT           reduce using rule 45 (expression_comparacion -> expression GE expression .)
    CHAR            reduce using rule 45 (expression_comparacion -> expression GE expression .)
    BOOL            reduce using rule 45 (expression_comparacion -> expression GE expression .)
    NOT             reduce using rule 45 (expression_comparacion -> expression GE expression .)
    LPAREN          reduce using rule 45 (expression_comparacion -> expression GE expression .)
    NUMBER          reduce using rule 45 (expression_comparacion -> expression GE expression .)
    FLOAT_NUMBER    reduce using rule 45 (expression_comparacion -> expression GE expression .)
    TRUE            reduce using rule 45 (expression_comparacion -> expression GE expression .)
    FALSE           reduce using rule 45 (expression_comparacion -> expression GE expression .)
    CHARACTER       reduce using rule 45 (expression_comparacion -> expression GE expression .)
    $end            reduce using rule 45 (expression_comparacion -> expression GE expression .)
    RBRACE          reduce using rule 45 (expression_comparacion -> expression GE expression .)
    RBRACKET        reduce using rule 45 (expression_comparacion -> expression GE expression .)
    COMMA           reduce using rule 45 (expression_comparacion -> expression GE expression .)
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    TIMES           shift and go to state 48
    DIVIDE          shift and go to state 49

  ! PLUS            [ reduce using rule 45 (expression_comparacion -> expression GE expression .) ]
  ! MINUS           [ reduce using rule 45 (expression_comparacion -> expression GE expression .) ]
  ! TIMES           [ reduce using rule 45 (expression_comparacion -> expression GE expression .) ]
  ! DIVIDE          [ reduce using rule 45 (expression_comparacion -> expression GE expression .) ]
  ! EQ              [ shift and go to state 50 ]
  ! GT              [ shift and go to state 51 ]
  ! GE              [ shift and go to state 52 ]
  ! LT              [ shift and go to state 53 ]
  ! LE              [ shift and go to state 54 ]
  ! AND             [ shift and go to state 55 ]
  ! OR              [ shift and go to state 56 ]
  ! LBRACKET        [ shift and go to state 57 ]
  ! DOT             [ shift and go to state 58 ]


state 80

    (46) expression_comparacion -> expression LT expression .
    (39) expression_binaria -> expression . PLUS expression
    (40) expression_binaria -> expression . MINUS expression
    (41) expression_binaria -> expression . TIMES expression
    (42) expression_binaria -> expression . DIVIDE expression
    (43) expression_comparacion -> expression . EQ expression
    (44) expression_comparacion -> expression . GT expression
    (45) expression_comparacion -> expression . GE expression
    (46) expression_comparacion -> expression . LT expression
    (47) expression_comparacion -> expression . LE expression
    (48) expression_logica -> expression . AND expression
    (49) expression_logica -> expression . OR expression
    (59) expression_array_access -> expression . LBRACKET expression RBRACKET
    (60) expression_field_access -> expression . DOT ID

    ASSIGN          reduce using rule 46 (expression_comparacion -> expression LT expression .)
    EQ              reduce using rule 46 (expression_comparacion -> expression LT expression .)
    GT              reduce using rule 46 (expression_comparacion -> expression LT expression .)
    GE              reduce using rule 46 (expression_comparacion -> expression LT expression .)
    LT              reduce using rule 46 (expression_comparacion -> expression LT expression .)
    LE              reduce using rule 46 (expression_comparacion -> expression LT expression .)
    AND             reduce using rule 46 (expression_comparacion -> expression LT expression .)
    OR              reduce using rule 46 (expression_comparacion -> expression LT expression .)
    LBRACKET        reduce using rule 46 (expression_comparacion -> expression LT expression .)
    DOT             reduce using rule 46 (expression_comparacion -> expression LT expression .)
    COLON           reduce using rule 46 (expression_comparacion -> expression LT expression .)
    RPAREN          reduce using rule 46 (expression_comparacion -> expression LT expression .)
    WHILE           reduce using rule 46 (expression_comparacion -> expression LT expression .)
    DEF             reduce using rule 46 (expression_comparacion -> expression LT expression .)
    RETURN          reduce using rule 46 (expression_comparacion -> expression LT expression .)
    IF              reduce using rule 46 (expression_comparacion -> expression LT expression .)
    ID              reduce using rule 46 (expression_comparacion -> expression LT expression .)
    TYPE            reduce using rule 46 (expression_comparacion -> expression LT expression .)
    INT             reduce using rule 46 (expression_comparacion -> expression LT expression .)
    FLOAT           reduce using rule 46 (expression_comparacion -> expression LT expression .)
    CHAR            reduce using rule 46 (expression_comparacion -> expression LT expression .)
    BOOL            reduce using rule 46 (expression_comparacion -> expression LT expression .)
    NOT             reduce using rule 46 (expression_comparacion -> expression LT expression .)
    LPAREN          reduce using rule 46 (expression_comparacion -> expression LT expression .)
    NUMBER          reduce using rule 46 (expression_comparacion -> expression LT expression .)
    FLOAT_NUMBER    reduce using rule 46 (expression_comparacion -> expression LT expression .)
    TRUE            reduce using rule 46 (expression_comparacion -> expression LT expression .)
    FALSE           reduce using rule 46 (expression_comparacion -> expression LT expression .)
    CHARACTER       reduce using rule 46 (expression_comparacion -> expression LT expression .)
    $end            reduce using rule 46 (expression_comparacion -> expression LT expression .)
    RBRACE          reduce using rule 46 (expression_comparacion -> expression LT expression .)
    RBRACKET        reduce using rule 46 (expression_comparacion -> expression LT expression .)
    COMMA           reduce using rule 46 (expression_comparacion -> expression LT expression .)
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    TIMES           shift and go to state 48
    DIVIDE          shift and go to state 49

  ! PLUS            [ reduce using rule 46 (expression_comparacion -> expression LT expression .) ]
  ! MINUS           [ reduce using rule 46 (expression_comparacion -> expression LT expression .) ]
  ! TIMES           [ reduce using rule 46 (expression_comparacion -> expression LT expression .) ]
  ! DIVIDE          [ reduce using rule 46 (expression_comparacion -> expression LT expression .) ]
  ! EQ              [ shift and go to state 50 ]
  ! GT              [ shift and go to state 51 ]
  ! GE              [ shift and go to state 52 ]
  ! LT              [ shift and go to state 53 ]
  ! LE              [ shift and go to state 54 ]
  ! AND             [ shift and go to state 55 ]
  ! OR              [ shift and go to state 56 ]
  ! LBRACKET        [ shift and go to state 57 ]
  ! DOT             [ shift and go to state 58 ]


state 81

    (47) expression_comparacion -> expression LE expression .
    (39) expression_binaria -> expression . PLUS expression
    (40) expression_binaria -> expression . MINUS expression
    (41) expression_binaria -> expression . TIMES expression
    (42) expression_binaria -> expression . DIVIDE expression
    (43) expression_comparacion -> expression . EQ expression
    (44) expression_comparacion -> expression . GT expression
    (45) expression_comparacion -> expression . GE expression
    (46) expression_comparacion -> expression . LT expression
    (47) expression_comparacion -> expression . LE expression
    (48) expression_logica -> expression . AND expression
    (49) expression_logica -> expression . OR expression
    (59) expression_array_access -> expression . LBRACKET expression RBRACKET
    (60) expression_field_access -> expression . DOT ID

    ASSIGN          reduce using rule 47 (expression_comparacion -> expression LE expression .)
    EQ              reduce using rule 47 (expression_comparacion -> expression LE expression .)
    GT              reduce using rule 47 (expression_comparacion -> expression LE expression .)
    GE              reduce using rule 47 (expression_comparacion -> expression LE expression .)
    LT              reduce using rule 47 (expression_comparacion -> expression LE expression .)
    LE              reduce using rule 47 (expression_comparacion -> expression LE expression .)
    AND             reduce using rule 47 (expression_comparacion -> expression LE expression .)
    OR              reduce using rule 47 (expression_comparacion -> expression LE expression .)
    LBRACKET        reduce using rule 47 (expression_comparacion -> expression LE expression .)
    DOT             reduce using rule 47 (expression_comparacion -> expression LE expression .)
    COLON           reduce using rule 47 (expression_comparacion -> expression LE expression .)
    RPAREN          reduce using rule 47 (expression_comparacion -> expression LE expression .)
    WHILE           reduce using rule 47 (expression_comparacion -> expression LE expression .)
    DEF             reduce using rule 47 (expression_comparacion -> expression LE expression .)
    RETURN          reduce using rule 47 (expression_comparacion -> expression LE expression .)
    IF              reduce using rule 47 (expression_comparacion -> expression LE expression .)
    ID              reduce using rule 47 (expression_comparacion -> expression LE expression .)
    TYPE            reduce using rule 47 (expression_comparacion -> expression LE expression .)
    INT             reduce using rule 47 (expression_comparacion -> expression LE expression .)
    FLOAT           reduce using rule 47 (expression_comparacion -> expression LE expression .)
    CHAR            reduce using rule 47 (expression_comparacion -> expression LE expression .)
    BOOL            reduce using rule 47 (expression_comparacion -> expression LE expression .)
    NOT             reduce using rule 47 (expression_comparacion -> expression LE expression .)
    LPAREN          reduce using rule 47 (expression_comparacion -> expression LE expression .)
    NUMBER          reduce using rule 47 (expression_comparacion -> expression LE expression .)
    FLOAT_NUMBER    reduce using rule 47 (expression_comparacion -> expression LE expression .)
    TRUE            reduce using rule 47 (expression_comparacion -> expression LE expression .)
    FALSE           reduce using rule 47 (expression_comparacion -> expression LE expression .)
    CHARACTER       reduce using rule 47 (expression_comparacion -> expression LE expression .)
    $end            reduce using rule 47 (expression_comparacion -> expression LE expression .)
    RBRACE          reduce using rule 47 (expression_comparacion -> expression LE expression .)
    RBRACKET        reduce using rule 47 (expression_comparacion -> expression LE expression .)
    COMMA           reduce using rule 47 (expression_comparacion -> expression LE expression .)
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    TIMES           shift and go to state 48
    DIVIDE          shift and go to state 49

  ! PLUS            [ reduce using rule 47 (expression_comparacion -> expression LE expression .) ]
  ! MINUS           [ reduce using rule 47 (expression_comparacion -> expression LE expression .) ]
  ! TIMES           [ reduce using rule 47 (expression_comparacion -> expression LE expression .) ]
  ! DIVIDE          [ reduce using rule 47 (expression_comparacion -> expression LE expression .) ]
  ! EQ              [ shift and go to state 50 ]
  ! GT              [ shift and go to state 51 ]
  ! GE              [ shift and go to state 52 ]
  ! LT              [ shift and go to state 53 ]
  ! LE              [ shift and go to state 54 ]
  ! AND             [ shift and go to state 55 ]
  ! OR              [ shift and go to state 56 ]
  ! LBRACKET        [ shift and go to state 57 ]
  ! DOT             [ shift and go to state 58 ]


state 82

    (48) expression_logica -> expression AND expression .
    (39) expression_binaria -> expression . PLUS expression
    (40) expression_binaria -> expression . MINUS expression
    (41) expression_binaria -> expression . TIMES expression
    (42) expression_binaria -> expression . DIVIDE expression
    (43) expression_comparacion -> expression . EQ expression
    (44) expression_comparacion -> expression . GT expression
    (45) expression_comparacion -> expression . GE expression
    (46) expression_comparacion -> expression . LT expression
    (47) expression_comparacion -> expression . LE expression
    (48) expression_logica -> expression . AND expression
    (49) expression_logica -> expression . OR expression
    (59) expression_array_access -> expression . LBRACKET expression RBRACKET
    (60) expression_field_access -> expression . DOT ID

    ASSIGN          reduce using rule 48 (expression_logica -> expression AND expression .)
    AND             reduce using rule 48 (expression_logica -> expression AND expression .)
    OR              reduce using rule 48 (expression_logica -> expression AND expression .)
    LBRACKET        reduce using rule 48 (expression_logica -> expression AND expression .)
    DOT             reduce using rule 48 (expression_logica -> expression AND expression .)
    COLON           reduce using rule 48 (expression_logica -> expression AND expression .)
    RPAREN          reduce using rule 48 (expression_logica -> expression AND expression .)
    WHILE           reduce using rule 48 (expression_logica -> expression AND expression .)
    DEF             reduce using rule 48 (expression_logica -> expression AND expression .)
    RETURN          reduce using rule 48 (expression_logica -> expression AND expression .)
    IF              reduce using rule 48 (expression_logica -> expression AND expression .)
    ID              reduce using rule 48 (expression_logica -> expression AND expression .)
    TYPE            reduce using rule 48 (expression_logica -> expression AND expression .)
    INT             reduce using rule 48 (expression_logica -> expression AND expression .)
    FLOAT           reduce using rule 48 (expression_logica -> expression AND expression .)
    CHAR            reduce using rule 48 (expression_logica -> expression AND expression .)
    BOOL            reduce using rule 48 (expression_logica -> expression AND expression .)
    NOT             reduce using rule 48 (expression_logica -> expression AND expression .)
    LPAREN          reduce using rule 48 (expression_logica -> expression AND expression .)
    NUMBER          reduce using rule 48 (expression_logica -> expression AND expression .)
    FLOAT_NUMBER    reduce using rule 48 (expression_logica -> expression AND expression .)
    TRUE            reduce using rule 48 (expression_logica -> expression AND expression .)
    FALSE           reduce using rule 48 (expression_logica -> expression AND expression .)
    CHARACTER       reduce using rule 48 (expression_logica -> expression AND expression .)
    $end            reduce using rule 48 (expression_logica -> expression AND expression .)
    RBRACE          reduce using rule 48 (expression_logica -> expression AND expression .)
    RBRACKET        reduce using rule 48 (expression_logica -> expression AND expression .)
    COMMA           reduce using rule 48 (expression_logica -> expression AND expression .)
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    TIMES           shift and go to state 48
    DIVIDE          shift and go to state 49
    EQ              shift and go to state 50
    GT              shift and go to state 51
    GE              shift and go to state 52
    LT              shift and go to state 53
    LE              shift and go to state 54

  ! PLUS            [ reduce using rule 48 (expression_logica -> expression AND expression .) ]
  ! MINUS           [ reduce using rule 48 (expression_logica -> expression AND expression .) ]
  ! TIMES           [ reduce using rule 48 (expression_logica -> expression AND expression .) ]
  ! DIVIDE          [ reduce using rule 48 (expression_logica -> expression AND expression .) ]
  ! EQ              [ reduce using rule 48 (expression_logica -> expression AND expression .) ]
  ! GT              [ reduce using rule 48 (expression_logica -> expression AND expression .) ]
  ! GE              [ reduce using rule 48 (expression_logica -> expression AND expression .) ]
  ! LT              [ reduce using rule 48 (expression_logica -> expression AND expression .) ]
  ! LE              [ reduce using rule 48 (expression_logica -> expression AND expression .) ]
  ! AND             [ shift and go to state 55 ]
  ! OR              [ shift and go to state 56 ]
  ! LBRACKET        [ shift and go to state 57 ]
  ! DOT             [ shift and go to state 58 ]


state 83

    (49) expression_logica -> expression OR expression .
    (39) expression_binaria -> expression . PLUS expression
    (40) expression_binaria -> expression . MINUS expression
    (41) expression_binaria -> expression . TIMES expression
    (42) expression_binaria -> expression . DIVIDE expression
    (43) expression_comparacion -> expression . EQ expression
    (44) expression_comparacion -> expression . GT expression
    (45) expression_comparacion -> expression . GE expression
    (46) expression_comparacion -> expression . LT expression
    (47) expression_comparacion -> expression . LE expression
    (48) expression_logica -> expression . AND expression
    (49) expression_logica -> expression . OR expression
    (59) expression_array_access -> expression . LBRACKET expression RBRACKET
    (60) expression_field_access -> expression . DOT ID

    ASSIGN          reduce using rule 49 (expression_logica -> expression OR expression .)
    OR              reduce using rule 49 (expression_logica -> expression OR expression .)
    LBRACKET        reduce using rule 49 (expression_logica -> expression OR expression .)
    DOT             reduce using rule 49 (expression_logica -> expression OR expression .)
    COLON           reduce using rule 49 (expression_logica -> expression OR expression .)
    RPAREN          reduce using rule 49 (expression_logica -> expression OR expression .)
    WHILE           reduce using rule 49 (expression_logica -> expression OR expression .)
    DEF             reduce using rule 49 (expression_logica -> expression OR expression .)
    RETURN          reduce using rule 49 (expression_logica -> expression OR expression .)
    IF              reduce using rule 49 (expression_logica -> expression OR expression .)
    ID              reduce using rule 49 (expression_logica -> expression OR expression .)
    TYPE            reduce using rule 49 (expression_logica -> expression OR expression .)
    INT             reduce using rule 49 (expression_logica -> expression OR expression .)
    FLOAT           reduce using rule 49 (expression_logica -> expression OR expression .)
    CHAR            reduce using rule 49 (expression_logica -> expression OR expression .)
    BOOL            reduce using rule 49 (expression_logica -> expression OR expression .)
    NOT             reduce using rule 49 (expression_logica -> expression OR expression .)
    LPAREN          reduce using rule 49 (expression_logica -> expression OR expression .)
    NUMBER          reduce using rule 49 (expression_logica -> expression OR expression .)
    FLOAT_NUMBER    reduce using rule 49 (expression_logica -> expression OR expression .)
    TRUE            reduce using rule 49 (expression_logica -> expression OR expression .)
    FALSE           reduce using rule 49 (expression_logica -> expression OR expression .)
    CHARACTER       reduce using rule 49 (expression_logica -> expression OR expression .)
    $end            reduce using rule 49 (expression_logica -> expression OR expression .)
    RBRACE          reduce using rule 49 (expression_logica -> expression OR expression .)
    RBRACKET        reduce using rule 49 (expression_logica -> expression OR expression .)
    COMMA           reduce using rule 49 (expression_logica -> expression OR expression .)
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    TIMES           shift and go to state 48
    DIVIDE          shift and go to state 49
    EQ              shift and go to state 50
    GT              shift and go to state 51
    GE              shift and go to state 52
    LT              shift and go to state 53
    LE              shift and go to state 54
    AND             shift and go to state 55

  ! PLUS            [ reduce using rule 49 (expression_logica -> expression OR expression .) ]
  ! MINUS           [ reduce using rule 49 (expression_logica -> expression OR expression .) ]
  ! TIMES           [ reduce using rule 49 (expression_logica -> expression OR expression .) ]
  ! DIVIDE          [ reduce using rule 49 (expression_logica -> expression OR expression .) ]
  ! EQ              [ reduce using rule 49 (expression_logica -> expression OR expression .) ]
  ! GT              [ reduce using rule 49 (expression_logica -> expression OR expression .) ]
  ! GE              [ reduce using rule 49 (expression_logica -> expression OR expression .) ]
  ! LT              [ reduce using rule 49 (expression_logica -> expression OR expression .) ]
  ! LE              [ reduce using rule 49 (expression_logica -> expression OR expression .) ]
  ! AND             [ reduce using rule 49 (expression_logica -> expression OR expression .) ]
  ! OR              [ shift and go to state 56 ]
  ! LBRACKET        [ shift and go to state 57 ]
  ! DOT             [ shift and go to state 58 ]


state 84

    (59) expression_array_access -> expression LBRACKET expression . RBRACKET
    (39) expression_binaria -> expression . PLUS expression
    (40) expression_binaria -> expression . MINUS expression
    (41) expression_binaria -> expression . TIMES expression
    (42) expression_binaria -> expression . DIVIDE expression
    (43) expression_comparacion -> expression . EQ expression
    (44) expression_comparacion -> expression . GT expression
    (45) expression_comparacion -> expression . GE expression
    (46) expression_comparacion -> expression . LT expression
    (47) expression_comparacion -> expression . LE expression
    (48) expression_logica -> expression . AND expression
    (49) expression_logica -> expression . OR expression
    (59) expression_array_access -> expression . LBRACKET expression RBRACKET
    (60) expression_field_access -> expression . DOT ID

    RBRACKET        shift and go to state 97
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    TIMES           shift and go to state 48
    DIVIDE          shift and go to state 49
    EQ              shift and go to state 50
    GT              shift and go to state 51
    GE              shift and go to state 52
    LT              shift and go to state 53
    LE              shift and go to state 54
    AND             shift and go to state 55
    OR              shift and go to state 56
    LBRACKET        shift and go to state 57
    DOT             shift and go to state 58


state 85

    (60) expression_field_access -> expression DOT ID .

    ASSIGN          reduce using rule 60 (expression_field_access -> expression DOT ID .)
    PLUS            reduce using rule 60 (expression_field_access -> expression DOT ID .)
    MINUS           reduce using rule 60 (expression_field_access -> expression DOT ID .)
    TIMES           reduce using rule 60 (expression_field_access -> expression DOT ID .)
    DIVIDE          reduce using rule 60 (expression_field_access -> expression DOT ID .)
    EQ              reduce using rule 60 (expression_field_access -> expression DOT ID .)
    GT              reduce using rule 60 (expression_field_access -> expression DOT ID .)
    GE              reduce using rule 60 (expression_field_access -> expression DOT ID .)
    LT              reduce using rule 60 (expression_field_access -> expression DOT ID .)
    LE              reduce using rule 60 (expression_field_access -> expression DOT ID .)
    AND             reduce using rule 60 (expression_field_access -> expression DOT ID .)
    OR              reduce using rule 60 (expression_field_access -> expression DOT ID .)
    LBRACKET        reduce using rule 60 (expression_field_access -> expression DOT ID .)
    DOT             reduce using rule 60 (expression_field_access -> expression DOT ID .)
    COLON           reduce using rule 60 (expression_field_access -> expression DOT ID .)
    RPAREN          reduce using rule 60 (expression_field_access -> expression DOT ID .)
    WHILE           reduce using rule 60 (expression_field_access -> expression DOT ID .)
    DEF             reduce using rule 60 (expression_field_access -> expression DOT ID .)
    RETURN          reduce using rule 60 (expression_field_access -> expression DOT ID .)
    IF              reduce using rule 60 (expression_field_access -> expression DOT ID .)
    ID              reduce using rule 60 (expression_field_access -> expression DOT ID .)
    TYPE            reduce using rule 60 (expression_field_access -> expression DOT ID .)
    INT             reduce using rule 60 (expression_field_access -> expression DOT ID .)
    FLOAT           reduce using rule 60 (expression_field_access -> expression DOT ID .)
    CHAR            reduce using rule 60 (expression_field_access -> expression DOT ID .)
    BOOL            reduce using rule 60 (expression_field_access -> expression DOT ID .)
    NOT             reduce using rule 60 (expression_field_access -> expression DOT ID .)
    LPAREN          reduce using rule 60 (expression_field_access -> expression DOT ID .)
    NUMBER          reduce using rule 60 (expression_field_access -> expression DOT ID .)
    FLOAT_NUMBER    reduce using rule 60 (expression_field_access -> expression DOT ID .)
    TRUE            reduce using rule 60 (expression_field_access -> expression DOT ID .)
    FALSE           reduce using rule 60 (expression_field_access -> expression DOT ID .)
    CHARACTER       reduce using rule 60 (expression_field_access -> expression DOT ID .)
    $end            reduce using rule 60 (expression_field_access -> expression DOT ID .)
    RBRACE          reduce using rule 60 (expression_field_access -> expression DOT ID .)
    RBRACKET        reduce using rule 60 (expression_field_access -> expression DOT ID .)
    COMMA           reduce using rule 60 (expression_field_access -> expression DOT ID .)


state 86

    (12) statement_declaration -> type id_list ASSIGN . expression
    (29) expression -> . expression_binaria
    (30) expression -> . expression_comparacion
    (31) expression -> . expression_logica
    (32) expression -> . expression_unaria
    (33) expression -> . expression_group
    (34) expression -> . expression_number
    (35) expression -> . expression_var
    (36) expression -> . expression_array_access
    (37) expression -> . expression_field_access
    (38) expression -> . expression_func_call
    (39) expression_binaria -> . expression PLUS expression
    (40) expression_binaria -> . expression MINUS expression
    (41) expression_binaria -> . expression TIMES expression
    (42) expression_binaria -> . expression DIVIDE expression
    (43) expression_comparacion -> . expression EQ expression
    (44) expression_comparacion -> . expression GT expression
    (45) expression_comparacion -> . expression GE expression
    (46) expression_comparacion -> . expression LT expression
    (47) expression_comparacion -> . expression LE expression
    (48) expression_logica -> . expression AND expression
    (49) expression_logica -> . expression OR expression
    (50) expression_unaria -> . MINUS expression
    (51) expression_unaria -> . NOT expression
    (52) expression_group -> . LPAREN expression RPAREN
    (53) expression_number -> . NUMBER
    (54) expression_number -> . FLOAT_NUMBER
    (55) expression_number -> . TRUE
    (56) expression_number -> . FALSE
    (57) expression_number -> . CHARACTER
    (58) expression_var -> . ID
    (59) expression_array_access -> . expression LBRACKET expression RBRACKET
    (60) expression_field_access -> . expression DOT ID
    (61) expression_func_call -> . ID LPAREN arg_list RPAREN

    MINUS           shift and go to state 36
    NOT             shift and go to state 37
    LPAREN          shift and go to state 16
    NUMBER          shift and go to state 21
    FLOAT_NUMBER    shift and go to state 38
    TRUE            shift and go to state 39
    FALSE           shift and go to state 40
    CHARACTER       shift and go to state 41
    ID              shift and go to state 44

    expression                     shift and go to state 98
    expression_binaria             shift and go to state 22
    expression_comparacion         shift and go to state 23
    expression_logica              shift and go to state 24
    expression_unaria              shift and go to state 25
    expression_group               shift and go to state 26
    expression_number              shift and go to state 27
    expression_var                 shift and go to state 28
    expression_array_access        shift and go to state 29
    expression_field_access        shift and go to state 30
    expression_func_call           shift and go to state 31

state 87

    (22) id_list -> id_list COMMA . ID

    ID              shift and go to state 99


state 88

    (14) statement_function -> DEF type ID . LPAREN param_list RPAREN COLON LBRACE statement_list RBRACE

    LPAREN          shift and go to state 100


state 89

    (61) expression_func_call -> ID LPAREN arg_list . RPAREN
    (66) arg_list -> arg_list . COMMA expression

    RPAREN          shift and go to state 101
    COMMA           shift and go to state 102


state 90

    (65) arg_list -> expression .
    (39) expression_binaria -> expression . PLUS expression
    (40) expression_binaria -> expression . MINUS expression
    (41) expression_binaria -> expression . TIMES expression
    (42) expression_binaria -> expression . DIVIDE expression
    (43) expression_comparacion -> expression . EQ expression
    (44) expression_comparacion -> expression . GT expression
    (45) expression_comparacion -> expression . GE expression
    (46) expression_comparacion -> expression . LT expression
    (47) expression_comparacion -> expression . LE expression
    (48) expression_logica -> expression . AND expression
    (49) expression_logica -> expression . OR expression
    (59) expression_array_access -> expression . LBRACKET expression RBRACKET
    (60) expression_field_access -> expression . DOT ID

    RPAREN          reduce using rule 65 (arg_list -> expression .)
    COMMA           reduce using rule 65 (arg_list -> expression .)
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    TIMES           shift and go to state 48
    DIVIDE          shift and go to state 49
    EQ              shift and go to state 50
    GT              shift and go to state 51
    GE              shift and go to state 52
    LT              shift and go to state 53
    LE              shift and go to state 54
    AND             shift and go to state 55
    OR              shift and go to state 56
    LBRACKET        shift and go to state 57
    DOT             shift and go to state 58


state 91

    (67) arg_list -> empty .

    RPAREN          reduce using rule 67 (arg_list -> empty .)
    COMMA           reduce using rule 67 (arg_list -> empty .)


state 92

    (52) expression_group -> LPAREN expression RPAREN .

    ASSIGN          reduce using rule 52 (expression_group -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 52 (expression_group -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 52 (expression_group -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 52 (expression_group -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 52 (expression_group -> LPAREN expression RPAREN .)
    EQ              reduce using rule 52 (expression_group -> LPAREN expression RPAREN .)
    GT              reduce using rule 52 (expression_group -> LPAREN expression RPAREN .)
    GE              reduce using rule 52 (expression_group -> LPAREN expression RPAREN .)
    LT              reduce using rule 52 (expression_group -> LPAREN expression RPAREN .)
    LE              reduce using rule 52 (expression_group -> LPAREN expression RPAREN .)
    AND             reduce using rule 52 (expression_group -> LPAREN expression RPAREN .)
    OR              reduce using rule 52 (expression_group -> LPAREN expression RPAREN .)
    LBRACKET        reduce using rule 52 (expression_group -> LPAREN expression RPAREN .)
    DOT             reduce using rule 52 (expression_group -> LPAREN expression RPAREN .)
    COLON           reduce using rule 52 (expression_group -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 52 (expression_group -> LPAREN expression RPAREN .)
    WHILE           reduce using rule 52 (expression_group -> LPAREN expression RPAREN .)
    DEF             reduce using rule 52 (expression_group -> LPAREN expression RPAREN .)
    RETURN          reduce using rule 52 (expression_group -> LPAREN expression RPAREN .)
    IF              reduce using rule 52 (expression_group -> LPAREN expression RPAREN .)
    ID              reduce using rule 52 (expression_group -> LPAREN expression RPAREN .)
    TYPE            reduce using rule 52 (expression_group -> LPAREN expression RPAREN .)
    INT             reduce using rule 52 (expression_group -> LPAREN expression RPAREN .)
    FLOAT           reduce using rule 52 (expression_group -> LPAREN expression RPAREN .)
    CHAR            reduce using rule 52 (expression_group -> LPAREN expression RPAREN .)
    BOOL            reduce using rule 52 (expression_group -> LPAREN expression RPAREN .)
    NOT             reduce using rule 52 (expression_group -> LPAREN expression RPAREN .)
    LPAREN          reduce using rule 52 (expression_group -> LPAREN expression RPAREN .)
    NUMBER          reduce using rule 52 (expression_group -> LPAREN expression RPAREN .)
    FLOAT_NUMBER    reduce using rule 52 (expression_group -> LPAREN expression RPAREN .)
    TRUE            reduce using rule 52 (expression_group -> LPAREN expression RPAREN .)
    FALSE           reduce using rule 52 (expression_group -> LPAREN expression RPAREN .)
    CHARACTER       reduce using rule 52 (expression_group -> LPAREN expression RPAREN .)
    $end            reduce using rule 52 (expression_group -> LPAREN expression RPAREN .)
    RBRACE          reduce using rule 52 (expression_group -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 52 (expression_group -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 52 (expression_group -> LPAREN expression RPAREN .)


state 93

    (16) statement_if -> IF expression COLON . LBRACE statement_list RBRACE
    (17) statement_if -> IF expression COLON . LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE

    LBRACE          shift and go to state 103


state 94

    (20) statement_type_def -> TYPE ID COLON . LBRACE field_list RBRACE

    LBRACE          shift and go to state 104


state 95

    (24) type -> base_type LBRACKET NUMBER . RBRACKET

    RBRACKET        shift and go to state 105


state 96

    (19) statement -> WHILE expression COLON LBRACE . statement_list RBRACE
    (2) statement_list -> . statement
    (3) statement_list -> . statement_list statement
    (4) statement -> . statement_declaration
    (5) statement -> . statement_assign
    (6) statement -> . statement_function
    (7) statement -> . statement_return
    (8) statement -> . statement_if
    (9) statement -> . statement_instance
    (10) statement -> . statement_type_def
    (19) statement -> . WHILE expression COLON LBRACE statement_list RBRACE
    (11) statement_declaration -> . type id_list
    (12) statement_declaration -> . type id_list ASSIGN expression
    (13) statement_assign -> . expression ASSIGN expression
    (14) statement_function -> . DEF type ID LPAREN param_list RPAREN COLON LBRACE statement_list RBRACE
    (15) statement_return -> . RETURN expression
    (16) statement_if -> . IF expression COLON LBRACE statement_list RBRACE
    (17) statement_if -> . IF expression COLON LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE
    (18) statement_instance -> . ID ID
    (20) statement_type_def -> . TYPE ID COLON LBRACE field_list RBRACE
    (23) type -> . base_type
    (24) type -> . base_type LBRACKET NUMBER RBRACKET
    (29) expression -> . expression_binaria
    (30) expression -> . expression_comparacion
    (31) expression -> . expression_logica
    (32) expression -> . expression_unaria
    (33) expression -> . expression_group
    (34) expression -> . expression_number
    (35) expression -> . expression_var
    (36) expression -> . expression_array_access
    (37) expression -> . expression_field_access
    (38) expression -> . expression_func_call
    (25) base_type -> . INT
    (26) base_type -> . FLOAT
    (27) base_type -> . CHAR
    (28) base_type -> . BOOL
    (39) expression_binaria -> . expression PLUS expression
    (40) expression_binaria -> . expression MINUS expression
    (41) expression_binaria -> . expression TIMES expression
    (42) expression_binaria -> . expression DIVIDE expression
    (43) expression_comparacion -> . expression EQ expression
    (44) expression_comparacion -> . expression GT expression
    (45) expression_comparacion -> . expression GE expression
    (46) expression_comparacion -> . expression LT expression
    (47) expression_comparacion -> . expression LE expression
    (48) expression_logica -> . expression AND expression
    (49) expression_logica -> . expression OR expression
    (50) expression_unaria -> . MINUS expression
    (51) expression_unaria -> . NOT expression
    (52) expression_group -> . LPAREN expression RPAREN
    (53) expression_number -> . NUMBER
    (54) expression_number -> . FLOAT_NUMBER
    (55) expression_number -> . TRUE
    (56) expression_number -> . FALSE
    (57) expression_number -> . CHARACTER
    (58) expression_var -> . ID
    (59) expression_array_access -> . expression LBRACKET expression RBRACKET
    (60) expression_field_access -> . expression DOT ID
    (61) expression_func_call -> . ID LPAREN arg_list RPAREN

    WHILE           shift and go to state 11
    DEF             shift and go to state 14
    RETURN          shift and go to state 17
    IF              shift and go to state 18
    ID              shift and go to state 15
    TYPE            shift and go to state 19
    INT             shift and go to state 32
    FLOAT           shift and go to state 33
    CHAR            shift and go to state 34
    BOOL            shift and go to state 35
    MINUS           shift and go to state 36
    NOT             shift and go to state 37
    LPAREN          shift and go to state 16
    NUMBER          shift and go to state 21
    FLOAT_NUMBER    shift and go to state 38
    TRUE            shift and go to state 39
    FALSE           shift and go to state 40
    CHARACTER       shift and go to state 41

    expression                     shift and go to state 12
    statement_list                 shift and go to state 106
    statement                      shift and go to state 3
    statement_declaration          shift and go to state 4
    statement_assign               shift and go to state 5
    statement_function             shift and go to state 6
    statement_return               shift and go to state 7
    statement_if                   shift and go to state 8
    statement_instance             shift and go to state 9
    statement_type_def             shift and go to state 10
    type                           shift and go to state 13
    base_type                      shift and go to state 20
    expression_binaria             shift and go to state 22
    expression_comparacion         shift and go to state 23
    expression_logica              shift and go to state 24
    expression_unaria              shift and go to state 25
    expression_group               shift and go to state 26
    expression_number              shift and go to state 27
    expression_var                 shift and go to state 28
    expression_array_access        shift and go to state 29
    expression_field_access        shift and go to state 30
    expression_func_call           shift and go to state 31

state 97

    (59) expression_array_access -> expression LBRACKET expression RBRACKET .

    ASSIGN          reduce using rule 59 (expression_array_access -> expression LBRACKET expression RBRACKET .)
    PLUS            reduce using rule 59 (expression_array_access -> expression LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 59 (expression_array_access -> expression LBRACKET expression RBRACKET .)
    TIMES           reduce using rule 59 (expression_array_access -> expression LBRACKET expression RBRACKET .)
    DIVIDE          reduce using rule 59 (expression_array_access -> expression LBRACKET expression RBRACKET .)
    EQ              reduce using rule 59 (expression_array_access -> expression LBRACKET expression RBRACKET .)
    GT              reduce using rule 59 (expression_array_access -> expression LBRACKET expression RBRACKET .)
    GE              reduce using rule 59 (expression_array_access -> expression LBRACKET expression RBRACKET .)
    LT              reduce using rule 59 (expression_array_access -> expression LBRACKET expression RBRACKET .)
    LE              reduce using rule 59 (expression_array_access -> expression LBRACKET expression RBRACKET .)
    AND             reduce using rule 59 (expression_array_access -> expression LBRACKET expression RBRACKET .)
    OR              reduce using rule 59 (expression_array_access -> expression LBRACKET expression RBRACKET .)
    LBRACKET        reduce using rule 59 (expression_array_access -> expression LBRACKET expression RBRACKET .)
    DOT             reduce using rule 59 (expression_array_access -> expression LBRACKET expression RBRACKET .)
    COLON           reduce using rule 59 (expression_array_access -> expression LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 59 (expression_array_access -> expression LBRACKET expression RBRACKET .)
    WHILE           reduce using rule 59 (expression_array_access -> expression LBRACKET expression RBRACKET .)
    DEF             reduce using rule 59 (expression_array_access -> expression LBRACKET expression RBRACKET .)
    RETURN          reduce using rule 59 (expression_array_access -> expression LBRACKET expression RBRACKET .)
    IF              reduce using rule 59 (expression_array_access -> expression LBRACKET expression RBRACKET .)
    ID              reduce using rule 59 (expression_array_access -> expression LBRACKET expression RBRACKET .)
    TYPE            reduce using rule 59 (expression_array_access -> expression LBRACKET expression RBRACKET .)
    INT             reduce using rule 59 (expression_array_access -> expression LBRACKET expression RBRACKET .)
    FLOAT           reduce using rule 59 (expression_array_access -> expression LBRACKET expression RBRACKET .)
    CHAR            reduce using rule 59 (expression_array_access -> expression LBRACKET expression RBRACKET .)
    BOOL            reduce using rule 59 (expression_array_access -> expression LBRACKET expression RBRACKET .)
    NOT             reduce using rule 59 (expression_array_access -> expression LBRACKET expression RBRACKET .)
    LPAREN          reduce using rule 59 (expression_array_access -> expression LBRACKET expression RBRACKET .)
    NUMBER          reduce using rule 59 (expression_array_access -> expression LBRACKET expression RBRACKET .)
    FLOAT_NUMBER    reduce using rule 59 (expression_array_access -> expression LBRACKET expression RBRACKET .)
    TRUE            reduce using rule 59 (expression_array_access -> expression LBRACKET expression RBRACKET .)
    FALSE           reduce using rule 59 (expression_array_access -> expression LBRACKET expression RBRACKET .)
    CHARACTER       reduce using rule 59 (expression_array_access -> expression LBRACKET expression RBRACKET .)
    $end            reduce using rule 59 (expression_array_access -> expression LBRACKET expression RBRACKET .)
    RBRACE          reduce using rule 59 (expression_array_access -> expression LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 59 (expression_array_access -> expression LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 59 (expression_array_access -> expression LBRACKET expression RBRACKET .)


state 98

    (12) statement_declaration -> type id_list ASSIGN expression .
    (39) expression_binaria -> expression . PLUS expression
    (40) expression_binaria -> expression . MINUS expression
    (41) expression_binaria -> expression . TIMES expression
    (42) expression_binaria -> expression . DIVIDE expression
    (43) expression_comparacion -> expression . EQ expression
    (44) expression_comparacion -> expression . GT expression
    (45) expression_comparacion -> expression . GE expression
    (46) expression_comparacion -> expression . LT expression
    (47) expression_comparacion -> expression . LE expression
    (48) expression_logica -> expression . AND expression
    (49) expression_logica -> expression . OR expression
    (59) expression_array_access -> expression . LBRACKET expression RBRACKET
    (60) expression_field_access -> expression . DOT ID

  ! shift/reduce conflict for MINUS resolved as shift
    WHILE           reduce using rule 12 (statement_declaration -> type id_list ASSIGN expression .)
    DEF             reduce using rule 12 (statement_declaration -> type id_list ASSIGN expression .)
    RETURN          reduce using rule 12 (statement_declaration -> type id_list ASSIGN expression .)
    IF              reduce using rule 12 (statement_declaration -> type id_list ASSIGN expression .)
    ID              reduce using rule 12 (statement_declaration -> type id_list ASSIGN expression .)
    TYPE            reduce using rule 12 (statement_declaration -> type id_list ASSIGN expression .)
    INT             reduce using rule 12 (statement_declaration -> type id_list ASSIGN expression .)
    FLOAT           reduce using rule 12 (statement_declaration -> type id_list ASSIGN expression .)
    CHAR            reduce using rule 12 (statement_declaration -> type id_list ASSIGN expression .)
    BOOL            reduce using rule 12 (statement_declaration -> type id_list ASSIGN expression .)
    NOT             reduce using rule 12 (statement_declaration -> type id_list ASSIGN expression .)
    LPAREN          reduce using rule 12 (statement_declaration -> type id_list ASSIGN expression .)
    NUMBER          reduce using rule 12 (statement_declaration -> type id_list ASSIGN expression .)
    FLOAT_NUMBER    reduce using rule 12 (statement_declaration -> type id_list ASSIGN expression .)
    TRUE            reduce using rule 12 (statement_declaration -> type id_list ASSIGN expression .)
    FALSE           reduce using rule 12 (statement_declaration -> type id_list ASSIGN expression .)
    CHARACTER       reduce using rule 12 (statement_declaration -> type id_list ASSIGN expression .)
    $end            reduce using rule 12 (statement_declaration -> type id_list ASSIGN expression .)
    RBRACE          reduce using rule 12 (statement_declaration -> type id_list ASSIGN expression .)
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    TIMES           shift and go to state 48
    DIVIDE          shift and go to state 49
    EQ              shift and go to state 50
    GT              shift and go to state 51
    GE              shift and go to state 52
    LT              shift and go to state 53
    LE              shift and go to state 54
    AND             shift and go to state 55
    OR              shift and go to state 56
    LBRACKET        shift and go to state 57
    DOT             shift and go to state 58

  ! MINUS           [ reduce using rule 12 (statement_declaration -> type id_list ASSIGN expression .) ]


state 99

    (22) id_list -> id_list COMMA ID .

    ASSIGN          reduce using rule 22 (id_list -> id_list COMMA ID .)
    COMMA           reduce using rule 22 (id_list -> id_list COMMA ID .)
    WHILE           reduce using rule 22 (id_list -> id_list COMMA ID .)
    DEF             reduce using rule 22 (id_list -> id_list COMMA ID .)
    RETURN          reduce using rule 22 (id_list -> id_list COMMA ID .)
    IF              reduce using rule 22 (id_list -> id_list COMMA ID .)
    ID              reduce using rule 22 (id_list -> id_list COMMA ID .)
    TYPE            reduce using rule 22 (id_list -> id_list COMMA ID .)
    INT             reduce using rule 22 (id_list -> id_list COMMA ID .)
    FLOAT           reduce using rule 22 (id_list -> id_list COMMA ID .)
    CHAR            reduce using rule 22 (id_list -> id_list COMMA ID .)
    BOOL            reduce using rule 22 (id_list -> id_list COMMA ID .)
    MINUS           reduce using rule 22 (id_list -> id_list COMMA ID .)
    NOT             reduce using rule 22 (id_list -> id_list COMMA ID .)
    LPAREN          reduce using rule 22 (id_list -> id_list COMMA ID .)
    NUMBER          reduce using rule 22 (id_list -> id_list COMMA ID .)
    FLOAT_NUMBER    reduce using rule 22 (id_list -> id_list COMMA ID .)
    TRUE            reduce using rule 22 (id_list -> id_list COMMA ID .)
    FALSE           reduce using rule 22 (id_list -> id_list COMMA ID .)
    CHARACTER       reduce using rule 22 (id_list -> id_list COMMA ID .)
    $end            reduce using rule 22 (id_list -> id_list COMMA ID .)
    RBRACE          reduce using rule 22 (id_list -> id_list COMMA ID .)


state 100

    (14) statement_function -> DEF type ID LPAREN . param_list RPAREN COLON LBRACE statement_list RBRACE
    (62) param_list -> . param
    (63) param_list -> . param_list SEMICOLON param
    (64) param -> . type ID
    (23) type -> . base_type
    (24) type -> . base_type LBRACKET NUMBER RBRACKET
    (25) base_type -> . INT
    (26) base_type -> . FLOAT
    (27) base_type -> . CHAR
    (28) base_type -> . BOOL

    INT             shift and go to state 32
    FLOAT           shift and go to state 33
    CHAR            shift and go to state 34
    BOOL            shift and go to state 35

    type                           shift and go to state 107
    param_list                     shift and go to state 108
    param                          shift and go to state 109
    base_type                      shift and go to state 20

state 101

    (61) expression_func_call -> ID LPAREN arg_list RPAREN .

    ASSIGN          reduce using rule 61 (expression_func_call -> ID LPAREN arg_list RPAREN .)
    PLUS            reduce using rule 61 (expression_func_call -> ID LPAREN arg_list RPAREN .)
    MINUS           reduce using rule 61 (expression_func_call -> ID LPAREN arg_list RPAREN .)
    TIMES           reduce using rule 61 (expression_func_call -> ID LPAREN arg_list RPAREN .)
    DIVIDE          reduce using rule 61 (expression_func_call -> ID LPAREN arg_list RPAREN .)
    EQ              reduce using rule 61 (expression_func_call -> ID LPAREN arg_list RPAREN .)
    GT              reduce using rule 61 (expression_func_call -> ID LPAREN arg_list RPAREN .)
    GE              reduce using rule 61 (expression_func_call -> ID LPAREN arg_list RPAREN .)
    LT              reduce using rule 61 (expression_func_call -> ID LPAREN arg_list RPAREN .)
    LE              reduce using rule 61 (expression_func_call -> ID LPAREN arg_list RPAREN .)
    AND             reduce using rule 61 (expression_func_call -> ID LPAREN arg_list RPAREN .)
    OR              reduce using rule 61 (expression_func_call -> ID LPAREN arg_list RPAREN .)
    LBRACKET        reduce using rule 61 (expression_func_call -> ID LPAREN arg_list RPAREN .)
    DOT             reduce using rule 61 (expression_func_call -> ID LPAREN arg_list RPAREN .)
    COLON           reduce using rule 61 (expression_func_call -> ID LPAREN arg_list RPAREN .)
    RPAREN          reduce using rule 61 (expression_func_call -> ID LPAREN arg_list RPAREN .)
    WHILE           reduce using rule 61 (expression_func_call -> ID LPAREN arg_list RPAREN .)
    DEF             reduce using rule 61 (expression_func_call -> ID LPAREN arg_list RPAREN .)
    RETURN          reduce using rule 61 (expression_func_call -> ID LPAREN arg_list RPAREN .)
    IF              reduce using rule 61 (expression_func_call -> ID LPAREN arg_list RPAREN .)
    ID              reduce using rule 61 (expression_func_call -> ID LPAREN arg_list RPAREN .)
    TYPE            reduce using rule 61 (expression_func_call -> ID LPAREN arg_list RPAREN .)
    INT             reduce using rule 61 (expression_func_call -> ID LPAREN arg_list RPAREN .)
    FLOAT           reduce using rule 61 (expression_func_call -> ID LPAREN arg_list RPAREN .)
    CHAR            reduce using rule 61 (expression_func_call -> ID LPAREN arg_list RPAREN .)
    BOOL            reduce using rule 61 (expression_func_call -> ID LPAREN arg_list RPAREN .)
    NOT             reduce using rule 61 (expression_func_call -> ID LPAREN arg_list RPAREN .)
    LPAREN          reduce using rule 61 (expression_func_call -> ID LPAREN arg_list RPAREN .)
    NUMBER          reduce using rule 61 (expression_func_call -> ID LPAREN arg_list RPAREN .)
    FLOAT_NUMBER    reduce using rule 61 (expression_func_call -> ID LPAREN arg_list RPAREN .)
    TRUE            reduce using rule 61 (expression_func_call -> ID LPAREN arg_list RPAREN .)
    FALSE           reduce using rule 61 (expression_func_call -> ID LPAREN arg_list RPAREN .)
    CHARACTER       reduce using rule 61 (expression_func_call -> ID LPAREN arg_list RPAREN .)
    $end            reduce using rule 61 (expression_func_call -> ID LPAREN arg_list RPAREN .)
    RBRACE          reduce using rule 61 (expression_func_call -> ID LPAREN arg_list RPAREN .)
    RBRACKET        reduce using rule 61 (expression_func_call -> ID LPAREN arg_list RPAREN .)
    COMMA           reduce using rule 61 (expression_func_call -> ID LPAREN arg_list RPAREN .)


state 102

    (66) arg_list -> arg_list COMMA . expression
    (29) expression -> . expression_binaria
    (30) expression -> . expression_comparacion
    (31) expression -> . expression_logica
    (32) expression -> . expression_unaria
    (33) expression -> . expression_group
    (34) expression -> . expression_number
    (35) expression -> . expression_var
    (36) expression -> . expression_array_access
    (37) expression -> . expression_field_access
    (38) expression -> . expression_func_call
    (39) expression_binaria -> . expression PLUS expression
    (40) expression_binaria -> . expression MINUS expression
    (41) expression_binaria -> . expression TIMES expression
    (42) expression_binaria -> . expression DIVIDE expression
    (43) expression_comparacion -> . expression EQ expression
    (44) expression_comparacion -> . expression GT expression
    (45) expression_comparacion -> . expression GE expression
    (46) expression_comparacion -> . expression LT expression
    (47) expression_comparacion -> . expression LE expression
    (48) expression_logica -> . expression AND expression
    (49) expression_logica -> . expression OR expression
    (50) expression_unaria -> . MINUS expression
    (51) expression_unaria -> . NOT expression
    (52) expression_group -> . LPAREN expression RPAREN
    (53) expression_number -> . NUMBER
    (54) expression_number -> . FLOAT_NUMBER
    (55) expression_number -> . TRUE
    (56) expression_number -> . FALSE
    (57) expression_number -> . CHARACTER
    (58) expression_var -> . ID
    (59) expression_array_access -> . expression LBRACKET expression RBRACKET
    (60) expression_field_access -> . expression DOT ID
    (61) expression_func_call -> . ID LPAREN arg_list RPAREN

    MINUS           shift and go to state 36
    NOT             shift and go to state 37
    LPAREN          shift and go to state 16
    NUMBER          shift and go to state 21
    FLOAT_NUMBER    shift and go to state 38
    TRUE            shift and go to state 39
    FALSE           shift and go to state 40
    CHARACTER       shift and go to state 41
    ID              shift and go to state 44

    expression                     shift and go to state 110
    expression_binaria             shift and go to state 22
    expression_comparacion         shift and go to state 23
    expression_logica              shift and go to state 24
    expression_unaria              shift and go to state 25
    expression_group               shift and go to state 26
    expression_number              shift and go to state 27
    expression_var                 shift and go to state 28
    expression_array_access        shift and go to state 29
    expression_field_access        shift and go to state 30
    expression_func_call           shift and go to state 31

state 103

    (16) statement_if -> IF expression COLON LBRACE . statement_list RBRACE
    (17) statement_if -> IF expression COLON LBRACE . statement_list RBRACE ELSE LBRACE statement_list RBRACE
    (2) statement_list -> . statement
    (3) statement_list -> . statement_list statement
    (4) statement -> . statement_declaration
    (5) statement -> . statement_assign
    (6) statement -> . statement_function
    (7) statement -> . statement_return
    (8) statement -> . statement_if
    (9) statement -> . statement_instance
    (10) statement -> . statement_type_def
    (19) statement -> . WHILE expression COLON LBRACE statement_list RBRACE
    (11) statement_declaration -> . type id_list
    (12) statement_declaration -> . type id_list ASSIGN expression
    (13) statement_assign -> . expression ASSIGN expression
    (14) statement_function -> . DEF type ID LPAREN param_list RPAREN COLON LBRACE statement_list RBRACE
    (15) statement_return -> . RETURN expression
    (16) statement_if -> . IF expression COLON LBRACE statement_list RBRACE
    (17) statement_if -> . IF expression COLON LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE
    (18) statement_instance -> . ID ID
    (20) statement_type_def -> . TYPE ID COLON LBRACE field_list RBRACE
    (23) type -> . base_type
    (24) type -> . base_type LBRACKET NUMBER RBRACKET
    (29) expression -> . expression_binaria
    (30) expression -> . expression_comparacion
    (31) expression -> . expression_logica
    (32) expression -> . expression_unaria
    (33) expression -> . expression_group
    (34) expression -> . expression_number
    (35) expression -> . expression_var
    (36) expression -> . expression_array_access
    (37) expression -> . expression_field_access
    (38) expression -> . expression_func_call
    (25) base_type -> . INT
    (26) base_type -> . FLOAT
    (27) base_type -> . CHAR
    (28) base_type -> . BOOL
    (39) expression_binaria -> . expression PLUS expression
    (40) expression_binaria -> . expression MINUS expression
    (41) expression_binaria -> . expression TIMES expression
    (42) expression_binaria -> . expression DIVIDE expression
    (43) expression_comparacion -> . expression EQ expression
    (44) expression_comparacion -> . expression GT expression
    (45) expression_comparacion -> . expression GE expression
    (46) expression_comparacion -> . expression LT expression
    (47) expression_comparacion -> . expression LE expression
    (48) expression_logica -> . expression AND expression
    (49) expression_logica -> . expression OR expression
    (50) expression_unaria -> . MINUS expression
    (51) expression_unaria -> . NOT expression
    (52) expression_group -> . LPAREN expression RPAREN
    (53) expression_number -> . NUMBER
    (54) expression_number -> . FLOAT_NUMBER
    (55) expression_number -> . TRUE
    (56) expression_number -> . FALSE
    (57) expression_number -> . CHARACTER
    (58) expression_var -> . ID
    (59) expression_array_access -> . expression LBRACKET expression RBRACKET
    (60) expression_field_access -> . expression DOT ID
    (61) expression_func_call -> . ID LPAREN arg_list RPAREN

    WHILE           shift and go to state 11
    DEF             shift and go to state 14
    RETURN          shift and go to state 17
    IF              shift and go to state 18
    ID              shift and go to state 15
    TYPE            shift and go to state 19
    INT             shift and go to state 32
    FLOAT           shift and go to state 33
    CHAR            shift and go to state 34
    BOOL            shift and go to state 35
    MINUS           shift and go to state 36
    NOT             shift and go to state 37
    LPAREN          shift and go to state 16
    NUMBER          shift and go to state 21
    FLOAT_NUMBER    shift and go to state 38
    TRUE            shift and go to state 39
    FALSE           shift and go to state 40
    CHARACTER       shift and go to state 41

    expression                     shift and go to state 12
    statement_list                 shift and go to state 111
    statement                      shift and go to state 3
    statement_declaration          shift and go to state 4
    statement_assign               shift and go to state 5
    statement_function             shift and go to state 6
    statement_return               shift and go to state 7
    statement_if                   shift and go to state 8
    statement_instance             shift and go to state 9
    statement_type_def             shift and go to state 10
    type                           shift and go to state 13
    base_type                      shift and go to state 20
    expression_binaria             shift and go to state 22
    expression_comparacion         shift and go to state 23
    expression_logica              shift and go to state 24
    expression_unaria              shift and go to state 25
    expression_group               shift and go to state 26
    expression_number              shift and go to state 27
    expression_var                 shift and go to state 28
    expression_array_access        shift and go to state 29
    expression_field_access        shift and go to state 30
    expression_func_call           shift and go to state 31

state 104

    (20) statement_type_def -> TYPE ID COLON LBRACE . field_list RBRACE
    (68) field_list -> . field
    (69) field_list -> . field_list field
    (70) field -> . type ID
    (23) type -> . base_type
    (24) type -> . base_type LBRACKET NUMBER RBRACKET
    (25) base_type -> . INT
    (26) base_type -> . FLOAT
    (27) base_type -> . CHAR
    (28) base_type -> . BOOL

    INT             shift and go to state 32
    FLOAT           shift and go to state 33
    CHAR            shift and go to state 34
    BOOL            shift and go to state 35

    field_list                     shift and go to state 112
    field                          shift and go to state 113
    type                           shift and go to state 114
    base_type                      shift and go to state 20

state 105

    (24) type -> base_type LBRACKET NUMBER RBRACKET .

    ID              reduce using rule 24 (type -> base_type LBRACKET NUMBER RBRACKET .)


state 106

    (19) statement -> WHILE expression COLON LBRACE statement_list . RBRACE
    (3) statement_list -> statement_list . statement
    (4) statement -> . statement_declaration
    (5) statement -> . statement_assign
    (6) statement -> . statement_function
    (7) statement -> . statement_return
    (8) statement -> . statement_if
    (9) statement -> . statement_instance
    (10) statement -> . statement_type_def
    (19) statement -> . WHILE expression COLON LBRACE statement_list RBRACE
    (11) statement_declaration -> . type id_list
    (12) statement_declaration -> . type id_list ASSIGN expression
    (13) statement_assign -> . expression ASSIGN expression
    (14) statement_function -> . DEF type ID LPAREN param_list RPAREN COLON LBRACE statement_list RBRACE
    (15) statement_return -> . RETURN expression
    (16) statement_if -> . IF expression COLON LBRACE statement_list RBRACE
    (17) statement_if -> . IF expression COLON LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE
    (18) statement_instance -> . ID ID
    (20) statement_type_def -> . TYPE ID COLON LBRACE field_list RBRACE
    (23) type -> . base_type
    (24) type -> . base_type LBRACKET NUMBER RBRACKET
    (29) expression -> . expression_binaria
    (30) expression -> . expression_comparacion
    (31) expression -> . expression_logica
    (32) expression -> . expression_unaria
    (33) expression -> . expression_group
    (34) expression -> . expression_number
    (35) expression -> . expression_var
    (36) expression -> . expression_array_access
    (37) expression -> . expression_field_access
    (38) expression -> . expression_func_call
    (25) base_type -> . INT
    (26) base_type -> . FLOAT
    (27) base_type -> . CHAR
    (28) base_type -> . BOOL
    (39) expression_binaria -> . expression PLUS expression
    (40) expression_binaria -> . expression MINUS expression
    (41) expression_binaria -> . expression TIMES expression
    (42) expression_binaria -> . expression DIVIDE expression
    (43) expression_comparacion -> . expression EQ expression
    (44) expression_comparacion -> . expression GT expression
    (45) expression_comparacion -> . expression GE expression
    (46) expression_comparacion -> . expression LT expression
    (47) expression_comparacion -> . expression LE expression
    (48) expression_logica -> . expression AND expression
    (49) expression_logica -> . expression OR expression
    (50) expression_unaria -> . MINUS expression
    (51) expression_unaria -> . NOT expression
    (52) expression_group -> . LPAREN expression RPAREN
    (53) expression_number -> . NUMBER
    (54) expression_number -> . FLOAT_NUMBER
    (55) expression_number -> . TRUE
    (56) expression_number -> . FALSE
    (57) expression_number -> . CHARACTER
    (58) expression_var -> . ID
    (59) expression_array_access -> . expression LBRACKET expression RBRACKET
    (60) expression_field_access -> . expression DOT ID
    (61) expression_func_call -> . ID LPAREN arg_list RPAREN

    RBRACE          shift and go to state 115
    WHILE           shift and go to state 11
    DEF             shift and go to state 14
    RETURN          shift and go to state 17
    IF              shift and go to state 18
    ID              shift and go to state 15
    TYPE            shift and go to state 19
    INT             shift and go to state 32
    FLOAT           shift and go to state 33
    CHAR            shift and go to state 34
    BOOL            shift and go to state 35
    MINUS           shift and go to state 36
    NOT             shift and go to state 37
    LPAREN          shift and go to state 16
    NUMBER          shift and go to state 21
    FLOAT_NUMBER    shift and go to state 38
    TRUE            shift and go to state 39
    FALSE           shift and go to state 40
    CHARACTER       shift and go to state 41

    expression                     shift and go to state 12
    statement                      shift and go to state 42
    statement_declaration          shift and go to state 4
    statement_assign               shift and go to state 5
    statement_function             shift and go to state 6
    statement_return               shift and go to state 7
    statement_if                   shift and go to state 8
    statement_instance             shift and go to state 9
    statement_type_def             shift and go to state 10
    type                           shift and go to state 13
    base_type                      shift and go to state 20
    expression_binaria             shift and go to state 22
    expression_comparacion         shift and go to state 23
    expression_logica              shift and go to state 24
    expression_unaria              shift and go to state 25
    expression_group               shift and go to state 26
    expression_number              shift and go to state 27
    expression_var                 shift and go to state 28
    expression_array_access        shift and go to state 29
    expression_field_access        shift and go to state 30
    expression_func_call           shift and go to state 31

state 107

    (64) param -> type . ID

    ID              shift and go to state 116


state 108

    (14) statement_function -> DEF type ID LPAREN param_list . RPAREN COLON LBRACE statement_list RBRACE
    (63) param_list -> param_list . SEMICOLON param

    RPAREN          shift and go to state 117
    SEMICOLON       shift and go to state 118


state 109

    (62) param_list -> param .

    RPAREN          reduce using rule 62 (param_list -> param .)
    SEMICOLON       reduce using rule 62 (param_list -> param .)


state 110

    (66) arg_list -> arg_list COMMA expression .
    (39) expression_binaria -> expression . PLUS expression
    (40) expression_binaria -> expression . MINUS expression
    (41) expression_binaria -> expression . TIMES expression
    (42) expression_binaria -> expression . DIVIDE expression
    (43) expression_comparacion -> expression . EQ expression
    (44) expression_comparacion -> expression . GT expression
    (45) expression_comparacion -> expression . GE expression
    (46) expression_comparacion -> expression . LT expression
    (47) expression_comparacion -> expression . LE expression
    (48) expression_logica -> expression . AND expression
    (49) expression_logica -> expression . OR expression
    (59) expression_array_access -> expression . LBRACKET expression RBRACKET
    (60) expression_field_access -> expression . DOT ID

    RPAREN          reduce using rule 66 (arg_list -> arg_list COMMA expression .)
    COMMA           reduce using rule 66 (arg_list -> arg_list COMMA expression .)
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    TIMES           shift and go to state 48
    DIVIDE          shift and go to state 49
    EQ              shift and go to state 50
    GT              shift and go to state 51
    GE              shift and go to state 52
    LT              shift and go to state 53
    LE              shift and go to state 54
    AND             shift and go to state 55
    OR              shift and go to state 56
    LBRACKET        shift and go to state 57
    DOT             shift and go to state 58


state 111

    (16) statement_if -> IF expression COLON LBRACE statement_list . RBRACE
    (17) statement_if -> IF expression COLON LBRACE statement_list . RBRACE ELSE LBRACE statement_list RBRACE
    (3) statement_list -> statement_list . statement
    (4) statement -> . statement_declaration
    (5) statement -> . statement_assign
    (6) statement -> . statement_function
    (7) statement -> . statement_return
    (8) statement -> . statement_if
    (9) statement -> . statement_instance
    (10) statement -> . statement_type_def
    (19) statement -> . WHILE expression COLON LBRACE statement_list RBRACE
    (11) statement_declaration -> . type id_list
    (12) statement_declaration -> . type id_list ASSIGN expression
    (13) statement_assign -> . expression ASSIGN expression
    (14) statement_function -> . DEF type ID LPAREN param_list RPAREN COLON LBRACE statement_list RBRACE
    (15) statement_return -> . RETURN expression
    (16) statement_if -> . IF expression COLON LBRACE statement_list RBRACE
    (17) statement_if -> . IF expression COLON LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE
    (18) statement_instance -> . ID ID
    (20) statement_type_def -> . TYPE ID COLON LBRACE field_list RBRACE
    (23) type -> . base_type
    (24) type -> . base_type LBRACKET NUMBER RBRACKET
    (29) expression -> . expression_binaria
    (30) expression -> . expression_comparacion
    (31) expression -> . expression_logica
    (32) expression -> . expression_unaria
    (33) expression -> . expression_group
    (34) expression -> . expression_number
    (35) expression -> . expression_var
    (36) expression -> . expression_array_access
    (37) expression -> . expression_field_access
    (38) expression -> . expression_func_call
    (25) base_type -> . INT
    (26) base_type -> . FLOAT
    (27) base_type -> . CHAR
    (28) base_type -> . BOOL
    (39) expression_binaria -> . expression PLUS expression
    (40) expression_binaria -> . expression MINUS expression
    (41) expression_binaria -> . expression TIMES expression
    (42) expression_binaria -> . expression DIVIDE expression
    (43) expression_comparacion -> . expression EQ expression
    (44) expression_comparacion -> . expression GT expression
    (45) expression_comparacion -> . expression GE expression
    (46) expression_comparacion -> . expression LT expression
    (47) expression_comparacion -> . expression LE expression
    (48) expression_logica -> . expression AND expression
    (49) expression_logica -> . expression OR expression
    (50) expression_unaria -> . MINUS expression
    (51) expression_unaria -> . NOT expression
    (52) expression_group -> . LPAREN expression RPAREN
    (53) expression_number -> . NUMBER
    (54) expression_number -> . FLOAT_NUMBER
    (55) expression_number -> . TRUE
    (56) expression_number -> . FALSE
    (57) expression_number -> . CHARACTER
    (58) expression_var -> . ID
    (59) expression_array_access -> . expression LBRACKET expression RBRACKET
    (60) expression_field_access -> . expression DOT ID
    (61) expression_func_call -> . ID LPAREN arg_list RPAREN

    RBRACE          shift and go to state 119
    WHILE           shift and go to state 11
    DEF             shift and go to state 14
    RETURN          shift and go to state 17
    IF              shift and go to state 18
    ID              shift and go to state 15
    TYPE            shift and go to state 19
    INT             shift and go to state 32
    FLOAT           shift and go to state 33
    CHAR            shift and go to state 34
    BOOL            shift and go to state 35
    MINUS           shift and go to state 36
    NOT             shift and go to state 37
    LPAREN          shift and go to state 16
    NUMBER          shift and go to state 21
    FLOAT_NUMBER    shift and go to state 38
    TRUE            shift and go to state 39
    FALSE           shift and go to state 40
    CHARACTER       shift and go to state 41

    expression                     shift and go to state 12
    statement                      shift and go to state 42
    statement_declaration          shift and go to state 4
    statement_assign               shift and go to state 5
    statement_function             shift and go to state 6
    statement_return               shift and go to state 7
    statement_if                   shift and go to state 8
    statement_instance             shift and go to state 9
    statement_type_def             shift and go to state 10
    type                           shift and go to state 13
    base_type                      shift and go to state 20
    expression_binaria             shift and go to state 22
    expression_comparacion         shift and go to state 23
    expression_logica              shift and go to state 24
    expression_unaria              shift and go to state 25
    expression_group               shift and go to state 26
    expression_number              shift and go to state 27
    expression_var                 shift and go to state 28
    expression_array_access        shift and go to state 29
    expression_field_access        shift and go to state 30
    expression_func_call           shift and go to state 31

state 112

    (20) statement_type_def -> TYPE ID COLON LBRACE field_list . RBRACE
    (69) field_list -> field_list . field
    (70) field -> . type ID
    (23) type -> . base_type
    (24) type -> . base_type LBRACKET NUMBER RBRACKET
    (25) base_type -> . INT
    (26) base_type -> . FLOAT
    (27) base_type -> . CHAR
    (28) base_type -> . BOOL

    RBRACE          shift and go to state 120
    INT             shift and go to state 32
    FLOAT           shift and go to state 33
    CHAR            shift and go to state 34
    BOOL            shift and go to state 35

    field                          shift and go to state 121
    type                           shift and go to state 114
    base_type                      shift and go to state 20

state 113

    (68) field_list -> field .

    RBRACE          reduce using rule 68 (field_list -> field .)
    INT             reduce using rule 68 (field_list -> field .)
    FLOAT           reduce using rule 68 (field_list -> field .)
    CHAR            reduce using rule 68 (field_list -> field .)
    BOOL            reduce using rule 68 (field_list -> field .)


state 114

    (70) field -> type . ID

    ID              shift and go to state 122


state 115

    (19) statement -> WHILE expression COLON LBRACE statement_list RBRACE .

    WHILE           reduce using rule 19 (statement -> WHILE expression COLON LBRACE statement_list RBRACE .)
    DEF             reduce using rule 19 (statement -> WHILE expression COLON LBRACE statement_list RBRACE .)
    RETURN          reduce using rule 19 (statement -> WHILE expression COLON LBRACE statement_list RBRACE .)
    IF              reduce using rule 19 (statement -> WHILE expression COLON LBRACE statement_list RBRACE .)
    ID              reduce using rule 19 (statement -> WHILE expression COLON LBRACE statement_list RBRACE .)
    TYPE            reduce using rule 19 (statement -> WHILE expression COLON LBRACE statement_list RBRACE .)
    INT             reduce using rule 19 (statement -> WHILE expression COLON LBRACE statement_list RBRACE .)
    FLOAT           reduce using rule 19 (statement -> WHILE expression COLON LBRACE statement_list RBRACE .)
    CHAR            reduce using rule 19 (statement -> WHILE expression COLON LBRACE statement_list RBRACE .)
    BOOL            reduce using rule 19 (statement -> WHILE expression COLON LBRACE statement_list RBRACE .)
    MINUS           reduce using rule 19 (statement -> WHILE expression COLON LBRACE statement_list RBRACE .)
    NOT             reduce using rule 19 (statement -> WHILE expression COLON LBRACE statement_list RBRACE .)
    LPAREN          reduce using rule 19 (statement -> WHILE expression COLON LBRACE statement_list RBRACE .)
    NUMBER          reduce using rule 19 (statement -> WHILE expression COLON LBRACE statement_list RBRACE .)
    FLOAT_NUMBER    reduce using rule 19 (statement -> WHILE expression COLON LBRACE statement_list RBRACE .)
    TRUE            reduce using rule 19 (statement -> WHILE expression COLON LBRACE statement_list RBRACE .)
    FALSE           reduce using rule 19 (statement -> WHILE expression COLON LBRACE statement_list RBRACE .)
    CHARACTER       reduce using rule 19 (statement -> WHILE expression COLON LBRACE statement_list RBRACE .)
    $end            reduce using rule 19 (statement -> WHILE expression COLON LBRACE statement_list RBRACE .)
    RBRACE          reduce using rule 19 (statement -> WHILE expression COLON LBRACE statement_list RBRACE .)


state 116

    (64) param -> type ID .

    RPAREN          reduce using rule 64 (param -> type ID .)
    SEMICOLON       reduce using rule 64 (param -> type ID .)


state 117

    (14) statement_function -> DEF type ID LPAREN param_list RPAREN . COLON LBRACE statement_list RBRACE

    COLON           shift and go to state 123


state 118

    (63) param_list -> param_list SEMICOLON . param
    (64) param -> . type ID
    (23) type -> . base_type
    (24) type -> . base_type LBRACKET NUMBER RBRACKET
    (25) base_type -> . INT
    (26) base_type -> . FLOAT
    (27) base_type -> . CHAR
    (28) base_type -> . BOOL

    INT             shift and go to state 32
    FLOAT           shift and go to state 33
    CHAR            shift and go to state 34
    BOOL            shift and go to state 35

    param                          shift and go to state 124
    type                           shift and go to state 107
    base_type                      shift and go to state 20

state 119

    (16) statement_if -> IF expression COLON LBRACE statement_list RBRACE .
    (17) statement_if -> IF expression COLON LBRACE statement_list RBRACE . ELSE LBRACE statement_list RBRACE

    WHILE           reduce using rule 16 (statement_if -> IF expression COLON LBRACE statement_list RBRACE .)
    DEF             reduce using rule 16 (statement_if -> IF expression COLON LBRACE statement_list RBRACE .)
    RETURN          reduce using rule 16 (statement_if -> IF expression COLON LBRACE statement_list RBRACE .)
    IF              reduce using rule 16 (statement_if -> IF expression COLON LBRACE statement_list RBRACE .)
    ID              reduce using rule 16 (statement_if -> IF expression COLON LBRACE statement_list RBRACE .)
    TYPE            reduce using rule 16 (statement_if -> IF expression COLON LBRACE statement_list RBRACE .)
    INT             reduce using rule 16 (statement_if -> IF expression COLON LBRACE statement_list RBRACE .)
    FLOAT           reduce using rule 16 (statement_if -> IF expression COLON LBRACE statement_list RBRACE .)
    CHAR            reduce using rule 16 (statement_if -> IF expression COLON LBRACE statement_list RBRACE .)
    BOOL            reduce using rule 16 (statement_if -> IF expression COLON LBRACE statement_list RBRACE .)
    MINUS           reduce using rule 16 (statement_if -> IF expression COLON LBRACE statement_list RBRACE .)
    NOT             reduce using rule 16 (statement_if -> IF expression COLON LBRACE statement_list RBRACE .)
    LPAREN          reduce using rule 16 (statement_if -> IF expression COLON LBRACE statement_list RBRACE .)
    NUMBER          reduce using rule 16 (statement_if -> IF expression COLON LBRACE statement_list RBRACE .)
    FLOAT_NUMBER    reduce using rule 16 (statement_if -> IF expression COLON LBRACE statement_list RBRACE .)
    TRUE            reduce using rule 16 (statement_if -> IF expression COLON LBRACE statement_list RBRACE .)
    FALSE           reduce using rule 16 (statement_if -> IF expression COLON LBRACE statement_list RBRACE .)
    CHARACTER       reduce using rule 16 (statement_if -> IF expression COLON LBRACE statement_list RBRACE .)
    $end            reduce using rule 16 (statement_if -> IF expression COLON LBRACE statement_list RBRACE .)
    RBRACE          reduce using rule 16 (statement_if -> IF expression COLON LBRACE statement_list RBRACE .)
    ELSE            shift and go to state 125


state 120

    (20) statement_type_def -> TYPE ID COLON LBRACE field_list RBRACE .

    WHILE           reduce using rule 20 (statement_type_def -> TYPE ID COLON LBRACE field_list RBRACE .)
    DEF             reduce using rule 20 (statement_type_def -> TYPE ID COLON LBRACE field_list RBRACE .)
    RETURN          reduce using rule 20 (statement_type_def -> TYPE ID COLON LBRACE field_list RBRACE .)
    IF              reduce using rule 20 (statement_type_def -> TYPE ID COLON LBRACE field_list RBRACE .)
    ID              reduce using rule 20 (statement_type_def -> TYPE ID COLON LBRACE field_list RBRACE .)
    TYPE            reduce using rule 20 (statement_type_def -> TYPE ID COLON LBRACE field_list RBRACE .)
    INT             reduce using rule 20 (statement_type_def -> TYPE ID COLON LBRACE field_list RBRACE .)
    FLOAT           reduce using rule 20 (statement_type_def -> TYPE ID COLON LBRACE field_list RBRACE .)
    CHAR            reduce using rule 20 (statement_type_def -> TYPE ID COLON LBRACE field_list RBRACE .)
    BOOL            reduce using rule 20 (statement_type_def -> TYPE ID COLON LBRACE field_list RBRACE .)
    MINUS           reduce using rule 20 (statement_type_def -> TYPE ID COLON LBRACE field_list RBRACE .)
    NOT             reduce using rule 20 (statement_type_def -> TYPE ID COLON LBRACE field_list RBRACE .)
    LPAREN          reduce using rule 20 (statement_type_def -> TYPE ID COLON LBRACE field_list RBRACE .)
    NUMBER          reduce using rule 20 (statement_type_def -> TYPE ID COLON LBRACE field_list RBRACE .)
    FLOAT_NUMBER    reduce using rule 20 (statement_type_def -> TYPE ID COLON LBRACE field_list RBRACE .)
    TRUE            reduce using rule 20 (statement_type_def -> TYPE ID COLON LBRACE field_list RBRACE .)
    FALSE           reduce using rule 20 (statement_type_def -> TYPE ID COLON LBRACE field_list RBRACE .)
    CHARACTER       reduce using rule 20 (statement_type_def -> TYPE ID COLON LBRACE field_list RBRACE .)
    $end            reduce using rule 20 (statement_type_def -> TYPE ID COLON LBRACE field_list RBRACE .)
    RBRACE          reduce using rule 20 (statement_type_def -> TYPE ID COLON LBRACE field_list RBRACE .)


state 121

    (69) field_list -> field_list field .

    RBRACE          reduce using rule 69 (field_list -> field_list field .)
    INT             reduce using rule 69 (field_list -> field_list field .)
    FLOAT           reduce using rule 69 (field_list -> field_list field .)
    CHAR            reduce using rule 69 (field_list -> field_list field .)
    BOOL            reduce using rule 69 (field_list -> field_list field .)


state 122

    (70) field -> type ID .

    RBRACE          reduce using rule 70 (field -> type ID .)
    INT             reduce using rule 70 (field -> type ID .)
    FLOAT           reduce using rule 70 (field -> type ID .)
    CHAR            reduce using rule 70 (field -> type ID .)
    BOOL            reduce using rule 70 (field -> type ID .)


state 123

    (14) statement_function -> DEF type ID LPAREN param_list RPAREN COLON . LBRACE statement_list RBRACE

    LBRACE          shift and go to state 126


state 124

    (63) param_list -> param_list SEMICOLON param .

    RPAREN          reduce using rule 63 (param_list -> param_list SEMICOLON param .)
    SEMICOLON       reduce using rule 63 (param_list -> param_list SEMICOLON param .)


state 125

    (17) statement_if -> IF expression COLON LBRACE statement_list RBRACE ELSE . LBRACE statement_list RBRACE

    LBRACE          shift and go to state 127


state 126

    (14) statement_function -> DEF type ID LPAREN param_list RPAREN COLON LBRACE . statement_list RBRACE
    (2) statement_list -> . statement
    (3) statement_list -> . statement_list statement
    (4) statement -> . statement_declaration
    (5) statement -> . statement_assign
    (6) statement -> . statement_function
    (7) statement -> . statement_return
    (8) statement -> . statement_if
    (9) statement -> . statement_instance
    (10) statement -> . statement_type_def
    (19) statement -> . WHILE expression COLON LBRACE statement_list RBRACE
    (11) statement_declaration -> . type id_list
    (12) statement_declaration -> . type id_list ASSIGN expression
    (13) statement_assign -> . expression ASSIGN expression
    (14) statement_function -> . DEF type ID LPAREN param_list RPAREN COLON LBRACE statement_list RBRACE
    (15) statement_return -> . RETURN expression
    (16) statement_if -> . IF expression COLON LBRACE statement_list RBRACE
    (17) statement_if -> . IF expression COLON LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE
    (18) statement_instance -> . ID ID
    (20) statement_type_def -> . TYPE ID COLON LBRACE field_list RBRACE
    (23) type -> . base_type
    (24) type -> . base_type LBRACKET NUMBER RBRACKET
    (29) expression -> . expression_binaria
    (30) expression -> . expression_comparacion
    (31) expression -> . expression_logica
    (32) expression -> . expression_unaria
    (33) expression -> . expression_group
    (34) expression -> . expression_number
    (35) expression -> . expression_var
    (36) expression -> . expression_array_access
    (37) expression -> . expression_field_access
    (38) expression -> . expression_func_call
    (25) base_type -> . INT
    (26) base_type -> . FLOAT
    (27) base_type -> . CHAR
    (28) base_type -> . BOOL
    (39) expression_binaria -> . expression PLUS expression
    (40) expression_binaria -> . expression MINUS expression
    (41) expression_binaria -> . expression TIMES expression
    (42) expression_binaria -> . expression DIVIDE expression
    (43) expression_comparacion -> . expression EQ expression
    (44) expression_comparacion -> . expression GT expression
    (45) expression_comparacion -> . expression GE expression
    (46) expression_comparacion -> . expression LT expression
    (47) expression_comparacion -> . expression LE expression
    (48) expression_logica -> . expression AND expression
    (49) expression_logica -> . expression OR expression
    (50) expression_unaria -> . MINUS expression
    (51) expression_unaria -> . NOT expression
    (52) expression_group -> . LPAREN expression RPAREN
    (53) expression_number -> . NUMBER
    (54) expression_number -> . FLOAT_NUMBER
    (55) expression_number -> . TRUE
    (56) expression_number -> . FALSE
    (57) expression_number -> . CHARACTER
    (58) expression_var -> . ID
    (59) expression_array_access -> . expression LBRACKET expression RBRACKET
    (60) expression_field_access -> . expression DOT ID
    (61) expression_func_call -> . ID LPAREN arg_list RPAREN

    WHILE           shift and go to state 11
    DEF             shift and go to state 14
    RETURN          shift and go to state 17
    IF              shift and go to state 18
    ID              shift and go to state 15
    TYPE            shift and go to state 19
    INT             shift and go to state 32
    FLOAT           shift and go to state 33
    CHAR            shift and go to state 34
    BOOL            shift and go to state 35
    MINUS           shift and go to state 36
    NOT             shift and go to state 37
    LPAREN          shift and go to state 16
    NUMBER          shift and go to state 21
    FLOAT_NUMBER    shift and go to state 38
    TRUE            shift and go to state 39
    FALSE           shift and go to state 40
    CHARACTER       shift and go to state 41

    type                           shift and go to state 13
    statement_list                 shift and go to state 128
    statement                      shift and go to state 3
    statement_declaration          shift and go to state 4
    statement_assign               shift and go to state 5
    statement_function             shift and go to state 6
    statement_return               shift and go to state 7
    statement_if                   shift and go to state 8
    statement_instance             shift and go to state 9
    statement_type_def             shift and go to state 10
    expression                     shift and go to state 12
    base_type                      shift and go to state 20
    expression_binaria             shift and go to state 22
    expression_comparacion         shift and go to state 23
    expression_logica              shift and go to state 24
    expression_unaria              shift and go to state 25
    expression_group               shift and go to state 26
    expression_number              shift and go to state 27
    expression_var                 shift and go to state 28
    expression_array_access        shift and go to state 29
    expression_field_access        shift and go to state 30
    expression_func_call           shift and go to state 31

state 127

    (17) statement_if -> IF expression COLON LBRACE statement_list RBRACE ELSE LBRACE . statement_list RBRACE
    (2) statement_list -> . statement
    (3) statement_list -> . statement_list statement
    (4) statement -> . statement_declaration
    (5) statement -> . statement_assign
    (6) statement -> . statement_function
    (7) statement -> . statement_return
    (8) statement -> . statement_if
    (9) statement -> . statement_instance
    (10) statement -> . statement_type_def
    (19) statement -> . WHILE expression COLON LBRACE statement_list RBRACE
    (11) statement_declaration -> . type id_list
    (12) statement_declaration -> . type id_list ASSIGN expression
    (13) statement_assign -> . expression ASSIGN expression
    (14) statement_function -> . DEF type ID LPAREN param_list RPAREN COLON LBRACE statement_list RBRACE
    (15) statement_return -> . RETURN expression
    (16) statement_if -> . IF expression COLON LBRACE statement_list RBRACE
    (17) statement_if -> . IF expression COLON LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE
    (18) statement_instance -> . ID ID
    (20) statement_type_def -> . TYPE ID COLON LBRACE field_list RBRACE
    (23) type -> . base_type
    (24) type -> . base_type LBRACKET NUMBER RBRACKET
    (29) expression -> . expression_binaria
    (30) expression -> . expression_comparacion
    (31) expression -> . expression_logica
    (32) expression -> . expression_unaria
    (33) expression -> . expression_group
    (34) expression -> . expression_number
    (35) expression -> . expression_var
    (36) expression -> . expression_array_access
    (37) expression -> . expression_field_access
    (38) expression -> . expression_func_call
    (25) base_type -> . INT
    (26) base_type -> . FLOAT
    (27) base_type -> . CHAR
    (28) base_type -> . BOOL
    (39) expression_binaria -> . expression PLUS expression
    (40) expression_binaria -> . expression MINUS expression
    (41) expression_binaria -> . expression TIMES expression
    (42) expression_binaria -> . expression DIVIDE expression
    (43) expression_comparacion -> . expression EQ expression
    (44) expression_comparacion -> . expression GT expression
    (45) expression_comparacion -> . expression GE expression
    (46) expression_comparacion -> . expression LT expression
    (47) expression_comparacion -> . expression LE expression
    (48) expression_logica -> . expression AND expression
    (49) expression_logica -> . expression OR expression
    (50) expression_unaria -> . MINUS expression
    (51) expression_unaria -> . NOT expression
    (52) expression_group -> . LPAREN expression RPAREN
    (53) expression_number -> . NUMBER
    (54) expression_number -> . FLOAT_NUMBER
    (55) expression_number -> . TRUE
    (56) expression_number -> . FALSE
    (57) expression_number -> . CHARACTER
    (58) expression_var -> . ID
    (59) expression_array_access -> . expression LBRACKET expression RBRACKET
    (60) expression_field_access -> . expression DOT ID
    (61) expression_func_call -> . ID LPAREN arg_list RPAREN

    WHILE           shift and go to state 11
    DEF             shift and go to state 14
    RETURN          shift and go to state 17
    IF              shift and go to state 18
    ID              shift and go to state 15
    TYPE            shift and go to state 19
    INT             shift and go to state 32
    FLOAT           shift and go to state 33
    CHAR            shift and go to state 34
    BOOL            shift and go to state 35
    MINUS           shift and go to state 36
    NOT             shift and go to state 37
    LPAREN          shift and go to state 16
    NUMBER          shift and go to state 21
    FLOAT_NUMBER    shift and go to state 38
    TRUE            shift and go to state 39
    FALSE           shift and go to state 40
    CHARACTER       shift and go to state 41

    expression                     shift and go to state 12
    statement_list                 shift and go to state 129
    statement                      shift and go to state 3
    statement_declaration          shift and go to state 4
    statement_assign               shift and go to state 5
    statement_function             shift and go to state 6
    statement_return               shift and go to state 7
    statement_if                   shift and go to state 8
    statement_instance             shift and go to state 9
    statement_type_def             shift and go to state 10
    type                           shift and go to state 13
    base_type                      shift and go to state 20
    expression_binaria             shift and go to state 22
    expression_comparacion         shift and go to state 23
    expression_logica              shift and go to state 24
    expression_unaria              shift and go to state 25
    expression_group               shift and go to state 26
    expression_number              shift and go to state 27
    expression_var                 shift and go to state 28
    expression_array_access        shift and go to state 29
    expression_field_access        shift and go to state 30
    expression_func_call           shift and go to state 31

state 128

    (14) statement_function -> DEF type ID LPAREN param_list RPAREN COLON LBRACE statement_list . RBRACE
    (3) statement_list -> statement_list . statement
    (4) statement -> . statement_declaration
    (5) statement -> . statement_assign
    (6) statement -> . statement_function
    (7) statement -> . statement_return
    (8) statement -> . statement_if
    (9) statement -> . statement_instance
    (10) statement -> . statement_type_def
    (19) statement -> . WHILE expression COLON LBRACE statement_list RBRACE
    (11) statement_declaration -> . type id_list
    (12) statement_declaration -> . type id_list ASSIGN expression
    (13) statement_assign -> . expression ASSIGN expression
    (14) statement_function -> . DEF type ID LPAREN param_list RPAREN COLON LBRACE statement_list RBRACE
    (15) statement_return -> . RETURN expression
    (16) statement_if -> . IF expression COLON LBRACE statement_list RBRACE
    (17) statement_if -> . IF expression COLON LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE
    (18) statement_instance -> . ID ID
    (20) statement_type_def -> . TYPE ID COLON LBRACE field_list RBRACE
    (23) type -> . base_type
    (24) type -> . base_type LBRACKET NUMBER RBRACKET
    (29) expression -> . expression_binaria
    (30) expression -> . expression_comparacion
    (31) expression -> . expression_logica
    (32) expression -> . expression_unaria
    (33) expression -> . expression_group
    (34) expression -> . expression_number
    (35) expression -> . expression_var
    (36) expression -> . expression_array_access
    (37) expression -> . expression_field_access
    (38) expression -> . expression_func_call
    (25) base_type -> . INT
    (26) base_type -> . FLOAT
    (27) base_type -> . CHAR
    (28) base_type -> . BOOL
    (39) expression_binaria -> . expression PLUS expression
    (40) expression_binaria -> . expression MINUS expression
    (41) expression_binaria -> . expression TIMES expression
    (42) expression_binaria -> . expression DIVIDE expression
    (43) expression_comparacion -> . expression EQ expression
    (44) expression_comparacion -> . expression GT expression
    (45) expression_comparacion -> . expression GE expression
    (46) expression_comparacion -> . expression LT expression
    (47) expression_comparacion -> . expression LE expression
    (48) expression_logica -> . expression AND expression
    (49) expression_logica -> . expression OR expression
    (50) expression_unaria -> . MINUS expression
    (51) expression_unaria -> . NOT expression
    (52) expression_group -> . LPAREN expression RPAREN
    (53) expression_number -> . NUMBER
    (54) expression_number -> . FLOAT_NUMBER
    (55) expression_number -> . TRUE
    (56) expression_number -> . FALSE
    (57) expression_number -> . CHARACTER
    (58) expression_var -> . ID
    (59) expression_array_access -> . expression LBRACKET expression RBRACKET
    (60) expression_field_access -> . expression DOT ID
    (61) expression_func_call -> . ID LPAREN arg_list RPAREN

    RBRACE          shift and go to state 130
    WHILE           shift and go to state 11
    DEF             shift and go to state 14
    RETURN          shift and go to state 17
    IF              shift and go to state 18
    ID              shift and go to state 15
    TYPE            shift and go to state 19
    INT             shift and go to state 32
    FLOAT           shift and go to state 33
    CHAR            shift and go to state 34
    BOOL            shift and go to state 35
    MINUS           shift and go to state 36
    NOT             shift and go to state 37
    LPAREN          shift and go to state 16
    NUMBER          shift and go to state 21
    FLOAT_NUMBER    shift and go to state 38
    TRUE            shift and go to state 39
    FALSE           shift and go to state 40
    CHARACTER       shift and go to state 41

    type                           shift and go to state 13
    statement                      shift and go to state 42
    statement_declaration          shift and go to state 4
    statement_assign               shift and go to state 5
    statement_function             shift and go to state 6
    statement_return               shift and go to state 7
    statement_if                   shift and go to state 8
    statement_instance             shift and go to state 9
    statement_type_def             shift and go to state 10
    expression                     shift and go to state 12
    base_type                      shift and go to state 20
    expression_binaria             shift and go to state 22
    expression_comparacion         shift and go to state 23
    expression_logica              shift and go to state 24
    expression_unaria              shift and go to state 25
    expression_group               shift and go to state 26
    expression_number              shift and go to state 27
    expression_var                 shift and go to state 28
    expression_array_access        shift and go to state 29
    expression_field_access        shift and go to state 30
    expression_func_call           shift and go to state 31

state 129

    (17) statement_if -> IF expression COLON LBRACE statement_list RBRACE ELSE LBRACE statement_list . RBRACE
    (3) statement_list -> statement_list . statement
    (4) statement -> . statement_declaration
    (5) statement -> . statement_assign
    (6) statement -> . statement_function
    (7) statement -> . statement_return
    (8) statement -> . statement_if
    (9) statement -> . statement_instance
    (10) statement -> . statement_type_def
    (19) statement -> . WHILE expression COLON LBRACE statement_list RBRACE
    (11) statement_declaration -> . type id_list
    (12) statement_declaration -> . type id_list ASSIGN expression
    (13) statement_assign -> . expression ASSIGN expression
    (14) statement_function -> . DEF type ID LPAREN param_list RPAREN COLON LBRACE statement_list RBRACE
    (15) statement_return -> . RETURN expression
    (16) statement_if -> . IF expression COLON LBRACE statement_list RBRACE
    (17) statement_if -> . IF expression COLON LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE
    (18) statement_instance -> . ID ID
    (20) statement_type_def -> . TYPE ID COLON LBRACE field_list RBRACE
    (23) type -> . base_type
    (24) type -> . base_type LBRACKET NUMBER RBRACKET
    (29) expression -> . expression_binaria
    (30) expression -> . expression_comparacion
    (31) expression -> . expression_logica
    (32) expression -> . expression_unaria
    (33) expression -> . expression_group
    (34) expression -> . expression_number
    (35) expression -> . expression_var
    (36) expression -> . expression_array_access
    (37) expression -> . expression_field_access
    (38) expression -> . expression_func_call
    (25) base_type -> . INT
    (26) base_type -> . FLOAT
    (27) base_type -> . CHAR
    (28) base_type -> . BOOL
    (39) expression_binaria -> . expression PLUS expression
    (40) expression_binaria -> . expression MINUS expression
    (41) expression_binaria -> . expression TIMES expression
    (42) expression_binaria -> . expression DIVIDE expression
    (43) expression_comparacion -> . expression EQ expression
    (44) expression_comparacion -> . expression GT expression
    (45) expression_comparacion -> . expression GE expression
    (46) expression_comparacion -> . expression LT expression
    (47) expression_comparacion -> . expression LE expression
    (48) expression_logica -> . expression AND expression
    (49) expression_logica -> . expression OR expression
    (50) expression_unaria -> . MINUS expression
    (51) expression_unaria -> . NOT expression
    (52) expression_group -> . LPAREN expression RPAREN
    (53) expression_number -> . NUMBER
    (54) expression_number -> . FLOAT_NUMBER
    (55) expression_number -> . TRUE
    (56) expression_number -> . FALSE
    (57) expression_number -> . CHARACTER
    (58) expression_var -> . ID
    (59) expression_array_access -> . expression LBRACKET expression RBRACKET
    (60) expression_field_access -> . expression DOT ID
    (61) expression_func_call -> . ID LPAREN arg_list RPAREN

    RBRACE          shift and go to state 131
    WHILE           shift and go to state 11
    DEF             shift and go to state 14
    RETURN          shift and go to state 17
    IF              shift and go to state 18
    ID              shift and go to state 15
    TYPE            shift and go to state 19
    INT             shift and go to state 32
    FLOAT           shift and go to state 33
    CHAR            shift and go to state 34
    BOOL            shift and go to state 35
    MINUS           shift and go to state 36
    NOT             shift and go to state 37
    LPAREN          shift and go to state 16
    NUMBER          shift and go to state 21
    FLOAT_NUMBER    shift and go to state 38
    TRUE            shift and go to state 39
    FALSE           shift and go to state 40
    CHARACTER       shift and go to state 41

    expression                     shift and go to state 12
    statement                      shift and go to state 42
    statement_declaration          shift and go to state 4
    statement_assign               shift and go to state 5
    statement_function             shift and go to state 6
    statement_return               shift and go to state 7
    statement_if                   shift and go to state 8
    statement_instance             shift and go to state 9
    statement_type_def             shift and go to state 10
    type                           shift and go to state 13
    base_type                      shift and go to state 20
    expression_binaria             shift and go to state 22
    expression_comparacion         shift and go to state 23
    expression_logica              shift and go to state 24
    expression_unaria              shift and go to state 25
    expression_group               shift and go to state 26
    expression_number              shift and go to state 27
    expression_var                 shift and go to state 28
    expression_array_access        shift and go to state 29
    expression_field_access        shift and go to state 30
    expression_func_call           shift and go to state 31

state 130

    (14) statement_function -> DEF type ID LPAREN param_list RPAREN COLON LBRACE statement_list RBRACE .

    WHILE           reduce using rule 14 (statement_function -> DEF type ID LPAREN param_list RPAREN COLON LBRACE statement_list RBRACE .)
    DEF             reduce using rule 14 (statement_function -> DEF type ID LPAREN param_list RPAREN COLON LBRACE statement_list RBRACE .)
    RETURN          reduce using rule 14 (statement_function -> DEF type ID LPAREN param_list RPAREN COLON LBRACE statement_list RBRACE .)
    IF              reduce using rule 14 (statement_function -> DEF type ID LPAREN param_list RPAREN COLON LBRACE statement_list RBRACE .)
    ID              reduce using rule 14 (statement_function -> DEF type ID LPAREN param_list RPAREN COLON LBRACE statement_list RBRACE .)
    TYPE            reduce using rule 14 (statement_function -> DEF type ID LPAREN param_list RPAREN COLON LBRACE statement_list RBRACE .)
    INT             reduce using rule 14 (statement_function -> DEF type ID LPAREN param_list RPAREN COLON LBRACE statement_list RBRACE .)
    FLOAT           reduce using rule 14 (statement_function -> DEF type ID LPAREN param_list RPAREN COLON LBRACE statement_list RBRACE .)
    CHAR            reduce using rule 14 (statement_function -> DEF type ID LPAREN param_list RPAREN COLON LBRACE statement_list RBRACE .)
    BOOL            reduce using rule 14 (statement_function -> DEF type ID LPAREN param_list RPAREN COLON LBRACE statement_list RBRACE .)
    MINUS           reduce using rule 14 (statement_function -> DEF type ID LPAREN param_list RPAREN COLON LBRACE statement_list RBRACE .)
    NOT             reduce using rule 14 (statement_function -> DEF type ID LPAREN param_list RPAREN COLON LBRACE statement_list RBRACE .)
    LPAREN          reduce using rule 14 (statement_function -> DEF type ID LPAREN param_list RPAREN COLON LBRACE statement_list RBRACE .)
    NUMBER          reduce using rule 14 (statement_function -> DEF type ID LPAREN param_list RPAREN COLON LBRACE statement_list RBRACE .)
    FLOAT_NUMBER    reduce using rule 14 (statement_function -> DEF type ID LPAREN param_list RPAREN COLON LBRACE statement_list RBRACE .)
    TRUE            reduce using rule 14 (statement_function -> DEF type ID LPAREN param_list RPAREN COLON LBRACE statement_list RBRACE .)
    FALSE           reduce using rule 14 (statement_function -> DEF type ID LPAREN param_list RPAREN COLON LBRACE statement_list RBRACE .)
    CHARACTER       reduce using rule 14 (statement_function -> DEF type ID LPAREN param_list RPAREN COLON LBRACE statement_list RBRACE .)
    $end            reduce using rule 14 (statement_function -> DEF type ID LPAREN param_list RPAREN COLON LBRACE statement_list RBRACE .)
    RBRACE          reduce using rule 14 (statement_function -> DEF type ID LPAREN param_list RPAREN COLON LBRACE statement_list RBRACE .)


state 131

    (17) statement_if -> IF expression COLON LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .

    WHILE           reduce using rule 17 (statement_if -> IF expression COLON LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    DEF             reduce using rule 17 (statement_if -> IF expression COLON LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    RETURN          reduce using rule 17 (statement_if -> IF expression COLON LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    IF              reduce using rule 17 (statement_if -> IF expression COLON LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    ID              reduce using rule 17 (statement_if -> IF expression COLON LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    TYPE            reduce using rule 17 (statement_if -> IF expression COLON LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    INT             reduce using rule 17 (statement_if -> IF expression COLON LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    FLOAT           reduce using rule 17 (statement_if -> IF expression COLON LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    CHAR            reduce using rule 17 (statement_if -> IF expression COLON LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    BOOL            reduce using rule 17 (statement_if -> IF expression COLON LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    MINUS           reduce using rule 17 (statement_if -> IF expression COLON LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    NOT             reduce using rule 17 (statement_if -> IF expression COLON LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    LPAREN          reduce using rule 17 (statement_if -> IF expression COLON LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    NUMBER          reduce using rule 17 (statement_if -> IF expression COLON LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    FLOAT_NUMBER    reduce using rule 17 (statement_if -> IF expression COLON LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    TRUE            reduce using rule 17 (statement_if -> IF expression COLON LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    FALSE           reduce using rule 17 (statement_if -> IF expression COLON LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    CHARACTER       reduce using rule 17 (statement_if -> IF expression COLON LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    $end            reduce using rule 17 (statement_if -> IF expression COLON LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    RBRACE          reduce using rule 17 (statement_if -> IF expression COLON LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for LPAREN in state 44 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 65 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 72 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 98 resolved as shift
