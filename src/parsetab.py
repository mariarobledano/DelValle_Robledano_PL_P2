
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftORleftANDrightNOTnonassocEQGTGELTLEleftPLUSMINUSleftTIMESDIVIDErightUMINUSAND ASSIGN BOOL CHAR CHARACTER COLON COMMA DEF DIVIDE DOT ELSE EQ FALSE FLOAT FLOAT_NUMBER GE GT ID IF INT LBRACE LBRACKET LE LPAREN LT MINUS NOT NUMBER OR PLUS RBRACE RBRACKET RETURN RPAREN SEMICOLON TIMES TRUE TYPEprogram : statement_liststatement_list : statement\n                          | statement_list statement statement : type id_list\n                     | type id_list ASSIGN expressionid_list : IDid_list : id_list COMMA IDtype : base_type\n                | base_type LBRACKET NUMBER RBRACKETbase_type : INT\n                    | FLOAT\n                    | CHAR\n                    | BOOLexpression : expression PLUS expression\n                    | expression MINUS expression\n                    | expression TIMES expression\n                    | expression DIVIDE expressionexpression : expression EQ expression\n                    | expression GT expression\n                    | expression GE expression\n                    | expression LT expression\n                    | expression LE expressionexpression : expression AND expression\n                    | expression OR expressionexpression : MINUS expression %prec UMINUS\n                      | NOT expressionexpression : LPAREN expression RPARENexpression : NUMBER\n                      | FLOAT_NUMBER\n                      | TRUE\n                      | FALSE\n                      | CHARACTERexpression : IDexpression : expression LBRACKET expression RBRACKETstatement : expression ASSIGN expressionstatement : DEF type ID LPAREN param_list RPAREN COLON LBRACE statement_list RBRACEparam_list : param\n                      | param_list SEMICOLON paramparam : type IDstatement : RETURN expressionstatement : IF expression statement ELSE statementexpression : ID LPAREN arg_list RPARENarg_list : expression\n                    | arg_list COMMA expression\n                    | emptystatement : TYPE ID COLON LBRACE field_list RBRACEstatement : ID IDfield_list : field\n                      | field_list fieldfield : type IDexpression : expression DOT IDempty :'
    
_lr_action_items = {'DEF':([0,2,3,13,16,17,18,19,24,25,26,42,45,46,47,50,51,54,55,56,57,58,59,60,61,62,63,64,65,67,72,77,78,79,81,83,84,91,98,103,104,105,],[6,6,-2,-28,-29,-30,-31,-32,-3,-4,-6,-47,-33,-40,6,-25,-26,-35,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-51,-27,-5,-7,-34,-42,6,-15,-41,-46,6,6,-36,]),'RETURN':([0,2,3,13,16,17,18,19,24,25,26,42,45,46,47,50,51,54,55,56,57,58,59,60,61,62,63,64,65,67,72,77,78,79,81,83,84,91,98,103,104,105,],[9,9,-2,-28,-29,-30,-31,-32,-3,-4,-6,-47,-33,-40,9,-25,-26,-35,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-51,-27,-5,-7,-34,-42,9,-15,-41,-46,9,9,-36,]),'IF':([0,2,3,13,16,17,18,19,24,25,26,42,45,46,47,50,51,54,55,56,57,58,59,60,61,62,63,64,65,67,72,77,78,79,81,83,84,91,98,103,104,105,],[10,10,-2,-28,-29,-30,-31,-32,-3,-4,-6,-47,-33,-40,10,-25,-26,-35,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-51,-27,-5,-7,-34,-42,10,-15,-41,-46,10,10,-36,]),'TYPE':([0,2,3,13,16,17,18,19,24,25,26,42,45,46,47,50,51,54,55,56,57,58,59,60,61,62,63,64,65,67,72,77,78,79,81,83,84,91,98,103,104,105,],[11,11,-2,-28,-29,-30,-31,-32,-3,-4,-6,-47,-33,-40,11,-25,-26,-35,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-51,-27,-5,-7,-34,-42,11,-15,-41,-46,11,11,-36,]),'ID':([0,2,3,4,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,45,46,47,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,67,72,74,77,78,79,81,82,83,84,86,87,91,94,98,103,104,105,],[7,7,-2,26,42,45,45,45,48,-8,-28,45,45,-29,-30,-31,-32,-10,-11,-12,-13,-3,-4,-6,45,45,45,45,45,45,45,45,45,45,45,45,45,67,68,-47,45,-33,-40,7,-25,-26,45,78,-35,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-51,-27,45,-5,-7,-34,-42,45,7,-15,-9,95,-41,100,-46,7,7,-36,]),'MINUS':([0,2,3,5,7,8,9,10,13,14,15,16,17,18,19,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,42,43,44,45,46,47,50,51,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,70,72,74,77,78,79,81,82,83,84,90,91,98,103,104,105,],[14,14,-2,29,-33,14,14,14,-28,14,14,-29,-30,-31,-32,-3,-4,-6,14,14,14,14,14,14,14,14,14,14,14,14,14,-47,14,29,-33,29,74,-25,29,14,29,-14,-15,-16,-17,29,29,29,29,29,29,29,29,-51,29,-27,14,29,-7,-34,-42,14,14,-15,29,-41,-46,14,14,-36,]),'NOT':([0,2,3,8,9,10,13,14,15,16,17,18,19,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,42,43,45,46,47,50,51,52,54,55,56,57,58,59,60,61,62,63,64,65,67,72,74,77,78,79,81,82,83,84,91,98,103,104,105,],[15,15,-2,15,15,15,-28,15,15,-29,-30,-31,-32,-3,-4,-6,15,15,15,15,15,15,15,15,15,15,15,15,15,-47,15,-33,-40,15,-25,-26,15,-35,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-51,-27,15,-5,-7,-34,-42,15,15,-15,-41,-46,15,15,-36,]),'LPAREN':([0,2,3,7,8,9,10,13,14,15,16,17,18,19,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,42,43,45,46,47,50,51,52,54,55,56,57,58,59,60,61,62,63,64,65,67,68,72,74,77,78,79,81,82,83,84,91,98,103,104,105,],[8,8,-2,43,8,8,8,-28,8,8,-29,-30,-31,-32,-3,-4,-6,8,8,8,8,8,8,8,8,8,8,8,8,8,-47,8,43,-40,8,-25,-26,8,-35,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-51,80,-27,8,-5,-7,-34,-42,8,8,-15,-41,-46,8,8,-36,]),'NUMBER':([0,2,3,8,9,10,13,14,15,16,17,18,19,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,42,43,45,46,47,49,50,51,52,54,55,56,57,58,59,60,61,62,63,64,65,67,72,74,77,78,79,81,82,83,84,91,98,103,104,105,],[13,13,-2,13,13,13,-28,13,13,-29,-30,-31,-32,-3,-4,-6,13,13,13,13,13,13,13,13,13,13,13,13,13,-47,13,-33,-40,13,76,-25,-26,13,-35,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-51,-27,13,-5,-7,-34,-42,13,13,-15,-41,-46,13,13,-36,]),'FLOAT_NUMBER':([0,2,3,8,9,10,13,14,15,16,17,18,19,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,42,43,45,46,47,50,51,52,54,55,56,57,58,59,60,61,62,63,64,65,67,72,74,77,78,79,81,82,83,84,91,98,103,104,105,],[16,16,-2,16,16,16,-28,16,16,-29,-30,-31,-32,-3,-4,-6,16,16,16,16,16,16,16,16,16,16,16,16,16,-47,16,-33,-40,16,-25,-26,16,-35,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-51,-27,16,-5,-7,-34,-42,16,16,-15,-41,-46,16,16,-36,]),'TRUE':([0,2,3,8,9,10,13,14,15,16,17,18,19,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,42,43,45,46,47,50,51,52,54,55,56,57,58,59,60,61,62,63,64,65,67,72,74,77,78,79,81,82,83,84,91,98,103,104,105,],[17,17,-2,17,17,17,-28,17,17,-29,-30,-31,-32,-3,-4,-6,17,17,17,17,17,17,17,17,17,17,17,17,17,-47,17,-33,-40,17,-25,-26,17,-35,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-51,-27,17,-5,-7,-34,-42,17,17,-15,-41,-46,17,17,-36,]),'FALSE':([0,2,3,8,9,10,13,14,15,16,17,18,19,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,42,43,45,46,47,50,51,52,54,55,56,57,58,59,60,61,62,63,64,65,67,72,74,77,78,79,81,82,83,84,91,98,103,104,105,],[18,18,-2,18,18,18,-28,18,18,-29,-30,-31,-32,-3,-4,-6,18,18,18,18,18,18,18,18,18,18,18,18,18,-47,18,-33,-40,18,-25,-26,18,-35,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-51,-27,18,-5,-7,-34,-42,18,18,-15,-41,-46,18,18,-36,]),'CHARACTER':([0,2,3,8,9,10,13,14,15,16,17,18,19,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,42,43,45,46,47,50,51,52,54,55,56,57,58,59,60,61,62,63,64,65,67,72,74,77,78,79,81,82,83,84,91,98,103,104,105,],[19,19,-2,19,19,19,-28,19,19,-29,-30,-31,-32,-3,-4,-6,19,19,19,19,19,19,19,19,19,19,19,19,19,-47,19,-33,-40,19,-25,-26,19,-35,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-51,-27,19,-5,-7,-34,-42,19,19,-15,-41,-46,19,19,-36,]),'INT':([0,2,3,6,13,16,17,18,19,24,25,26,42,45,46,47,50,51,54,55,56,57,58,59,60,61,62,63,64,65,67,72,77,78,79,80,81,83,84,85,91,92,93,97,98,99,100,103,104,105,],[20,20,-2,20,-28,-29,-30,-31,-32,-3,-4,-6,-47,-33,-40,20,-25,-26,-35,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-51,-27,-5,-7,-34,20,-42,20,-15,20,-41,20,-48,20,-46,-49,-50,20,20,-36,]),'FLOAT':([0,2,3,6,13,16,17,18,19,24,25,26,42,45,46,47,50,51,54,55,56,57,58,59,60,61,62,63,64,65,67,72,77,78,79,80,81,83,84,85,91,92,93,97,98,99,100,103,104,105,],[21,21,-2,21,-28,-29,-30,-31,-32,-3,-4,-6,-47,-33,-40,21,-25,-26,-35,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-51,-27,-5,-7,-34,21,-42,21,-15,21,-41,21,-48,21,-46,-49,-50,21,21,-36,]),'CHAR':([0,2,3,6,13,16,17,18,19,24,25,26,42,45,46,47,50,51,54,55,56,57,58,59,60,61,62,63,64,65,67,72,77,78,79,80,81,83,84,85,91,92,93,97,98,99,100,103,104,105,],[22,22,-2,22,-28,-29,-30,-31,-32,-3,-4,-6,-47,-33,-40,22,-25,-26,-35,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-51,-27,-5,-7,-34,22,-42,22,-15,22,-41,22,-48,22,-46,-49,-50,22,22,-36,]),'BOOL':([0,2,3,6,13,16,17,18,19,24,25,26,42,45,46,47,50,51,54,55,56,57,58,59,60,61,62,63,64,65,67,72,77,78,79,80,81,83,84,85,91,92,93,97,98,99,100,103,104,105,],[23,23,-2,23,-28,-29,-30,-31,-32,-3,-4,-6,-47,-33,-40,23,-25,-26,-35,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-51,-27,-5,-7,-34,23,-42,23,-15,23,-41,23,-48,23,-46,-49,-50,23,23,-36,]),'$end':([1,2,3,13,16,17,18,19,24,25,26,42,45,46,50,51,54,55,56,57,58,59,60,61,62,63,64,65,67,72,77,78,79,81,91,98,105,],[0,-1,-2,-28,-29,-30,-31,-32,-3,-4,-6,-47,-33,-40,-25,-26,-35,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-51,-27,-5,-7,-34,-42,-41,-46,-36,]),'RBRACE':([3,13,16,17,18,19,24,25,26,42,45,46,50,51,54,55,56,57,58,59,60,61,62,63,64,65,67,72,77,78,79,81,91,92,93,98,99,100,104,105,],[-2,-28,-29,-30,-31,-32,-3,-4,-6,-47,-33,-40,-25,-26,-35,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-51,-27,-5,-7,-34,-42,-41,98,-48,-46,-49,-50,105,-36,]),'ASSIGN':([5,7,13,16,17,18,19,25,26,45,50,51,55,56,57,58,59,60,61,62,63,64,65,67,72,78,79,81,84,],[27,-33,-28,-29,-30,-31,-32,52,-6,-33,-25,-26,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-51,-27,-7,-34,-42,-25,]),'PLUS':([5,7,13,16,17,18,19,44,45,46,47,50,51,54,55,56,57,58,59,60,61,62,63,64,65,66,67,70,72,77,79,81,84,90,],[28,-33,-28,-29,-30,-31,-32,28,-33,28,28,-25,28,28,-14,-15,-16,-17,28,28,28,28,28,28,28,28,-51,28,-27,28,-34,-42,-15,28,]),'TIMES':([5,7,13,16,17,18,19,44,45,46,47,50,51,54,55,56,57,58,59,60,61,62,63,64,65,66,67,70,72,77,79,81,84,90,],[30,-33,-28,-29,-30,-31,-32,30,-33,30,30,-25,30,30,30,30,-16,-17,30,30,30,30,30,30,30,30,-51,30,-27,30,-34,-42,30,30,]),'DIVIDE':([5,7,13,16,17,18,19,44,45,46,47,50,51,54,55,56,57,58,59,60,61,62,63,64,65,66,67,70,72,77,79,81,84,90,],[31,-33,-28,-29,-30,-31,-32,31,-33,31,31,-25,31,31,31,31,-16,-17,31,31,31,31,31,31,31,31,-51,31,-27,31,-34,-42,31,31,]),'EQ':([5,7,13,16,17,18,19,44,45,46,47,50,51,54,55,56,57,58,59,60,61,62,63,64,65,66,67,70,72,77,79,81,84,90,],[32,-33,-28,-29,-30,-31,-32,32,-33,32,32,-25,32,32,-14,-15,-16,-17,None,None,None,None,None,32,32,32,-51,32,-27,32,-34,-42,-15,32,]),'GT':([5,7,13,16,17,18,19,44,45,46,47,50,51,54,55,56,57,58,59,60,61,62,63,64,65,66,67,70,72,77,79,81,84,90,],[33,-33,-28,-29,-30,-31,-32,33,-33,33,33,-25,33,33,-14,-15,-16,-17,None,None,None,None,None,33,33,33,-51,33,-27,33,-34,-42,-15,33,]),'GE':([5,7,13,16,17,18,19,44,45,46,47,50,51,54,55,56,57,58,59,60,61,62,63,64,65,66,67,70,72,77,79,81,84,90,],[34,-33,-28,-29,-30,-31,-32,34,-33,34,34,-25,34,34,-14,-15,-16,-17,None,None,None,None,None,34,34,34,-51,34,-27,34,-34,-42,-15,34,]),'LT':([5,7,13,16,17,18,19,44,45,46,47,50,51,54,55,56,57,58,59,60,61,62,63,64,65,66,67,70,72,77,79,81,84,90,],[35,-33,-28,-29,-30,-31,-32,35,-33,35,35,-25,35,35,-14,-15,-16,-17,None,None,None,None,None,35,35,35,-51,35,-27,35,-34,-42,-15,35,]),'LE':([5,7,13,16,17,18,19,44,45,46,47,50,51,54,55,56,57,58,59,60,61,62,63,64,65,66,67,70,72,77,79,81,84,90,],[36,-33,-28,-29,-30,-31,-32,36,-33,36,36,-25,36,36,-14,-15,-16,-17,None,None,None,None,None,36,36,36,-51,36,-27,36,-34,-42,-15,36,]),'AND':([5,7,13,16,17,18,19,44,45,46,47,50,51,54,55,56,57,58,59,60,61,62,63,64,65,66,67,70,72,77,79,81,84,90,],[37,-33,-28,-29,-30,-31,-32,37,-33,37,37,-25,-26,37,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,37,37,-51,37,-27,37,-34,-42,-15,37,]),'OR':([5,7,13,16,17,18,19,44,45,46,47,50,51,54,55,56,57,58,59,60,61,62,63,64,65,66,67,70,72,77,79,81,84,90,],[38,-33,-28,-29,-30,-31,-32,38,-33,38,38,-25,-26,38,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,38,-51,38,-27,38,-34,-42,-15,38,]),'LBRACKET':([5,7,12,13,16,17,18,19,20,21,22,23,44,45,46,47,50,51,54,55,56,57,58,59,60,61,62,63,64,65,66,67,70,72,77,79,81,84,90,],[39,-33,49,-28,-29,-30,-31,-32,-10,-11,-12,-13,39,-33,39,39,-25,-26,39,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,39,-51,39,-27,39,-34,-42,-15,39,]),'DOT':([5,7,13,16,17,18,19,44,45,46,47,50,51,54,55,56,57,58,59,60,61,62,63,64,65,66,67,70,72,77,79,81,84,90,],[40,-33,-28,-29,-30,-31,-32,40,-33,40,40,-25,-26,40,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,40,-51,40,-27,40,-34,-42,-15,40,]),'RPAREN':([13,16,17,18,19,43,44,45,50,51,55,56,57,58,59,60,61,62,63,64,65,67,69,70,71,72,79,81,88,89,90,95,102,],[-28,-29,-30,-31,-32,-52,72,-33,-25,-26,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-51,81,-43,-45,-27,-34,-42,96,-37,-44,-39,-38,]),'ELSE':([13,16,17,18,19,25,26,42,45,46,50,51,54,55,56,57,58,59,60,61,62,63,64,65,67,72,73,77,78,79,81,91,98,105,],[-28,-29,-30,-31,-32,-4,-6,-47,-33,-40,-25,-26,-35,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-51,-27,83,-5,-7,-34,-42,-41,-46,-36,]),'RBRACKET':([13,16,17,18,19,45,50,51,55,56,57,58,59,60,61,62,63,64,65,66,67,72,76,79,81,],[-28,-29,-30,-31,-32,-33,-25,-26,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,79,-51,-27,86,-34,-42,]),'COMMA':([13,16,17,18,19,25,26,43,45,50,51,55,56,57,58,59,60,61,62,63,64,65,67,69,70,71,72,78,79,81,90,],[-28,-29,-30,-31,-32,53,-6,-52,-33,-25,-26,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-51,82,-43,-45,-27,-7,-34,-42,-44,]),'COLON':([48,96,],[75,101,]),'LBRACE':([75,101,],[85,103,]),'SEMICOLON':([88,89,95,102,],[97,-37,-39,-38,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement_list':([0,103,],[2,104,]),'statement':([0,2,47,83,103,104,],[3,24,73,91,3,24,]),'type':([0,2,6,47,80,83,85,92,97,103,104,],[4,4,41,4,87,4,94,94,87,4,4,]),'expression':([0,2,8,9,10,14,15,27,28,29,30,31,32,33,34,35,36,37,38,39,43,47,52,74,82,83,103,104,],[5,5,44,46,47,50,51,54,55,56,57,58,59,60,61,62,63,64,65,66,70,5,77,84,90,5,5,5,]),'base_type':([0,2,6,47,80,83,85,92,97,103,104,],[12,12,12,12,12,12,12,12,12,12,12,]),'id_list':([4,],[25,]),'arg_list':([43,],[69,]),'empty':([43,],[71,]),'param_list':([80,],[88,]),'param':([80,97,],[89,102,]),'field_list':([85,],[92,]),'field':([85,92,],[93,99,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','parser.py',26),
  ('statement_list -> statement','statement_list',1,'p_statement_list','parser.py',31),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','parser.py',32),
  ('statement -> type id_list','statement',2,'p_statement_declaration','parser.py',40),
  ('statement -> type id_list ASSIGN expression','statement',4,'p_statement_declaration','parser.py',41),
  ('id_list -> ID','id_list',1,'p_id_list_single','parser.py',48),
  ('id_list -> id_list COMMA ID','id_list',3,'p_id_list_rec','parser.py',52),
  ('type -> base_type','type',1,'p_type','parser.py',56),
  ('type -> base_type LBRACKET NUMBER RBRACKET','type',4,'p_type','parser.py',57),
  ('base_type -> INT','base_type',1,'p_base_type','parser.py',64),
  ('base_type -> FLOAT','base_type',1,'p_base_type','parser.py',65),
  ('base_type -> CHAR','base_type',1,'p_base_type','parser.py',66),
  ('base_type -> BOOL','base_type',1,'p_base_type','parser.py',67),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binaria','parser.py',73),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binaria','parser.py',74),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binaria','parser.py',75),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binaria','parser.py',76),
  ('expression -> expression EQ expression','expression',3,'p_expression_comparacion','parser.py',81),
  ('expression -> expression GT expression','expression',3,'p_expression_comparacion','parser.py',82),
  ('expression -> expression GE expression','expression',3,'p_expression_comparacion','parser.py',83),
  ('expression -> expression LT expression','expression',3,'p_expression_comparacion','parser.py',84),
  ('expression -> expression LE expression','expression',3,'p_expression_comparacion','parser.py',85),
  ('expression -> expression AND expression','expression',3,'p_expression_logica','parser.py',90),
  ('expression -> expression OR expression','expression',3,'p_expression_logica','parser.py',91),
  ('expression -> MINUS expression','expression',2,'p_expression_unaria','parser.py',96),
  ('expression -> NOT expression','expression',2,'p_expression_unaria','parser.py',97),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','parser.py',101),
  ('expression -> NUMBER','expression',1,'p_expression_number','parser.py',105),
  ('expression -> FLOAT_NUMBER','expression',1,'p_expression_number','parser.py',106),
  ('expression -> TRUE','expression',1,'p_expression_number','parser.py',107),
  ('expression -> FALSE','expression',1,'p_expression_number','parser.py',108),
  ('expression -> CHARACTER','expression',1,'p_expression_number','parser.py',109),
  ('expression -> ID','expression',1,'p_expression_id','parser.py',113),
  ('expression -> expression LBRACKET expression RBRACKET','expression',4,'p_expression_array_access','parser.py',117),
  ('statement -> expression ASSIGN expression','statement',3,'p_statement_assign','parser.py',122),
  ('statement -> DEF type ID LPAREN param_list RPAREN COLON LBRACE statement_list RBRACE','statement',10,'p_statement_function','parser.py',127),
  ('param_list -> param','param_list',1,'p_param_list','parser.py',134),
  ('param_list -> param_list SEMICOLON param','param_list',3,'p_param_list','parser.py',135),
  ('param -> type ID','param',2,'p_param','parser.py',142),
  ('statement -> RETURN expression','statement',2,'p_statement_return','parser.py',146),
  ('statement -> IF expression statement ELSE statement','statement',5,'p_statement_if','parser.py',154),
  ('expression -> ID LPAREN arg_list RPAREN','expression',4,'p_expression_func_call','parser.py',160),
  ('arg_list -> expression','arg_list',1,'p_arg_list','parser.py',164),
  ('arg_list -> arg_list COMMA expression','arg_list',3,'p_arg_list','parser.py',165),
  ('arg_list -> empty','arg_list',1,'p_arg_list','parser.py',166),
  ('statement -> TYPE ID COLON LBRACE field_list RBRACE','statement',6,'p_statement_type_def','parser.py',177),
  ('statement -> ID ID','statement',2,'p_statement_instance','parser.py',182),
  ('field_list -> field','field_list',1,'p_field_list','parser.py',187),
  ('field_list -> field_list field','field_list',2,'p_field_list','parser.py',188),
  ('field -> type ID','field',2,'p_field','parser.py',195),
  ('expression -> expression DOT ID','expression',3,'p_expression_field_access','parser.py',200),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',205),
]
